{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getActiveStateExceptDrawer = getActiveStateExceptDrawer;\n  exports.isActiveRoute = isActiveRoute;\n  exports.getRouteNameByKey = getRouteNameByKey;\n  exports.getActiveState = getActiveState;\n  exports.getParent = getParent;\n  exports.inject = inject;\n  exports.popPrevious = popPrevious;\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function getActiveStateExceptDrawer(param) {\n    var state = param;\n\n    if (!state.routes) {\n      return state;\n    }\n\n    if (state.routes[state.index].routeName === 'DrawerOpen') {\n      return getActiveState(state.routes[0]);\n    }\n\n    return getActiveState(state.routes[state.index]);\n  }\n\n  function isActiveRoute(state, routeName) {\n    if (state.routeName === routeName) {\n      return true;\n    }\n\n    if (!state.routes) {\n      return state.routeName === routeName;\n    }\n\n    if (state.routes[state.index].routeName === 'DrawerOpen') {\n      return isActiveRoute(state.routes[0], routeName);\n    }\n\n    return isActiveRoute(state.routes[state.index], routeName);\n  }\n\n  function getRouteNameByKey(state, key) {\n    if (state.key === key) {\n      return state.routeName;\n    }\n\n    if (!state.routes) {\n      return state.routeName;\n    }\n\n    if (state.routes[state.index].key === key) {\n      return state.routes[state.index].routeName;\n    }\n\n    return getRouteNameByKey(state.routes[state.index], key);\n  }\n\n  function getActiveState(param, parent) {\n    var state = param;\n\n    if (!state.routes) {\n      return _objectSpread({}, state, {\n        parent: parent\n      });\n    }\n\n    return getActiveState(state.routes[state.index], _objectSpread({}, state, {\n      parent: parent\n    }));\n  }\n\n  function getParent(state, routeName, parent) {\n    if (state.routeName === routeName) {\n      return parent;\n    }\n\n    if (!state.routes) {\n      return null;\n    }\n\n    for (var i = 0; i < state.routes.length; i += 1) {\n      var res = getParent(state.routes[i], routeName, state);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    return null;\n  }\n\n  function inject(state, key, index, routes) {\n    if (!state.routes) {\n      return state;\n    }\n\n    if (state.key === key) {\n      if (routes) {\n        return _objectSpread({}, state, {\n          routes: routes,\n          index: index\n        });\n      }\n\n      return _objectSpread({}, state, {\n        index: index\n      });\n    }\n\n    return _objectSpread({}, state, {\n      routes: state.routes.map(function (x) {\n        return inject(x, key, index, routes);\n      })\n    });\n  }\n\n  function popPrevious(state, routeName) {\n    var parent = getParent(state, routeName);\n    var key = parent.key,\n        index = parent.index;\n\n    if (index) {\n      var routes = _toConsumableArray(parent.routes.slice(0, index - 1)).concat(_toConsumableArray(parent.routes.slice(index)));\n\n      var newState = inject(state, key, index - 1, routes);\n      return newState;\n    }\n\n    return state;\n  }\n});","map":[[25,0,1,7],[25,11,1,16,"getActiveStateExceptDrawer"],[25,37,1,7],[25,38,1,43,"param"],[25,43,1,7],[25,45,1,50],[26,0,2,2],[26,8,2,8,"state"],[26,16,2,16,"param"],[26,21,2,2],[28,0,3,2],[28,8,3,6],[28,9,3,7,"state"],[28,15,3,13,"routes"],[28,21,3,2],[28,23,3,21],[29,0,4,4],[29,13,4,11,"state"],[29,18,4,4],[30,0,5,3],[32,0,6,2],[32,8,6,6,"state"],[32,14,6,12,"routes"],[32,20,6,6],[32,21,6,19,"state"],[32,27,6,25,"index"],[32,32,6,6],[32,34,6,32,"routeName"],[32,43,6,6],[32,48,6,46],[32,60,6,2],[32,62,6,60],[33,0,7,4],[33,13,7,11,"getActiveState"],[33,28,7,26,"state"],[33,34,7,32,"routes"],[33,40,7,26],[33,41,7,39],[33,42,7,26],[33,43,7,11],[33,44,7,4],[34,0,8,3],[36,0,9,2],[36,11,9,9,"getActiveState"],[36,26,9,24,"state"],[36,32,9,30,"routes"],[36,38,9,24],[36,39,9,37,"state"],[36,45,9,43,"index"],[36,50,9,24],[36,51,9,9],[36,52,9,2],[37,0,10,1],[39,0,12,7],[39,11,12,16,"isActiveRoute"],[39,24,12,7],[39,25,12,30,"state"],[39,30,12,7],[39,32,12,37,"routeName"],[39,41,12,7],[39,43,12,48],[40,0,13,2],[40,8,13,6,"state"],[40,14,13,12,"routeName"],[40,23,13,6],[40,28,13,26,"routeName"],[40,37,13,2],[40,39,13,37],[41,0,14,4],[41,13,14,11],[41,17,14,4],[42,0,15,3],[44,0,16,2],[44,8,16,6],[44,9,16,7,"state"],[44,15,16,13,"routes"],[44,21,16,2],[44,23,16,21],[45,0,17,4],[45,13,17,11,"state"],[45,19,17,17,"routeName"],[45,28,17,11],[45,33,17,31,"routeName"],[45,42,17,4],[46,0,18,3],[48,0,19,2],[48,8,19,6,"state"],[48,14,19,12,"routes"],[48,20,19,6],[48,21,19,19,"state"],[48,27,19,25,"index"],[48,32,19,6],[48,34,19,32,"routeName"],[48,43,19,6],[48,48,19,46],[48,60,19,2],[48,62,19,60],[49,0,20,4],[49,13,20,11,"isActiveRoute"],[49,27,20,25,"state"],[49,33,20,31,"routes"],[49,39,20,25],[49,40,20,38],[49,41,20,25],[49,42,20,11],[49,44,20,42,"routeName"],[49,53,20,11],[49,54,20,4],[50,0,21,3],[52,0,22,2],[52,11,22,9,"isActiveRoute"],[52,25,22,23,"state"],[52,31,22,29,"routes"],[52,37,22,23],[52,38,22,36,"state"],[52,44,22,42,"index"],[52,49,22,23],[52,50,22,9],[52,52,22,50,"routeName"],[52,61,22,9],[52,62,22,2],[53,0,23,1],[55,0,25,7],[55,11,25,16,"getRouteNameByKey"],[55,28,25,7],[55,29,25,34,"state"],[55,34,25,7],[55,36,25,41,"key"],[55,39,25,7],[55,41,25,46],[56,0,26,2],[56,8,26,6,"state"],[56,14,26,12,"key"],[56,17,26,6],[56,22,26,20,"key"],[56,25,26,2],[56,27,26,25],[57,0,27,4],[57,13,27,11,"state"],[57,19,27,17,"routeName"],[57,28,27,4],[58,0,28,3],[60,0,29,2],[60,8,29,6],[60,9,29,7,"state"],[60,15,29,13,"routes"],[60,21,29,2],[60,23,29,21],[61,0,30,4],[61,13,30,11,"state"],[61,19,30,17,"routeName"],[61,28,30,4],[62,0,31,3],[64,0,32,2],[64,8,32,6,"state"],[64,14,32,12,"routes"],[64,20,32,6],[64,21,32,19,"state"],[64,27,32,25,"index"],[64,32,32,6],[64,34,32,32,"key"],[64,37,32,6],[64,42,32,40,"key"],[64,45,32,2],[64,47,32,45],[65,0,33,4],[65,13,33,11,"state"],[65,19,33,17,"routes"],[65,25,33,11],[65,26,33,24,"state"],[65,32,33,30,"index"],[65,37,33,11],[65,39,33,37,"routeName"],[65,48,33,4],[66,0,34,3],[68,0,35,2],[68,11,35,9,"getRouteNameByKey"],[68,29,35,27,"state"],[68,35,35,33,"routes"],[68,41,35,27],[68,42,35,40,"state"],[68,48,35,46,"index"],[68,53,35,27],[68,54,35,9],[68,56,35,54,"key"],[68,59,35,9],[68,60,35,2],[69,0,36,1],[71,0,38,7],[71,11,38,16,"getActiveState"],[71,25,38,7],[71,26,38,31,"param"],[71,31,38,7],[71,33,38,38,"parent"],[71,39,38,7],[71,41,38,46],[72,0,39,2],[72,8,39,8,"state"],[72,16,39,16,"param"],[72,21,39,2],[74,0,40,2],[74,8,40,6],[74,9,40,7,"state"],[74,15,40,13,"routes"],[74,21,40,2],[74,23,40,21],[75,0,41,4],[75,31,41,16,"state"],[75,36,41,4],[76,0,41,23,"parent"],[77,0,41,4],[78,0,42,3],[80,0,43,2],[80,11,43,9,"getActiveState"],[80,26,43,24,"state"],[80,32,43,30,"routes"],[80,38,43,24],[80,39,43,37,"state"],[80,45,43,43,"index"],[80,50,43,24],[80,51,43,9],[80,71,43,56,"state"],[80,76,43,9],[81,0,43,63,"parent"],[82,0,43,9],[82,7,43,2],[83,0,44,1],[85,0,46,7],[85,11,46,16,"getParent"],[85,20,46,7],[85,21,46,26,"state"],[85,26,46,7],[85,28,46,33,"routeName"],[85,37,46,7],[85,39,46,44,"parent"],[85,45,46,7],[85,47,46,52],[86,0,47,2],[86,8,47,6,"state"],[86,14,47,12,"routeName"],[86,23,47,6],[86,28,47,26,"routeName"],[86,37,47,2],[86,39,47,37],[87,0,48,4],[87,13,48,11,"parent"],[87,19,48,4],[88,0,49,3],[90,0,50,2],[90,8,50,6],[90,9,50,7,"state"],[90,15,50,13,"routes"],[90,21,50,2],[90,23,50,21],[91,0,51,4],[91,13,51,11],[91,17,51,4],[92,0,52,3],[94,0,53,2],[94,9,53,7],[94,13,53,11,"i"],[94,17,53,15],[94,18,53,2],[94,20,53,18,"i"],[94,24,53,22,"state"],[94,30,53,28,"routes"],[94,36,53,22],[94,37,53,35,"length"],[94,43,53,2],[94,45,53,43,"i"],[94,50,53,48],[94,51,53,2],[94,53,53,51],[95,0,54,4],[95,10,54,10,"res"],[95,16,54,16,"getParent"],[95,26,54,26,"state"],[95,32,54,32,"routes"],[95,38,54,26],[95,39,54,39,"i"],[95,40,54,26],[95,41,54,16],[95,43,54,43,"routeName"],[95,52,54,16],[95,54,54,54,"state"],[95,59,54,16],[95,60,54,4],[97,0,55,4],[97,10,55,8,"res"],[97,13,55,4],[97,15,55,13],[98,0,56,6],[98,15,56,13,"res"],[98,18,56,6],[99,0,57,5],[100,0,58,3],[102,0,59,2],[102,11,59,9],[102,15,59,2],[103,0,60,1],[105,0,62,7],[105,11,62,16,"inject"],[105,17,62,7],[105,18,62,23,"state"],[105,23,62,7],[105,25,62,30,"key"],[105,28,62,7],[105,30,62,35,"index"],[105,35,62,7],[105,37,62,42,"routes"],[105,43,62,7],[105,45,62,50],[106,0,63,2],[106,8,63,6],[106,9,63,7,"state"],[106,15,63,13,"routes"],[106,21,63,2],[106,23,63,21],[107,0,64,4],[107,13,64,11,"state"],[107,18,64,4],[108,0,65,3],[110,0,66,2],[110,8,66,6,"state"],[110,14,66,12,"key"],[110,17,66,6],[110,22,66,20,"key"],[110,25,66,2],[110,27,66,25],[111,0,67,4],[111,10,67,8,"routes"],[111,16,67,4],[111,18,67,16],[112,0,68,6],[112,33,68,18,"state"],[112,38,68,6],[113,0,68,25,"routes"],[113,24,68,6],[114,0,68,33,"index"],[115,0,68,6],[116,0,69,5],[118,0,70,4],[118,31,70,16,"state"],[118,36,70,4],[119,0,70,23,"index"],[120,0,70,4],[121,0,71,3],[123,0,72,2],[123,29,72,14,"state"],[123,34,72,2],[124,0,72,21,"routes"],[124,14,72,29,"state"],[124,20,72,35,"routes"],[124,26,72,29],[124,27,72,42,"map"],[124,30,72,29],[124,31,72,46],[125,0,72,46],[125,15,72,51,"inject"],[125,22,72,58,"x"],[125,23,72,51],[125,25,72,61,"key"],[125,28,72,51],[125,30,72,66,"index"],[125,35,72,51],[125,37,72,73,"routes"],[125,43,72,51],[125,44,72,46],[126,0,72,46],[126,7,72,29],[127,0,72,2],[128,0,73,1],[130,0,75,7],[130,11,75,16,"popPrevious"],[130,22,75,7],[130,23,75,28,"state"],[130,28,75,7],[130,30,75,35,"routeName"],[130,39,75,7],[130,41,75,46],[131,0,76,2],[131,8,76,8,"parent"],[131,17,76,17,"getParent"],[131,27,76,27,"state"],[131,32,76,17],[131,34,76,34,"routeName"],[131,43,76,17],[131,44,76,2],[132,0,75,46],[132,8,78,10,"key"],[132,11,75,46],[132,14,78,25,"parent"],[132,20,75,46],[132,21,78,10,"key"],[132,24,75,46],[133,0,75,46],[133,8,78,15,"index"],[133,13,75,46],[133,16,78,25,"parent"],[133,22,75,46],[133,23,78,15,"index"],[133,28,75,46],[135,0,79,2],[135,8,79,6,"index"],[135,13,79,2],[135,15,79,13],[136,0,80,4],[136,10,80,10,"routes"],[136,38,80,23,"parent"],[136,45,80,30,"routes"],[136,51,80,23],[136,52,80,37,"slice"],[136,57,80,23],[136,58,80,43],[136,59,80,23],[136,61,80,46,"index"],[136,69,80,54],[136,70,80,23],[136,71,80,10],[136,99,80,61,"parent"],[136,106,80,68,"routes"],[136,112,80,61],[136,113,80,75,"slice"],[136,118,80,61],[136,119,80,81,"index"],[136,124,80,61],[136,125,80,10],[136,127,80,4],[138,0,81,4],[138,10,81,10,"newState"],[138,21,81,21,"inject"],[138,28,81,28,"state"],[138,33,81,21],[138,35,81,35,"key"],[138,38,81,21],[138,40,81,40,"index"],[138,48,81,48],[138,49,81,21],[138,51,81,51,"routes"],[138,57,81,21],[138,58,81,4],[139,0,82,4],[139,13,82,11,"newState"],[139,21,82,4],[140,0,83,3],[142,0,84,2],[142,11,84,9,"state"],[142,16,84,2],[143,0,85,1]]},"type":"js/module"}]}