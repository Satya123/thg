{"dependencies":[{"name":"react","isAsync":false},{"name":"./../../react-transform-hmr/lib/index.js","isAsync":false},{"name":"prop-types","isAsync":false},{"name":"./react-native","isAsync":false},{"name":"./icon-button","isAsync":false},{"name":"./tab-bar-item-ios","isAsync":false},{"name":"./toolbar-android","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = createIconSet;\n\n  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../../react-transform-hmr/lib/index.js\"));\n\n  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"prop-types\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[3], \"./react-native\");\n\n  var _iconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./icon-button\"));\n\n  var _tabBarItemIos = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./tab-bar-item-ios\"));\n\n  var _toolbarAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./toolbar-android\"));\n\n  var _jsxFileName = \"/var/www/html/thg/node_modules/react-native-vector-icons/lib/create-icon-set.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  var _components = {\n    Icon: {\n      displayName: \"Icon\",\n      isInFunction: true\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/var/www/html/thg/node_modules/react-native-vector-icons/lib/create-icon-set.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;\n  var DEFAULT_ICON_SIZE = 12;\n  var DEFAULT_ICON_COLOR = 'black';\n\n  function createIconSet(glyphMap, fontFamily, fontFile) {\n    var fontReference = fontFamily;\n\n    if (_reactNative.Platform.OS === 'android' && fontFile) {\n      fontReference = fontFile.replace(/\\.(otf|ttf)$/, '');\n    }\n\n    if (_reactNative.Platform.OS === 'windows' && fontFile) {\n      fontReference = \"Assets/\" + fontFile + \"#\" + fontFamily;\n    }\n\n    var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));\n\n    var Icon = function (_PureComponent) {\n      function Icon() {\n        var _getPrototypeOf2;\n\n        var _temp, _this;\n\n        _classCallCheck(this, Icon);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Icon)).call.apply(_getPrototypeOf2, [this].concat(args))), _this.root = null, _this.handleRef = function (ref) {\n          _this.root = ref;\n        }, _temp));\n      }\n\n      _createClass(Icon, [{\n        key: \"setNativeProps\",\n        value: function setNativeProps(nativeProps) {\n          if (this.root) {\n            this.root.setNativeProps(nativeProps);\n          }\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var _this$props = this.props,\n              name = _this$props.name,\n              size = _this$props.size,\n              color = _this$props.color,\n              style = _this$props.style,\n              props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\"]);\n\n          var glyph = name ? glyphMap[name] || '?' : '';\n\n          if (typeof glyph === 'number') {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          var styleDefaults = {\n            fontSize: size,\n            color: color\n          };\n          var styleOverrides = {\n            fontFamily: fontReference,\n            fontWeight: 'normal',\n            fontStyle: 'normal'\n          };\n          props.style = [styleDefaults, style, styleOverrides];\n          props.ref = this.handleRef;\n          return _react.default.createElement(_reactNative.Text, _extends({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            }\n          }), glyph, this.props.children);\n        }\n      }]);\n\n      _inherits(Icon, _PureComponent);\n\n      return Icon;\n    }(_react.PureComponent);\n\n    Icon.propTypes = {\n      name: IconNamePropType,\n      size: _propTypes.default.number,\n      color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n      children: _propTypes.default.node,\n      style: _propTypes.default.any\n    };\n    Icon.defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false\n    };\n    Icon = _wrapComponent(\"Icon\")(Icon);\n    var imageSourceCache = {};\n\n    function ensureNativeModuleAvailable() {\n      if (!NativeIconAPI) {\n        if (_reactNative.Platform.OS === 'android') {\n          throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');\n        }\n\n        throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');\n      }\n    }\n\n    function getImageSource(name) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n      ensureNativeModuleAvailable();\n      var glyph = glyphMap[name] || '?';\n\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      var processedColor = (0, _reactNative.processColor)(color);\n      var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n      var scale = _reactNative.PixelRatio.get();\n\n      return new Promise(function (resolve, reject) {\n        var cached = imageSourceCache[cacheKey];\n\n        if (typeof cached !== 'undefined') {\n          if (!cached || cached instanceof Error) {\n            reject(cached);\n          } else {\n            resolve({\n              uri: cached,\n              scale: scale\n            });\n          }\n        } else {\n          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {\n            var error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n\n            if (!error && image) {\n              resolve({\n                uri: image,\n                scale: scale\n              });\n            } else {\n              reject(error);\n            }\n          });\n        }\n      });\n    }\n\n    function loadFont() {\n      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n      if (_reactNative.Platform.OS === 'ios') {\n        ensureNativeModuleAvailable();\n\n        if (!file) {\n          return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n        }\n\n        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));\n      }\n\n      return Promise.resolve();\n    }\n\n    function hasIcon(name) {\n      return Object.prototype.hasOwnProperty.call(glyphMap, name);\n    }\n\n    Icon.Button = (0, _iconButton.default)(Icon);\n    Icon.TabBarItem = (0, _tabBarItemIos.default)(IconNamePropType, getImageSource);\n    Icon.TabBarItemIOS = Icon.TabBarItem;\n    Icon.ToolbarAndroid = (0, _toolbarAndroid.default)(IconNamePropType, getImageSource);\n    Icon.getImageSource = getImageSource;\n    Icon.loadFont = loadFont;\n    Icon.hasIcon = hasIcon;\n    return Icon;\n  }\n});","map":[[7,0,1,0],[11,0,2,0],[13,0,3,0],[15,0,11,0],[17,0,12,0],[19,0,13,0],[75,0,15,0],[75,6,15,6,"NativeIconAPI"],[75,22,16,2,"NativeModules"],[75,49,16,16,"RNVectorIconsManager"],[75,69,16,2],[75,73,16,40,"NativeModules"],[75,100,16,54,"RNVectorIconsModule"],[75,119,15,0],[76,0,18,0],[76,6,18,6,"DEFAULT_ICON_SIZE"],[76,26,18,26],[76,28,18,0],[77,0,19,0],[77,6,19,6,"DEFAULT_ICON_COLOR"],[77,27,19,27],[77,34,19,0],[79,0,21,15],[79,11,21,24,"createIconSet"],[79,24,21,15],[79,25,21,38,"glyphMap"],[79,33,21,15],[79,35,21,48,"fontFamily"],[79,45,21,15],[79,47,21,60,"fontFile"],[79,55,21,15],[79,57,21,70],[80,0,22,2],[80,8,22,6,"fontReference"],[80,24,22,22,"fontFamily"],[80,34,22,2],[82,0,24,2],[82,8,24,6,"Platform"],[82,30,24,15,"OS"],[82,32,24,6],[82,37,24,22],[82,46,24,6],[82,50,24,35,"fontFile"],[82,58,24,2],[82,60,24,45],[83,0,25,4,"fontReference"],[83,22,25,20,"fontFile"],[83,31,25,29,"replace"],[83,38,25,20],[83,39,25,37],[83,53,25,20],[83,55,25,53],[83,57,25,20],[83,58,25,4],[84,0,26,3],[86,0,28,2],[86,8,28,6,"Platform"],[86,30,28,15,"OS"],[86,32,28,6],[86,37,28,22],[86,46,28,6],[86,50,28,35,"fontFile"],[86,58,28,2],[86,60,28,45],[87,0,29,4,"fontReference"],[87,34,29,30,"fontFile"],[87,42,29,4],[87,51,29,42,"fontFamily"],[87,61,29,4],[88,0,30,3],[90,0,32,2],[90,8,32,8,"IconNamePropType"],[90,27,32,27,"PropTypes"],[90,46,32,37,"oneOf"],[90,51,32,27],[90,52,32,43,"Object"],[90,59,32,50,"keys"],[90,63,32,43],[90,64,32,55,"glyphMap"],[90,72,32,43],[90,73,32,27],[90,74,32,2],[92,0,21,70],[92,8,34,8,"Icon"],[92,12,21,70],[93,0,21,70],[94,0,21,70],[96,0,21,70],[98,0,21,70],[100,0,21,70],[101,0,21,70],[102,0,21,70],[104,0,21,70],[104,200,54,4,"root"],[104,204,21,70],[104,207,54,11],[104,211,21,70],[104,219,55,4,"handleRef"],[104,228,21,70],[104,231,55,16],[104,246,55,23],[105,0,56,6],[105,16,56,11,"root"],[105,20,56,6],[105,23,56,18,"ref"],[105,26,56,6],[106,0,57,5],[106,9,21,70],[107,0,21,70],[109,0,21,70],[110,0,21,70],[111,0,21,70],[111,39,48,19,"nativeProps"],[111,50,21,70],[111,52,48,32],[112,0,49,6],[112,14,49,10],[112,19,49,15,"root"],[112,23,49,6],[112,25,49,21],[113,0,50,8],[113,17,50,13,"root"],[113,21,50,8],[113,22,50,18,"setNativeProps"],[113,36,50,8],[113,37,50,33,"nativeProps"],[113,48,50,8],[114,0,51,7],[115,0,52,5],[116,0,21,70],[117,0,21,70],[118,0,21,70],[118,33,59,13],[119,0,59,13],[119,28,60,53],[119,33,60,58,"props"],[119,38,59,13],[120,0,59,13],[120,14,60,14,"name"],[120,18,59,13],[120,33,60,14,"name"],[120,37,59,13],[121,0,59,13],[121,14,60,20,"size"],[121,18,59,13],[121,33,60,20,"size"],[121,37,59,13],[122,0,59,13],[122,14,60,26,"color"],[122,19,59,13],[122,34,60,26,"color"],[122,39,59,13],[123,0,59,13],[123,14,60,33,"style"],[123,19,59,13],[123,34,60,33,"style"],[123,39,59,13],[124,0,59,13],[124,14,60,43,"props"],[124,19,59,13],[126,0,62,6],[126,14,62,10,"glyph"],[126,22,62,18,"name"],[126,29,62,25,"glyphMap"],[126,38,62,34,"name"],[126,42,62,25],[126,47,62,43],[126,50,62,18],[126,53,62,49],[126,55,62,6],[128,0,63,6],[128,14,63,10],[128,21,63,17,"glyph"],[128,26,63,10],[128,31,63,27],[128,39,63,6],[128,41,63,37],[129,0,64,8,"glyph"],[129,20,64,16,"String"],[129,27,64,23,"fromCharCode"],[129,39,64,16],[129,40,64,36,"glyph"],[129,45,64,16],[129,46,64,8],[130,0,65,7],[132,0,67,6],[132,14,67,12,"styleDefaults"],[132,30,67,28],[133,0,68,8,"fontSize"],[133,22,68,18,"size"],[133,26,67,28],[134,0,69,8,"color"],[135,0,67,28],[135,11,67,6],[136,0,72,6],[136,14,72,12,"styleOverrides"],[136,31,72,29],[137,0,73,8,"fontFamily"],[137,24,73,20,"fontReference"],[137,37,72,29],[138,0,74,8,"fontWeight"],[138,24,74,20],[138,32,72,29],[139,0,75,8,"fontStyle"],[139,23,75,19],[140,0,72,29],[140,11,72,6],[141,0,78,6,"props"],[141,16,78,12,"style"],[141,21,78,6],[141,24,78,20],[141,25,78,21,"styleDefaults"],[141,38,78,20],[141,40,78,36,"style"],[141,45,78,20],[141,47,78,43,"styleOverrides"],[141,61,78,20],[141,62,78,6],[142,0,79,6,"props"],[142,16,79,12,"ref"],[142,19,79,6],[142,22,79,18],[142,27,79,23,"handleRef"],[142,36,79,6],[143,0,81,6],[143,17,82,8],[143,46,82,9],[143,63,82,8],[143,78,82,18,"props"],[143,83,82,8],[144,0,82,8],[145,0,82,8],[146,0,82,8],[147,0,82,8],[148,0,82,8],[148,14,83,11,"glyph"],[148,19,82,8],[148,21,84,11],[148,26,84,16,"props"],[148,31,84,11],[148,32,84,22,"children"],[148,40,82,8],[148,41,81,6],[149,0,87,5],[150,0,21,70],[152,0,21,70],[154,0,21,70],[155,0,21,70],[155,6,34,21,"PureComponent"],[155,26,21,70],[157,0,34,8,"Icon"],[157,8,21,70],[157,9,35,11,"propTypes"],[157,18,21,70],[157,21,35,23],[158,0,36,6,"name"],[158,12,36,12,"IconNamePropType"],[158,28,35,23],[159,0,37,6,"size"],[159,12,37,12,"PropTypes"],[159,31,37,22,"number"],[159,37,35,23],[160,0,38,6,"color"],[160,13,38,13,"PropTypes"],[160,32,38,23,"oneOfType"],[160,41,38,13],[160,42,38,33],[160,43,38,34,"PropTypes"],[160,62,38,44,"string"],[160,68,38,33],[160,70,38,52,"PropTypes"],[160,89,38,62,"number"],[160,95,38,33],[160,96,38,13],[160,97,35,23],[161,0,39,6,"children"],[161,16,39,16,"PropTypes"],[161,35,39,26,"node"],[161,39,35,23],[162,0,40,6,"style"],[162,13,40,13,"PropTypes"],[162,32,40,23,"any"],[163,0,35,23],[163,5,21,70],[164,0,34,8,"Icon"],[164,8,21,70],[164,9,43,11,"defaultProps"],[164,21,21,70],[164,24,43,26],[165,0,44,6,"size"],[165,12,44,12,"DEFAULT_ICON_SIZE"],[165,29,43,26],[166,0,45,6,"allowFontScaling"],[166,24,45,24],[167,0,43,26],[167,5,21,70],[168,0,21,70],[169,0,90,2],[169,8,90,8,"imageSourceCache"],[169,27,90,27],[169,29,90,2],[171,0,92,2],[171,13,92,11,"ensureNativeModuleAvailable"],[171,40,92,2],[171,43,92,41],[172,0,93,4],[172,10,93,8],[172,11,93,9,"NativeIconAPI"],[172,24,93,4],[172,26,93,24],[173,0,94,6],[173,12,94,10,"Platform"],[173,34,94,19,"OS"],[173,36,94,10],[173,41,94,26],[173,50,94,6],[173,52,94,37],[174,0,95,8],[174,16,95,14],[174,20,95,18,"Error"],[174,25,95,14],[174,26,96,10],[174,176,95,14],[174,177,95,8],[175,0,98,7],[177,0,99,6],[177,14,99,12],[177,18,99,16,"Error"],[177,23,99,12],[177,24,100,8],[177,210,99,12],[177,211,99,6],[178,0,102,5],[179,0,103,3],[181,0,105,2],[181,13,105,11,"getImageSource"],[181,27,105,2],[181,28,106,4,"name"],[181,32,105,2],[181,34,109,4],[182,0,109,4],[182,10,107,4,"size"],[182,14,109,4],[182,85,107,11,"DEFAULT_ICON_SIZE"],[182,102,109,4],[183,0,109,4],[183,10,108,4,"color"],[183,15,109,4],[183,86,108,12,"DEFAULT_ICON_COLOR"],[183,104,109,4],[184,0,110,4,"ensureNativeModuleAvailable"],[185,0,112,4],[185,10,112,8,"glyph"],[185,18,112,16,"glyphMap"],[185,27,112,25,"name"],[185,31,112,16],[185,36,112,34],[185,39,112,4],[187,0,113,4],[187,10,113,8],[187,17,113,15,"glyph"],[187,22,113,8],[187,27,113,25],[187,35,113,4],[187,37,113,35],[188,0,114,6,"glyph"],[188,16,114,14,"String"],[188,23,114,21,"fromCharCode"],[188,35,114,14],[188,36,114,34,"glyph"],[188,41,114,14],[188,42,114,6],[189,0,115,5],[191,0,117,4],[191,10,117,10,"processedColor"],[191,27,117,27],[191,58,117,40,"color"],[191,63,117,27],[191,64,117,4],[192,0,118,4],[192,10,118,10,"cacheKey"],[192,21,118,24,"glyph"],[192,26,118,10],[192,35,118,33,"size"],[192,39,118,10],[192,48,118,41,"processedColor"],[192,62,118,4],[194,0,119,4],[194,10,119,10,"scale"],[194,18,119,18,"PixelRatio"],[194,42,119,29,"get"],[194,45,119,18],[194,47,119,4],[196,0,121,4],[196,13,121,11],[196,17,121,15,"Promise"],[196,24,121,11],[196,25,121,23],[196,35,121,24,"resolve"],[196,42,121,23],[196,44,121,33,"reject"],[196,50,121,23],[196,52,121,44],[197,0,122,6],[197,12,122,12,"cached"],[197,21,122,21,"imageSourceCache"],[197,38,122,38,"cacheKey"],[197,46,122,21],[197,47,122,6],[199,0,123,6],[199,12,123,10],[199,19,123,17,"cached"],[199,25,123,10],[199,30,123,28],[199,41,123,6],[199,43,123,41],[200,0,124,8],[200,14,124,12],[200,15,124,13,"cached"],[200,21,124,12],[200,25,124,23,"cached"],[200,43,124,41,"Error"],[200,48,124,8],[200,50,124,48],[201,0,125,10,"reject"],[201,19,125,17,"cached"],[201,25,125,10],[202,0,126,9],[202,11,124,8],[202,17,126,15],[203,0,127,10,"resolve"],[203,20,127,18],[204,0,127,20,"uri"],[204,19,127,25,"cached"],[204,25,127,18],[205,0,127,33,"scale"],[206,0,127,18],[206,13,127,10],[207,0,128,9],[208,0,129,7],[208,9,123,6],[208,15,129,13],[209,0,130,8,"NativeIconAPI"],[209,24,130,22,"getImageForFont"],[209,39,130,8],[209,40,131,10,"fontReference"],[209,53,130,8],[209,55,132,10,"glyph"],[209,60,130,8],[209,62,133,10,"size"],[209,66,130,8],[209,68,134,10,"processedColor"],[209,82,130,8],[209,84,135,10],[209,94,135,11,"err"],[209,97,135,10],[209,99,135,16,"image"],[209,104,135,10],[209,106,135,26],[210,0,136,12],[210,16,136,18,"error"],[210,24,136,26],[210,31,136,33,"err"],[210,34,136,26],[210,39,136,41],[210,47,136,26],[210,50,136,52],[210,54,136,56,"Error"],[210,59,136,52],[210,60,136,62,"err"],[210,63,136,52],[210,64,136,26],[210,67,136,69,"err"],[210,70,136,12],[211,0,137,12,"imageSourceCache"],[211,29,137,29,"cacheKey"],[211,37,137,12],[211,41,137,41,"image"],[211,50,137,50,"error"],[211,55,137,41],[211,59,137,59],[211,64,137,12],[213,0,138,12],[213,16,138,16],[213,17,138,17,"error"],[213,22,138,16],[213,26,138,26,"image"],[213,31,138,12],[213,33,138,33],[214,0,139,14,"resolve"],[214,22,139,22],[215,0,139,24,"uri"],[215,21,139,29,"image"],[215,26,139,22],[216,0,139,36,"scale"],[217,0,139,22],[217,15,139,14],[218,0,140,13],[218,13,138,12],[218,19,140,19],[219,0,141,14,"reject"],[219,21,141,21,"error"],[219,26,141,14],[220,0,142,13],[221,0,143,11],[221,11,130,8],[222,0,145,7],[223,0,146,5],[223,7,121,11],[223,8,121,4],[224,0,147,3],[226,0,149,2],[226,13,149,11,"loadFont"],[226,21,149,2],[226,24,149,37],[227,0,149,37],[227,10,149,20,"file"],[227,14,149,37],[227,85,149,27,"fontFile"],[227,93,149,37],[229,0,150,4],[229,10,150,8,"Platform"],[229,32,150,17,"OS"],[229,34,150,8],[229,39,150,24],[229,44,150,4],[229,46,150,31],[230,0,151,6,"ensureNativeModuleAvailable"],[232,0,152,6],[232,12,152,10],[232,13,152,11,"file"],[232,17,152,6],[232,19,152,17],[233,0,153,8],[233,17,153,15,"Promise"],[233,25,153,23,"reject"],[233,31,153,15],[233,32,154,10],[233,36,154,14,"Error"],[233,41,154,10],[233,42,154,20],[233,96,154,10],[233,97,153,15],[233,98,153,8],[234,0,156,7],[236,0,157,6],[236,15,157,13,"NativeIconAPI"],[236,29,157,27,"loadFontWithFileName"],[236,49,157,13],[236,90,157,51,"file"],[236,95,157,56,"split"],[236,100,157,51],[236,101,157,62],[236,104,157,51],[236,105,157,13],[236,107,157,6],[237,0,158,5],[239,0,159,4],[239,13,159,11,"Promise"],[239,21,159,19,"resolve"],[239,28,159,11],[239,30,159,4],[240,0,160,3],[242,0,162,2],[242,13,162,11,"hasIcon"],[242,20,162,2],[242,21,162,19,"name"],[242,25,162,2],[242,27,162,25],[243,0,163,4],[243,13,163,11,"Object"],[243,20,163,18,"prototype"],[243,29,163,11],[243,30,163,28,"hasOwnProperty"],[243,44,163,11],[243,45,163,43,"call"],[243,49,163,11],[243,50,163,48,"glyphMap"],[243,58,163,11],[243,60,163,58,"name"],[243,64,163,11],[243,65,163,4],[244,0,164,3],[246,0,166,2,"Icon"],[246,9,166,7,"Button"],[246,15,166,2],[246,18,166,16],[246,43,166,42,"Icon"],[246,47,166,16],[246,48,166,2],[247,0,167,2,"Icon"],[247,9,167,7,"TabBarItem"],[247,19,167,2],[247,22,167,20],[247,50,168,4,"IconNamePropType"],[247,66,167,20],[247,68,169,4,"getImageSource"],[247,82,167,20],[247,83,167,2],[248,0,171,2,"Icon"],[248,9,171,7,"TabBarItemIOS"],[248,22,171,2],[248,25,171,23,"Icon"],[248,30,171,28,"TabBarItem"],[248,40,171,2],[249,0,172,2,"Icon"],[249,9,172,7,"ToolbarAndroid"],[249,23,172,2],[249,26,172,24],[249,55,173,4,"IconNamePropType"],[249,71,172,24],[249,73,174,4,"getImageSource"],[249,87,172,24],[249,88,172,2],[250,0,176,2,"Icon"],[250,9,176,7,"getImageSource"],[250,23,176,2],[250,26,176,24,"getImageSource"],[250,40,176,2],[251,0,177,2,"Icon"],[251,9,177,7,"loadFont"],[251,17,177,2],[251,20,177,18,"loadFont"],[251,28,177,2],[252,0,178,2,"Icon"],[252,9,178,7,"hasIcon"],[252,16,178,2],[252,19,178,17,"hasIcon"],[252,26,178,2],[253,0,180,2],[253,11,180,9,"Icon"],[253,15,180,2],[254,0,181,1]]},"type":"js/module"}]}