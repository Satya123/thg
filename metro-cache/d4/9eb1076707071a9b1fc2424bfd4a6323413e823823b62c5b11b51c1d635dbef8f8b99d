{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var TextExtraction = function () {\n    function TextExtraction(text, patterns) {\n      _classCallCheck(this, TextExtraction);\n\n      this.text = text;\n      this.patterns = patterns || [];\n    }\n\n    _createClass(TextExtraction, [{\n      key: \"parse\",\n      value: function parse() {\n        var _this = this;\n\n        var parsedTexts = [{\n          children: this.text\n        }];\n        this.patterns.forEach(function (pattern) {\n          var newParts = [];\n          parsedTexts.forEach(function (parsedText) {\n            if (parsedText._matched) {\n              newParts.push(parsedText);\n              return;\n            }\n\n            var parts = [];\n            var textLeft = parsedText.children;\n\n            while (textLeft) {\n              var matches = pattern.pattern.exec(textLeft);\n\n              if (!matches) {\n                break;\n              }\n\n              var previousText = textLeft.substr(0, matches.index);\n              parts.push({\n                children: previousText\n              });\n              parts.push(_this.getMatchedPart(pattern, matches[0], matches));\n              textLeft = textLeft.substr(matches.index + matches[0].length);\n            }\n\n            parts.push({\n              children: textLeft\n            });\n            newParts.push.apply(newParts, parts);\n          });\n          parsedTexts = newParts;\n        });\n        parsedTexts.forEach(function (parsedText) {\n          return delete parsedText._matched;\n        });\n        return parsedTexts.filter(function (t) {\n          return !!t.children;\n        });\n      }\n    }, {\n      key: \"getMatchedPart\",\n      value: function getMatchedPart(matchedPattern, text, matches) {\n        var props = {};\n        Object.keys(matchedPattern).forEach(function (key) {\n          if (key === 'pattern' || key === 'renderText') {\n            return;\n          }\n\n          if (typeof matchedPattern[key] === 'function') {\n            props[key] = function () {\n              return matchedPattern[key](text);\n            };\n          } else {\n            props[key] = matchedPattern[key];\n          }\n        });\n        var children = text;\n\n        if (matchedPattern.renderText && typeof matchedPattern.renderText === 'function') {\n          children = matchedPattern.renderText(text, matches);\n        }\n\n        return _objectSpread({}, props, {\n          children: children,\n          _matched: true\n        });\n      }\n    }]);\n\n    return TextExtraction;\n  }();\n\n  var _default = TextExtraction;\n  exports.default = _default;\n});","map":[[17,6,1,6,"TextExtraction"],[17,20],[18,0,8,2],[18,28,8,14,"text"],[18,32,8,2],[18,34,8,20,"patterns"],[18,42,8,2],[18,44,8,30],[19,0,8,30],[21,0,9,4],[21,11,9,9,"text"],[21,15,9,4],[21,18,9,20,"text"],[21,22,9,4],[22,0,10,4],[22,11,10,9,"patterns"],[22,19,10,4],[22,22,10,20,"patterns"],[22,34,10,32],[22,36,10,4],[23,0,11,3],[27,30,17,10],[28,0,17,10],[30,0,18,4],[30,12,18,8,"parsedTexts"],[30,26,18,22],[30,27,18,23],[31,0,18,24,"children"],[31,20,18,34],[31,25,18,39,"text"],[32,0,18,23],[32,9,18,22],[32,10,18,4],[33,0,19,4],[33,13,19,9,"patterns"],[33,21,19,4],[33,22,19,18,"forEach"],[33,29,19,4],[33,30,19,26],[33,40,19,27,"pattern"],[33,47,19,26],[33,49,19,39],[34,0,20,6],[34,14,20,10,"newParts"],[34,25,20,21],[34,27,20,6],[35,0,22,6,"parsedTexts"],[35,22,22,18,"forEach"],[35,29,22,6],[35,30,22,26],[35,40,22,27,"parsedText"],[35,50,22,26],[35,52,22,42],[36,0,24,8],[36,16,24,12,"parsedText"],[36,27,24,23,"_matched"],[36,35,24,8],[36,37,24,33],[37,0,25,10,"newParts"],[37,23,25,19,"push"],[37,27,25,10],[37,28,25,24,"parsedText"],[37,38,25,10],[38,0,27,10],[39,0,28,9],[41,0,30,8],[41,16,30,12,"parts"],[41,24,30,23],[41,26,30,8],[42,0,31,8],[42,16,31,12,"textLeft"],[42,27,31,23,"parsedText"],[42,38,31,34,"children"],[42,46,31,8],[44,0,33,8],[44,19,33,15,"textLeft"],[44,27,33,8],[44,29,33,25],[45,0,34,10],[45,18,34,14,"matches"],[45,28,34,24,"pattern"],[45,36,34,32,"pattern"],[45,43,34,24],[45,44,34,40,"exec"],[45,48,34,24],[45,49,34,45,"textLeft"],[45,57,34,24],[45,58,34,10],[47,0,36,10],[47,18,36,14],[47,19,36,15,"matches"],[47,26,36,10],[47,28,36,24],[48,0,36,26],[49,0,36,34],[51,0,38,10],[51,18,38,14,"previousText"],[51,33,38,29,"textLeft"],[51,42,38,38,"substr"],[51,48,38,29],[51,49,38,45],[51,50,38,29],[51,52,38,48,"matches"],[51,60,38,56,"index"],[51,65,38,29],[51,66,38,10],[52,0,40,10,"parts"],[52,20,40,16,"push"],[52,24,40,10],[52,25,40,21],[53,0,40,22,"children"],[53,26,40,32,"previousText"],[54,0,40,21],[54,15,40,10],[55,0,42,10,"parts"],[55,20,42,16,"push"],[55,24,42,10],[55,25,42,21],[55,31,42,26,"getMatchedPart"],[55,45,42,21],[55,46,42,41,"pattern"],[55,53,42,21],[55,55,42,50,"matches"],[55,63,42,58],[55,64,42,50],[55,65,42,21],[55,67,42,62,"matches"],[55,74,42,21],[55,75,42,10],[56,0,44,10,"textLeft"],[56,25,44,21,"textLeft"],[56,34,44,30,"substr"],[56,40,44,21],[56,41,44,37,"matches"],[56,49,44,45,"index"],[56,54,44,37],[56,57,44,53,"matches"],[56,65,44,61],[56,66,44,53],[56,68,44,64,"length"],[56,74,44,21],[56,75,44,10],[57,0,45,9],[59,0,47,8,"parts"],[59,18,47,14,"push"],[59,22,47,8],[59,23,47,19],[60,0,47,20,"children"],[60,24,47,30,"textLeft"],[61,0,47,19],[61,13,47,8],[62,0,49,8,"newParts"],[62,21,49,17,"push"],[62,25,49,8],[62,42,49,25,"parts"],[62,47,49,8],[63,0,50,7],[63,11,22,6],[64,0,52,6,"parsedTexts"],[64,24,52,20,"newParts"],[64,32,52,6],[65,0,53,5],[65,9,19,4],[66,0,56,4,"parsedTexts"],[66,20,56,16,"forEach"],[66,27,56,4],[66,28,56,24],[66,38,56,25,"parsedText"],[66,48,56,24],[67,0,56,24],[67,17,56,40],[67,24,56,47,"parsedText"],[67,35,56,58,"_matched"],[67,43,56,24],[68,0,56,24],[68,9,56,4],[69,0,58,4],[69,15,58,11,"parsedTexts"],[69,27,58,23,"filter"],[69,33,58,11],[69,34,58,30],[70,0,58,30],[70,17,58,35],[70,18,58,36],[70,19,58,37,"t"],[70,21,58,39,"children"],[70,29,58,30],[71,0,58,30],[71,9,58,11],[71,10,58,4],[72,0,59,3],[75,37,70,17,"matchedPattern"],[75,51],[75,53,70,33,"text"],[75,57],[75,59,70,39,"matches"],[75,66],[75,68,70,48],[76,0,71,4],[76,12,71,8,"props"],[76,20,71,16],[76,22,71,4],[77,0,73,4,"Object"],[77,15,73,11,"keys"],[77,19,73,4],[77,20,73,16,"matchedPattern"],[77,34,73,4],[77,36,73,32,"forEach"],[77,43,73,4],[77,44,73,40],[77,54,73,41,"key"],[77,57,73,40],[77,59,73,49],[78,0,74,6],[78,14,74,10,"key"],[78,22,74,18],[78,31,74,10],[78,35,74,31,"key"],[78,43,74,39],[78,55,74,6],[78,57,74,53],[79,0,74,55],[80,0,74,64],[82,0,76,6],[82,14,76,10],[82,21,76,17,"matchedPattern"],[82,36,76,32,"key"],[82,39,76,17],[82,40,76,10],[82,45,76,41],[82,55,76,6],[82,57,76,53],[83,0,77,8,"props"],[83,18,77,14,"key"],[83,21,77,8],[83,25,77,21],[84,0,77,21],[84,21,77,27,"matchedPattern"],[84,36,77,42,"key"],[84,39,77,27],[84,41,77,47,"text"],[84,45,77,27],[84,46,77,21],[85,0,77,21],[85,13,77,8],[86,0,78,7],[86,11,76,6],[86,17,78,13],[87,0,79,8,"props"],[87,18,79,14,"key"],[87,21,79,8],[87,25,79,21,"matchedPattern"],[87,40,79,36,"key"],[87,43,79,21],[87,44,79,8],[88,0,80,7],[89,0,81,5],[89,9,73,4],[90,0,83,4],[90,12,83,8,"children"],[90,23,83,19,"text"],[90,27,83,4],[92,0,84,4],[92,12,84,8,"matchedPattern"],[92,27,84,23,"renderText"],[92,37,84,8],[92,41,84,37],[92,48,84,44,"matchedPattern"],[92,63,84,59,"renderText"],[92,73,84,37],[92,78,84,74],[92,88,84,4],[92,90,84,86],[93,0,85,6,"children"],[93,21,85,17,"matchedPattern"],[93,36,85,32,"renderText"],[93,46,85,17],[93,47,85,43,"text"],[93,51,85,17],[93,53,85,49,"matches"],[93,60,85,17],[93,61,85,6],[94,0,86,5],[96,0,88,4],[96,33,89,9,"props"],[96,38,88,4],[97,0,90,6,"children"],[97,20,90,16,"children"],[97,28,88,4],[98,0,91,6,"_matched"],[98,20,91,16],[99,0,88,4],[100,0,93,3],[106,17,96,15,"TextExtraction"],[106,31]]},"type":"js/module"}]}