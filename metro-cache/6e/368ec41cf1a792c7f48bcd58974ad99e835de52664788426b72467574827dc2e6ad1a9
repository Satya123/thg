{"dependencies":[{"name":"domelementtype","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var isTag = _$$_REQUIRE(_dependencyMap[0], \"domelementtype\").isTag;\n\n  module.exports = {\n    filter: filter,\n    find: find,\n    findOneChild: findOneChild,\n    findOne: findOne,\n    existsOne: existsOne,\n    findAll: findAll\n  };\n\n  function filter(test, element, recurse, limit) {\n    if (!Array.isArray(element)) element = [element];\n\n    if (typeof limit !== \"number\" || !isFinite(limit)) {\n      limit = Infinity;\n    }\n\n    return find(test, element, recurse !== false, limit);\n  }\n\n  function find(test, elems, recurse, limit) {\n    var result = [],\n        childs;\n\n    for (var i = 0, j = elems.length; i < j; i++) {\n      if (test(elems[i])) {\n        result.push(elems[i]);\n        if (--limit <= 0) break;\n      }\n\n      childs = elems[i].children;\n\n      if (recurse && childs && childs.length > 0) {\n        childs = find(test, childs, recurse, limit);\n        result = result.concat(childs);\n        limit -= childs.length;\n        if (limit <= 0) break;\n      }\n    }\n\n    return result;\n  }\n\n  function findOneChild(test, elems) {\n    for (var i = 0, l = elems.length; i < l; i++) {\n      if (test(elems[i])) return elems[i];\n    }\n\n    return null;\n  }\n\n  function findOne(test, elems) {\n    var elem = null;\n\n    for (var i = 0, l = elems.length; i < l && !elem; i++) {\n      if (!isTag(elems[i])) {\n        continue;\n      } else if (test(elems[i])) {\n        elem = elems[i];\n      } else if (elems[i].children.length > 0) {\n        elem = findOne(test, elems[i].children);\n      }\n    }\n\n    return elem;\n  }\n\n  function existsOne(test, elems) {\n    for (var i = 0, l = elems.length; i < l; i++) {\n      if (isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function findAll(test, rootElems) {\n    var result = [];\n    var stack = rootElems.slice();\n\n    while (stack.length) {\n      var elem = stack.shift();\n      if (!isTag(elem)) continue;\n\n      if (elem.children && elem.children.length > 0) {\n        stack.unshift.apply(stack, elem.children);\n      }\n\n      if (test(elem)) result.push(elem);\n    }\n\n    return result;\n  }\n});","map":[[2,0,1,0],[2,6,1,4,"isTag"],[2,14,1,12,"require"],[2,45,1,20],[2,61,1,12],[2,63,1,38,"isTag"],[2,68,1,0],[4,0,3,0,"module"],[4,9,3,7,"exports"],[4,16,3,0],[4,19,3,17],[5,0,4,1,"filter"],[5,12,4,9,"filter"],[5,18,3,17],[6,0,5,1,"find"],[6,10,5,7,"find"],[6,14,3,17],[7,0,6,1,"findOneChild"],[7,18,6,15,"findOneChild"],[7,30,3,17],[8,0,7,1,"findOne"],[8,13,7,10,"findOne"],[8,20,3,17],[9,0,8,1,"existsOne"],[9,15,8,12,"existsOne"],[9,24,3,17],[10,0,9,1,"findAll"],[10,13,9,10,"findAll"],[11,0,3,17],[11,3,3,0],[13,0,12,0],[13,11,12,9,"filter"],[13,17,12,0],[13,18,12,16,"test"],[13,22,12,0],[13,24,12,22,"element"],[13,31,12,0],[13,33,12,31,"recurse"],[13,40,12,0],[13,42,12,40,"limit"],[13,47,12,0],[13,49,12,46],[14,0,13,1],[14,8,13,4],[14,9,13,5,"Array"],[14,15,13,11,"isArray"],[14,22,13,5],[14,23,13,19,"element"],[14,30,13,5],[14,31,13,1],[14,33,13,29,"element"],[14,43,13,39],[14,44,13,40,"element"],[14,51,13,39],[14,52,13,29],[16,0,15,1],[16,8,15,4],[16,15,15,11,"limit"],[16,20,15,4],[16,25,15,21],[16,33,15,4],[16,37,15,33],[16,38,15,34,"isFinite"],[16,47,15,43,"limit"],[16,52,15,34],[16,53,15,1],[16,55,15,50],[17,0,16,2,"limit"],[17,14,16,10,"Infinity"],[17,22,16,2],[18,0,17,2],[20,0,18,1],[20,11,18,8,"find"],[20,16,18,13,"test"],[20,20,18,8],[20,22,18,19,"element"],[20,29,18,8],[20,31,18,28,"recurse"],[20,43,18,40],[20,48,18,8],[20,50,18,47,"limit"],[20,55,18,8],[20,56,18,1],[21,0,19,1],[23,0,21,0],[23,11,21,9,"find"],[23,15,21,0],[23,16,21,14,"test"],[23,20,21,0],[23,22,21,20,"elems"],[23,27,21,0],[23,29,21,27,"recurse"],[23,36,21,0],[23,38,21,36,"limit"],[23,43,21,0],[23,45,21,42],[24,0,22,1],[24,8,22,5,"result"],[24,17,22,14],[24,19,22,1],[25,0,22,1],[25,8,22,18,"childs"],[25,14,22,1],[27,0,24,1],[27,9,24,5],[27,13,24,9,"i"],[27,17,24,13],[27,18,24,5],[27,20,24,16,"j"],[27,24,24,20,"elems"],[27,30,24,26,"length"],[27,36,24,1],[27,38,24,34,"i"],[27,42,24,38,"j"],[27,43,24,1],[27,45,24,41,"i"],[27,48,24,1],[27,50,24,45],[28,0,25,2],[28,10,25,5,"test"],[28,15,25,10,"elems"],[28,21,25,16,"i"],[28,22,25,10],[28,23,25,5],[28,24,25,2],[28,26,25,20],[29,0,26,3,"result"],[29,15,26,10,"push"],[29,19,26,3],[29,20,26,15,"elems"],[29,26,26,21,"i"],[29,27,26,15],[29,28,26,3],[30,0,27,3],[30,12,27,6],[30,14,27,8,"limit"],[30,19,27,6],[30,23,27,17],[30,24,27,3],[30,26,27,20],[31,0,28,3],[33,0,30,2,"childs"],[33,15,30,11,"elems"],[33,21,30,17,"i"],[33,22,30,11],[33,24,30,20,"children"],[33,32,30,2],[35,0,31,2],[35,10,31,5,"recurse"],[35,21,31,16,"childs"],[35,27,31,5],[35,31,31,26,"childs"],[35,38,31,33,"length"],[35,44,31,26],[35,47,31,42],[35,48,31,2],[35,50,31,44],[36,0,32,3,"childs"],[36,17,32,12,"find"],[36,22,32,17,"test"],[36,26,32,12],[36,28,32,23,"childs"],[36,34,32,12],[36,36,32,31,"recurse"],[36,43,32,12],[36,45,32,40,"limit"],[36,50,32,12],[36,51,32,3],[37,0,33,3,"result"],[37,17,33,12,"result"],[37,24,33,19,"concat"],[37,30,33,12],[37,31,33,26,"childs"],[37,37,33,12],[37,38,33,3],[38,0,34,3,"limit"],[38,17,34,12,"childs"],[38,24,34,19,"length"],[38,30,34,3],[39,0,35,3],[39,12,35,6,"limit"],[39,21,35,15],[39,22,35,3],[39,24,35,18],[40,0,36,3],[41,0,37,2],[43,0,39,1],[43,11,39,8,"result"],[43,17,39,1],[44,0,40,1],[46,0,42,0],[46,11,42,9,"findOneChild"],[46,23,42,0],[46,24,42,22,"test"],[46,28,42,0],[46,30,42,28,"elems"],[46,35,42,0],[46,37,42,34],[47,0,43,1],[47,9,43,5],[47,13,43,9,"i"],[47,17,43,13],[47,18,43,5],[47,20,43,16,"l"],[47,24,43,20,"elems"],[47,30,43,26,"length"],[47,36,43,1],[47,38,43,34,"i"],[47,42,43,38,"l"],[47,43,43,1],[47,45,43,41,"i"],[47,48,43,1],[47,50,43,45],[48,0,44,2],[48,10,44,5,"test"],[48,15,44,10,"elems"],[48,21,44,16,"i"],[48,22,44,10],[48,23,44,5],[48,24,44,2],[48,26,44,21],[48,33,44,28,"elems"],[48,39,44,34,"i"],[48,40,44,28],[48,41,44,21],[49,0,45,2],[51,0,47,1],[51,11,47,8],[51,15,47,1],[52,0,48,1],[54,0,50,0],[54,11,50,9,"findOne"],[54,18,50,0],[54,19,50,17,"test"],[54,23,50,0],[54,25,50,23,"elems"],[54,30,50,0],[54,32,50,29],[55,0,51,1],[55,8,51,5,"elem"],[55,15,51,12],[55,19,51,1],[57,0,53,1],[57,9,53,5],[57,13,53,9,"i"],[57,17,53,13],[57,18,53,5],[57,20,53,16,"l"],[57,24,53,20,"elems"],[57,30,53,26,"length"],[57,36,53,1],[57,38,53,34,"i"],[57,42,53,38,"l"],[57,43,53,34],[57,47,53,43],[57,48,53,44,"elem"],[57,52,53,1],[57,54,53,50,"i"],[57,57,53,1],[57,59,53,54],[58,0,54,2],[58,10,54,5],[58,11,54,6,"isTag"],[58,17,54,12,"elems"],[58,23,54,18,"i"],[58,24,54,12],[58,25,54,6],[58,26,54,2],[58,28,54,22],[59,0,55,3],[60,0,56,3],[60,7,54,2],[60,13,56,9],[60,17,56,12,"test"],[60,22,56,17,"elems"],[60,28,56,23,"i"],[60,29,56,17],[60,30,56,12],[60,31,56,9],[60,33,56,27],[61,0,57,3,"elem"],[61,15,57,10,"elems"],[61,21,57,16,"i"],[61,22,57,10],[61,23,57,3],[62,0,58,3],[62,7,56,9],[62,13,58,9],[62,17,58,12,"elems"],[62,23,58,18,"i"],[62,24,58,12],[62,26,58,21,"children"],[62,34,58,12],[62,35,58,30,"length"],[62,41,58,12],[62,44,58,39],[62,45,58,9],[62,47,58,41],[63,0,59,3,"elem"],[63,15,59,10,"findOne"],[63,23,59,18,"test"],[63,27,59,10],[63,29,59,24,"elems"],[63,35,59,30,"i"],[63,36,59,24],[63,38,59,33,"children"],[63,46,59,10],[63,47,59,3],[64,0,60,3],[65,0,61,2],[67,0,63,1],[67,11,63,8,"elem"],[67,15,63,1],[68,0,64,1],[70,0,66,0],[70,11,66,9,"existsOne"],[70,20,66,0],[70,21,66,19,"test"],[70,25,66,0],[70,27,66,25,"elems"],[70,32,66,0],[70,34,66,31],[71,0,67,1],[71,9,67,5],[71,13,67,9,"i"],[71,17,67,13],[71,18,67,5],[71,20,67,16,"l"],[71,24,67,20,"elems"],[71,30,67,26,"length"],[71,36,67,1],[71,38,67,34,"i"],[71,42,67,38,"l"],[71,43,67,1],[71,45,67,41,"i"],[71,48,67,1],[71,50,67,45],[72,0,68,2],[72,10,69,3,"isTag"],[72,16,69,9,"elems"],[72,22,69,15,"i"],[72,23,69,9],[72,24,69,3],[72,30,70,4,"test"],[72,35,70,9,"elems"],[72,41,70,15,"i"],[72,42,70,9],[72,43,70,4],[72,48,71,5,"elems"],[72,54,71,11,"i"],[72,55,71,5],[72,57,71,14,"children"],[72,65,71,5],[72,66,71,23,"length"],[72,72,71,5],[72,75,71,32],[72,76,71,5],[72,80,72,5,"existsOne"],[72,90,72,15,"test"],[72,94,72,5],[72,96,72,21,"elems"],[72,102,72,27,"i"],[72,103,72,21],[72,105,72,30,"children"],[72,113,72,5],[72,114,69,3],[72,115,68,2],[72,117,75,3],[73,0,76,3],[73,15,76,10],[73,19,76,3],[74,0,77,3],[75,0,78,2],[77,0,80,1],[77,11,80,8],[77,16,80,1],[78,0,81,1],[80,0,83,0],[80,11,83,9,"findAll"],[80,18,83,0],[80,19,83,17,"test"],[80,23,83,0],[80,25,83,23,"rootElems"],[80,34,83,0],[80,36,83,33],[81,0,84,1],[81,8,84,5,"result"],[81,17,84,14],[81,19,84,1],[82,0,85,1],[82,8,85,5,"stack"],[82,16,85,13,"rootElems"],[82,26,85,23,"slice"],[82,31,85,13],[82,33,85,1],[84,0,86,1],[84,11,86,7,"stack"],[84,17,86,13,"length"],[84,23,86,1],[84,25,86,20],[85,0,87,2],[85,10,87,6,"elem"],[85,17,87,13,"stack"],[85,23,87,19,"shift"],[85,28,87,13],[85,30,87,2],[86,0,88,2],[86,10,88,5],[86,11,88,6,"isTag"],[86,17,88,12,"elem"],[86,21,88,6],[86,22,88,2],[86,24,88,19],[88,0,89,2],[88,10,89,6,"elem"],[88,15,89,11,"children"],[88,23,89,6],[88,27,89,23,"elem"],[88,32,89,28,"children"],[88,40,89,23],[88,41,89,37,"length"],[88,47,89,23],[88,50,89,46],[88,51,89,2],[88,53,89,49],[89,0,90,3,"stack"],[89,14,90,9,"unshift"],[89,21,90,3],[89,22,90,17,"apply"],[89,27,90,3],[89,28,90,23,"stack"],[89,33,90,3],[89,35,90,30,"elem"],[89,40,90,35,"children"],[89,48,90,3],[90,0,91,3],[92,0,92,2],[92,10,92,5,"test"],[92,15,92,10,"elem"],[92,19,92,5],[92,20,92,2],[92,22,92,17,"result"],[92,29,92,24,"push"],[92,33,92,17],[92,34,92,29,"elem"],[92,38,92,17],[93,0,93,2],[95,0,94,1],[95,11,94,8,"result"],[95,17,94,1],[96,0,95,1]]},"type":"js/module"}]}