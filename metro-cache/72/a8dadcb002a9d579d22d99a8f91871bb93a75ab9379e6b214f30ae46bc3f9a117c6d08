{"dependencies":[{"name":"../index.js","isAsync":false},{"name":"../fs.js","isAsync":false},{"name":"../utils/uuid","isAsync":false},{"name":"../utils/log.js","isAsync":false},{"name":"./EventTarget","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"../index.js\"));\n\n  var _fs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../fs.js\"));\n\n  var _uuid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"../utils/uuid\"));\n\n  var _log = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../utils/log.js\"));\n\n  var _EventTarget2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./EventTarget\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var log = new _log.default('Blob');\n  var blobCacheDir = _fs.default.dirs.DocumentDir + '/RNFetchBlob-blobs/';\n  log.disable();\n\n  var Blob = function (_EventTarget) {\n    _createClass(Blob, [{\n      key: \"blobPath\",\n      get: function get() {\n        return this._ref;\n      }\n    }], [{\n      key: \"clearCache\",\n      value: function clearCache() {\n        return _fs.default.unlink(blobCacheDir).then(function () {\n          return _fs.default.mkdir(blobCacheDir);\n        });\n      }\n    }, {\n      key: \"build\",\n      value: function build(data, cType) {\n        return new Promise(function (resolve, reject) {\n          new Blob(data, cType).onCreated(resolve);\n        });\n      }\n    }, {\n      key: \"setLog\",\n      value: function setLog(level) {\n        if (level === -1) log.disable();else log.level(level);\n      }\n    }]);\n\n    function Blob(data, cType, defer) {\n      var _this;\n\n      _classCallCheck(this, Blob);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Blob).call(this));\n      _this.isRNFetchBlobPolyfill = true;\n      _this.multipartBoundary = null;\n      _this._ref = null;\n      _this._blobCreated = false;\n      _this._onCreated = [];\n      _this._closed = false;\n      cType = cType || {};\n      _this.cacheName = getBlobName();\n      _this.isRNFetchBlobPolyfill = true;\n      _this.isDerived = defer;\n      _this.type = cType.type || 'text/plain';\n      log.verbose('Blob constructor called', 'mime', _this.type, 'type', typeof data, 'length', data ? data.length : 0);\n      _this._ref = blobCacheDir + _this.cacheName;\n      var p = null;\n      if (!data) data = '';\n\n      if (data.isRNFetchBlobPolyfill) {\n        log.verbose('create Blob cache file from Blob object');\n        var size = 0;\n        _this._ref = String(data.getRNFetchBlobRef());\n        var orgPath = _this._ref;\n        p = _fs.default.exists(orgPath).then(function (exist) {\n          if (exist) return _fs.default.writeFile(orgPath, data, 'uri').then(function (size) {\n            return Promise.resolve(size);\n          }).catch(function (err) {\n            throw \"RNFetchBlob Blob file creation error, \" + err;\n          });else throw \"could not create Blob from path \" + orgPath + \", file not exists\";\n        });\n      } else if (data instanceof FormData) {\n          log.verbose('create Blob cache file from FormData', data);\n          var boundary = \"RNFetchBlob-\" + _this.cacheName + \"-\" + Date.now();\n          _this.multipartBoundary = boundary;\n          var parts = data.getParts();\n          var formArray = [];\n\n          if (!parts) {\n            p = _fs.default.writeFile(_this._ref, '', 'utf8');\n          } else {\n            for (var i in parts) {\n              formArray.push('\\r\\n--' + boundary + '\\r\\n');\n              var part = parts[i];\n\n              for (var j in part.headers) {\n                formArray.push(j + ': ' + part.headers[j] + '\\r\\n');\n              }\n\n              formArray.push('\\r\\n');\n              if (part.isRNFetchBlobPolyfill) formArray.push(part);else formArray.push(part.string);\n            }\n\n            log.verbose('FormData array', formArray);\n            formArray.push('\\r\\n--' + boundary + '--\\r\\n');\n            p = createMixedBlobData(_this._ref, formArray);\n          }\n        } else if (typeof data === 'string' && data.startsWith('RNFetchBlob-file://')) {\n            log.verbose('create Blob cache file from file path', data);\n            _this._isReference = true;\n            _this._ref = String(data).replace('RNFetchBlob-file://', '');\n            var _orgPath = _this._ref;\n            if (defer) return _possibleConstructorReturn(_this);else {\n              p = _fs.default.stat(_orgPath).then(function (stat) {\n                return Promise.resolve(stat.size);\n              });\n            }\n          } else if (typeof data === 'string') {\n              var encoding = 'utf8';\n              var mime = String(_this.type);\n              if (/(application\\/octet|\\;base64)/i.test(mime)) encoding = 'base64';else data = data.toString();\n              _this.type = String(_this.type).replace(/;base64/ig, '');\n              log.verbose('create Blob cache file from string', 'encode', encoding);\n              p = _fs.default.writeFile(_this._ref, data, encoding).then(function (size) {\n                return Promise.resolve(size);\n              });\n            } else if (Array.isArray(data)) {\n                log.verbose('create Blob cache file from mixed array', data);\n                p = createMixedBlobData(_this._ref, data);\n              } else {\n                data = data.toString();\n                p = _fs.default.writeFile(_this._ref, data, 'utf8').then(function (size) {\n                  return Promise.resolve(size);\n                });\n              }\n\n      p && p.then(function (size) {\n        _this.size = size;\n\n        _this._invokeOnCreateEvent();\n      }).catch(function (err) {\n        log.error('RNFetchBlob could not create Blob : ' + _this._ref, err);\n      });\n      return _this;\n    }\n\n    _createClass(Blob, [{\n      key: \"onCreated\",\n      value: function onCreated(fn) {\n        log.verbose('#register blob onCreated', this._blobCreated);\n        if (!this._blobCreated) this._onCreated.push(fn);else {\n          fn(this);\n        }\n        return this;\n      }\n    }, {\n      key: \"markAsDerived\",\n      value: function markAsDerived() {\n        this._isDerived = true;\n      }\n    }, {\n      key: \"getRNFetchBlobRef\",\n      value: function getRNFetchBlobRef() {\n        return this._ref;\n      }\n    }, {\n      key: \"slice\",\n      value: function slice(start, end) {\n        var _this2 = this;\n\n        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        if (this._closed) throw 'Blob has been released.';\n        log.verbose('slice called', start, end, contentType);\n        var resPath = blobCacheDir + getBlobName();\n        var pass = false;\n        log.debug('fs.slice new blob will at', resPath);\n        var result = new Blob(_index.default.wrap(resPath), {\n          type: contentType\n        }, true);\n\n        _fs.default.exists(blobCacheDir).then(function (exist) {\n          if (exist) return Promise.resolve();\n          return _fs.default.mkdir(blobCacheDir);\n        }).then(function () {\n          return _fs.default.slice(_this2._ref, resPath, start, end);\n        }).then(function (dest) {\n          log.debug('fs.slice done', dest);\n\n          result._invokeOnCreateEvent();\n\n          pass = true;\n        }).catch(function (err) {\n          console.warn('Blob.slice failed:', err);\n          pass = true;\n        });\n\n        log.debug('slice returning new Blob');\n        return result;\n      }\n    }, {\n      key: \"readBlob\",\n      value: function readBlob(encoding) {\n        if (this._closed) throw 'Blob has been released.';\n        return _fs.default.readFile(this._ref, encoding || 'utf8');\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this._closed) return Promise.reject('Blob has been released.');\n        this._closed = true;\n        return _fs.default.unlink(this._ref).catch(function (err) {\n          console.warn(err);\n        });\n      }\n    }, {\n      key: \"safeClose\",\n      value: function safeClose() {\n        if (this._closed) return Promise.reject('Blob has been released.');\n        this._closed = true;\n\n        if (!this._isReference) {\n          return _fs.default.unlink(this._ref).catch(function (err) {\n            console.warn(err);\n          });\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }, {\n      key: \"_invokeOnCreateEvent\",\n      value: function _invokeOnCreateEvent() {\n        log.verbose('invoke create event', this._onCreated);\n        this._blobCreated = true;\n        var fns = this._onCreated;\n\n        for (var i in fns) {\n          if (typeof fns[i] === 'function') {\n            fns[i](this);\n          }\n        }\n\n        delete this._onCreated;\n      }\n    }, {\n      key: \"isDerived\",\n      get: function get() {\n        return this._isDerived || false;\n      }\n    }]);\n\n    _inherits(Blob, _EventTarget);\n\n    return Blob;\n  }(_EventTarget2.default);\n\n  exports.default = Blob;\n\n  function getBlobName() {\n    return 'blob-' + (0, _uuid.default)();\n  }\n\n  function createMixedBlobData(ref, dataArray) {\n    var p = _fs.default.writeFile(ref, '');\n\n    var args = [];\n    var size = 0;\n\n    for (var i in dataArray) {\n      var part = dataArray[i];\n      if (!part) continue;\n\n      if (part.isRNFetchBlobPolyfill) {\n        args.push([ref, part._ref, 'uri']);\n      } else if (typeof part === 'string') args.push([ref, part, 'utf8']);else if (Array.isArray(part)) args.push([ref, part, 'ascii']);\n    }\n\n    var _loop = function _loop(_i) {\n      p = p.then(function (written) {\n        var arg = this;\n        if (written) size += written;\n        log.verbose('mixed blob write', args[_i], written);\n        return _fs.default.appendFile.apply(_fs.default, _toConsumableArray(arg));\n      }.bind(args[_i]));\n    };\n\n    for (var _i in args) {\n      _loop(_i);\n    }\n\n    return p.then(function () {\n      return Promise.resolve(size);\n    });\n  }\n});","map":[[7,0,5,0],[9,0,6,0],[11,0,7,0],[13,0,8,0],[15,0,9,0],[43,0,11,0],[43,6,11,6,"log"],[43,12,11,12],[43,16,11,16,"Log"],[43,28,11,12],[43,29,11,20],[43,35,11,12],[43,36,11,0],[44,0,12,0],[44,6,12,6,"blobCacheDir"],[44,21,12,21,"fs"],[44,33,12,24,"dirs"],[44,37,12,21],[44,38,12,29,"DocumentDir"],[44,49,12,21],[44,52,12,43],[44,73,12,0],[45,0,14,0,"log"],[45,6,14,4,"disable"],[45,13,14,0],[47,6,21,21,"Blob"],[47,10],[50,26,49,17],[51,0,50,4],[51,15,50,11],[51,20,50,16,"_ref"],[51,24,50,4],[52,0,51,3],[55,35,39,22],[56,0,40,4],[56,15,40,11,"fs"],[56,27,40,14,"unlink"],[56,33,40,11],[56,34,40,21,"blobCacheDir"],[56,46,40,11],[56,48,40,35,"then"],[56,52,40,11],[56,53,40,40],[57,0,40,40],[57,17,40,46,"fs"],[57,29,40,49,"mkdir"],[57,34,40,46],[57,35,40,55,"blobCacheDir"],[57,47,40,46],[57,48,40,40],[58,0,40,40],[58,9,40,11],[58,10,40,4],[59,0,41,3],[62,28,43,15,"data"],[62,32],[62,34,43,25,"cType"],[62,39],[62,41,43,50],[63,0,44,4],[63,15,44,11],[63,19,44,15,"Promise"],[63,26,44,11],[63,27,44,23],[63,37,44,24,"resolve"],[63,44,44,23],[63,46,44,33,"reject"],[63,52,44,23],[63,54,44,44],[64,0,45,6],[64,14,45,10,"Blob"],[64,18,45,6],[64,19,45,15,"data"],[64,23,45,6],[64,25,45,21,"cType"],[64,30,45,6],[64,32,45,28,"onCreated"],[64,41,45,6],[64,42,45,38,"resolve"],[64,49,45,6],[65,0,46,5],[65,9,44,11],[65,10,44,4],[66,0,47,3],[69,29,53,16,"level"],[69,34],[69,36,53,30],[70,0,54,4],[70,12,54,7,"level"],[70,22,54,17],[70,23,54,18],[70,24,54,4],[70,26,55,6,"log"],[70,30,55,10,"disable"],[70,37,55,6],[70,40,54,4],[70,45,57,6,"log"],[70,49,57,10,"level"],[70,54,57,6],[70,55,57,16,"level"],[70,60,57,6],[71,0,58,3],[74,0,71,2],[74,18,71,14,"data"],[74,22,71,2],[74,24,71,24,"cType"],[74,29,71,2],[74,31,71,35,"defer"],[74,36,71,2],[74,38,71,50],[75,0,71,50],[77,0,71,50],[79,0,72,4],[80,0,71,50],[80,12,26,2,"isRNFetchBlobPolyfill"],[80,33,71,50],[80,36,26,34],[80,40,71,50],[81,0,71,50],[81,12,27,2,"multipartBoundary"],[81,29,71,50],[81,32,27,29],[81,36,71,50],[82,0,71,50],[82,12,29,2,"_ref"],[82,16,71,50],[82,19,29,16],[82,23,71,50],[83,0,71,50],[83,12,30,2,"_blobCreated"],[83,24,71,50],[83,27,30,25],[83,32,71,50],[84,0,71,50],[84,12,31,2,"_onCreated"],[84,22,71,50],[84,25,31,26],[84,27,71,50],[85,0,71,50],[85,12,32,2,"_closed"],[85,19,71,50],[85,22,32,20],[85,27,71,50],[86,0,73,4,"cType"],[86,14,73,12,"cType"],[86,23,73,21],[86,25,73,4],[87,0,74,4],[87,12,74,9,"cacheName"],[87,21,74,4],[87,24,74,21,"getBlobName"],[87,37,74,4],[88,0,75,4],[88,12,75,9,"isRNFetchBlobPolyfill"],[88,33,75,4],[88,36,75,33],[88,40,75,4],[89,0,76,4],[89,12,76,9,"isDerived"],[89,21,76,4],[89,24,76,21,"defer"],[89,29,76,4],[90,0,77,4],[90,12,77,9,"type"],[90,16,77,4],[90,19,77,16,"cType"],[90,25,77,22,"type"],[90,29,77,16],[90,33,77,30],[90,45,77,4],[91,0,78,4,"log"],[91,10,78,8,"verbose"],[91,17,78,4],[91,18,78,16],[91,43,78,4],[91,45,78,43],[91,51,78,4],[91,53,78,51],[91,59,78,56,"type"],[91,63,78,4],[91,65,78,62],[91,71,78,4],[91,73,78,70],[91,80,78,77,"data"],[91,84,78,4],[91,86,78,83],[91,94,78,4],[91,96,78,93,"data"],[91,103,78,100,"data"],[91,108,78,105,"length"],[91,114,78,93],[91,117,78,112],[91,118,78,4],[92,0,79,4],[92,12,79,9,"_ref"],[92,16,79,4],[92,19,79,16,"blobCacheDir"],[92,34,79,31],[92,40,79,36,"cacheName"],[92,49,79,4],[93,0,80,4],[93,10,80,8,"p"],[93,14,80,12],[93,18,80,4],[94,0,81,4],[94,10,81,7],[94,11,81,8,"data"],[94,15,81,4],[94,17,82,6,"data"],[94,24,82,13],[94,26,82,6],[96,0,83,4],[96,10,83,7,"data"],[96,15,83,12,"isRNFetchBlobPolyfill"],[96,36,83,4],[96,38,83,35],[97,0,84,6,"log"],[97,12,84,10,"verbose"],[97,19,84,6],[97,20,84,18],[97,61,84,6],[98,0,85,6],[98,12,85,10,"size"],[98,19,85,17],[98,20,85,6],[99,0,86,6],[99,14,86,11,"_ref"],[99,18,86,6],[99,21,86,18,"String"],[99,28,86,25,"data"],[99,33,86,30,"getRNFetchBlobRef"],[99,50,86,25],[99,52,86,18],[99,53,86,6],[100,0,87,6],[100,12,87,10,"orgPath"],[100,22,87,20],[100,28,87,25,"_ref"],[100,32,87,6],[101,0,89,6,"p"],[101,12,89,10,"fs"],[101,24,89,13,"exists"],[101,30,89,10],[101,31,89,20,"orgPath"],[101,38,89,10],[101,40,90,13,"then"],[101,44,89,10],[101,45,90,18],[101,55,90,19,"exist"],[101,60,90,18],[101,62,90,30],[102,0,91,14],[102,14,91,17,"exist"],[102,19,91,14],[102,21,92,16],[102,28,92,23,"fs"],[102,40,92,26,"writeFile"],[102,49,92,23],[102,50,92,36,"orgPath"],[102,57,92,23],[102,59,92,45,"data"],[102,63,92,23],[102,65,92,51],[102,70,92,23],[102,72,93,26,"then"],[102,76,92,23],[102,77,93,31],[102,87,93,32,"size"],[102,91,93,31],[103,0,93,31],[103,19,93,41,"Promise"],[103,27,93,49,"resolve"],[103,34,93,41],[103,35,93,57,"size"],[103,39,93,41],[103,40,93,31],[104,0,93,31],[104,11,92,23],[104,13,94,26,"catch"],[104,18,92,23],[104,19,94,32],[104,29,94,33,"err"],[104,32,94,32],[104,34,94,41],[105,0,95,27],[105,61,95,74,"err"],[105,64,95,27],[106,0,96,26],[106,11,92,23],[106,12,92,16],[106,13,91,14],[106,18,98,16],[106,61,98,57,"orgPath"],[106,68,98,16],[107,0,99,13],[107,9,89,10],[107,10,89,6],[108,0,100,5],[108,7,83,4],[108,13,102,9],[108,17,102,12,"data"],[108,33,102,28,"FormData"],[108,41,102,9],[108,43,102,38],[109,0,103,6,"log"],[109,14,103,10,"verbose"],[109,21,103,6],[109,22,103,18],[109,60,103,6],[109,62,103,58,"data"],[109,66,103,6],[110,0,104,6],[110,14,104,10,"boundary"],[110,42,104,36],[110,48,104,41,"cacheName"],[110,57,104,10],[110,66,104,54,"Date"],[110,71,104,59,"now"],[110,74,104,54],[110,76,104,6],[111,0,105,6],[111,16,105,11,"multipartBoundary"],[111,33,105,6],[111,36,105,31,"boundary"],[111,44,105,6],[112,0,106,6],[112,14,106,10,"parts"],[112,22,106,18,"data"],[112,27,106,23,"getParts"],[112,35,106,18],[112,37,106,6],[113,0,107,6],[113,14,107,10,"formArray"],[113,26,107,22],[113,28,107,6],[115,0,108,6],[115,14,108,9],[115,15,108,10,"parts"],[115,20,108,6],[115,22,108,17],[116,0,109,8,"p"],[116,16,109,12,"fs"],[116,28,109,15,"writeFile"],[116,37,109,12],[116,38,109,25],[116,44,109,30,"_ref"],[116,48,109,12],[116,50,109,36],[116,52,109,12],[116,54,109,40],[116,60,109,12],[116,61,109,8],[117,0,110,7],[117,11,108,6],[117,17,111,11],[118,0,112,8],[118,17,112,12],[118,21,112,16,"i"],[118,22,112,8],[118,26,112,21,"parts"],[118,31,112,8],[118,33,112,28],[119,0,113,10,"formArray"],[119,24,113,20,"push"],[119,28,113,10],[119,29,113,25],[119,40,113,34,"boundary"],[119,48,113,25],[119,51,113,43],[119,57,113,10],[120,0,114,10],[120,18,114,14,"part"],[120,25,114,21,"parts"],[120,31,114,27,"i"],[120,32,114,21],[120,33,114,10],[122,0,115,10],[122,19,115,14],[122,23,115,18,"j"],[122,24,115,10],[122,28,115,23,"part"],[122,33,115,28,"headers"],[122,40,115,10],[122,42,115,37],[123,0,116,12,"formArray"],[123,26,116,22,"push"],[123,30,116,12],[123,31,116,27,"j"],[123,35,116,31],[123,39,116,27],[123,42,116,37,"part"],[123,47,116,42,"headers"],[123,54,116,37],[123,55,116,50,"j"],[123,56,116,37],[123,57,116,27],[123,60,116,55],[123,66,116,12],[124,0,117,11],[126,0,118,10,"formArray"],[126,24,118,20,"push"],[126,28,118,10],[126,29,118,25],[126,35,118,10],[127,0,119,10],[127,18,119,13,"part"],[127,23,119,18,"isRNFetchBlobPolyfill"],[127,44,119,10],[127,46,120,12,"formArray"],[127,56,120,22,"push"],[127,60,120,12],[127,61,120,27,"part"],[127,65,120,12],[127,67,119,10],[127,72,122,12,"formArray"],[127,82,122,22,"push"],[127,86,122,12],[127,87,122,27,"part"],[127,92,122,32,"string"],[127,98,122,12],[128,0,123,9],[130,0,124,8,"log"],[130,16,124,12,"verbose"],[130,23,124,8],[130,24,124,20],[130,40,124,8],[130,42,124,38,"formArray"],[130,51,124,8],[131,0,125,8,"formArray"],[131,22,125,18,"push"],[131,26,125,8],[131,27,125,23],[131,38,125,32,"boundary"],[131,46,125,23],[131,49,125,41],[131,57,125,8],[132,0,126,8,"p"],[132,16,126,12,"createMixedBlobData"],[132,36,126,32],[132,42,126,37,"_ref"],[132,46,126,12],[132,48,126,43,"formArray"],[132,57,126,12],[132,58,126,8],[133,0,127,7],[134,0,128,5],[134,9,102,9],[134,15,131,9],[134,19,131,12],[134,26,131,19,"data"],[134,30,131,12],[134,35,131,28],[134,43,131,12],[134,47,131,40,"data"],[134,52,131,45,"startsWith"],[134,62,131,40],[134,63,131,56],[134,84,131,40],[134,85,131,9],[134,87,131,80],[135,0,132,6,"log"],[135,16,132,10,"verbose"],[135,23,132,6],[135,24,132,18],[135,63,132,6],[135,65,132,59,"data"],[135,69,132,6],[136,0,134,6],[136,18,134,11,"_isReference"],[136,30,134,6],[136,33,134,26],[136,37,134,6],[137,0,135,6],[137,18,135,11,"_ref"],[137,22,135,6],[137,25,135,18,"String"],[137,32,135,25,"data"],[137,36,135,18],[137,38,135,31,"replace"],[137,45,135,18],[137,46,135,39],[137,67,135,18],[137,69,135,62],[137,71,135,18],[137,72,135,6],[138,0,136,6],[138,16,136,10,"orgPath"],[138,27,136,20],[138,33,136,25,"_ref"],[138,37,136,6],[139,0,137,6],[139,16,137,9,"defer"],[139,21,137,6],[139,23,138,8],[139,64,137,6],[139,69,139,11],[140,0,140,8,"p"],[140,18,140,12,"fs"],[140,30,140,15,"stat"],[140,34,140,12],[140,35,140,20,"orgPath"],[140,43,140,12],[140,45,141,15,"then"],[140,49,140,12],[140,50,141,20],[140,60,141,21,"stat"],[140,64,141,20],[140,66,141,31],[141,0,142,16],[141,23,142,23,"Promise"],[141,31,142,31,"resolve"],[141,38,142,23],[141,39,142,39,"stat"],[141,44,142,44,"size"],[141,48,142,23],[141,49,142,16],[142,0,143,15],[142,15,140,12],[142,16,140,8],[143,0,144,7],[144,0,145,5],[144,11,131,9],[144,17,147,9],[144,21,147,12],[144,28,147,19,"data"],[144,32,147,12],[144,37,147,28],[144,45,147,9],[144,47,147,38],[145,0,148,6],[145,18,148,10,"encoding"],[145,29,148,21],[145,35,148,6],[146,0,149,6],[146,18,149,10,"mime"],[146,25,149,17,"String"],[146,32,149,24],[146,38,149,29,"type"],[146,42,149,17],[146,43,149,6],[147,0,152,6],[147,18,152,9],[147,51,152,42,"test"],[147,55,152,9],[147,56,152,47,"mime"],[147,60,152,9],[147,61,152,6],[147,63,153,8,"encoding"],[147,74,153,19],[147,82,153,8],[147,83,152,6],[147,88,155,8,"data"],[147,95,155,15,"data"],[147,100,155,20,"toString"],[147,108,155,15],[147,110,155,8],[148,0,157,6],[148,20,157,11,"type"],[148,24,157,6],[148,27,157,18,"String"],[148,34,157,25],[148,40,157,30,"type"],[148,44,157,18],[148,46,157,36,"replace"],[148,53,157,18],[148,54,157,44],[148,65,157,18],[148,67,157,57],[148,69,157,18],[148,70,157,6],[149,0,158,6,"log"],[149,18,158,10,"verbose"],[149,25,158,6],[149,26,158,18],[149,62,158,6],[149,64,158,56],[149,72,158,6],[149,74,158,66,"encoding"],[149,82,158,6],[150,0,159,6,"p"],[150,18,159,10,"fs"],[150,30,159,13,"writeFile"],[150,39,159,10],[150,40,159,23],[150,46,159,28,"_ref"],[150,50,159,10],[150,52,159,34,"data"],[150,56,159,10],[150,58,159,40,"encoding"],[150,66,159,10],[150,68,160,13,"then"],[150,72,159,10],[150,73,160,18],[150,83,160,19,"size"],[150,87,160,18],[150,89,160,28],[151,0,161,14],[151,23,161,21,"Promise"],[151,31,161,29,"resolve"],[151,38,161,21],[151,39,161,37,"size"],[151,43,161,21],[151,44,161,14],[152,0,162,13],[152,15,159,10],[152,16,159,6],[153,0,164,5],[153,13,147,9],[153,19,170,9],[153,23,170,12,"Array"],[153,29,170,18,"isArray"],[153,36,170,12],[153,37,170,26,"data"],[153,41,170,12],[153,42,170,9],[153,44,170,33],[154,0,171,6,"log"],[154,20,171,10,"verbose"],[154,27,171,6],[154,28,171,18],[154,69,171,6],[154,71,171,61,"data"],[154,75,171,6],[155,0,172,6,"p"],[155,20,172,10,"createMixedBlobData"],[155,40,172,30],[155,46,172,35,"_ref"],[155,50,172,10],[155,52,172,41,"data"],[155,56,172,10],[155,57,172,6],[156,0,173,5],[156,15,170,9],[156,21,174,9],[157,0,175,6,"data"],[157,23,175,13,"data"],[157,28,175,18,"toString"],[157,36,175,13],[157,38,175,6],[158,0,176,6,"p"],[158,20,176,10,"fs"],[158,32,176,13,"writeFile"],[158,41,176,10],[158,42,176,23],[158,48,176,28,"_ref"],[158,52,176,10],[158,54,176,34,"data"],[158,58,176,10],[158,60,176,40],[158,66,176,10],[158,68,177,13,"then"],[158,72,176,10],[158,73,177,18],[158,83,177,19,"size"],[158,87,177,18],[159,0,177,18],[159,25,177,28,"Promise"],[159,33,177,36,"resolve"],[159,40,177,28],[159,41,177,44,"size"],[159,45,177,28],[159,46,177,18],[160,0,177,18],[160,17,176,10],[160,18,176,6],[161,0,178,5],[163,0,179,4,"p"],[163,11,179,9,"p"],[163,13,179,11,"then"],[163,17,179,9],[163,18,179,16],[163,28,179,17,"size"],[163,32,179,16],[163,34,179,26],[164,0,180,6],[164,14,180,11,"size"],[164,18,180,6],[164,21,180,18,"size"],[164,25,180,6],[166,0,181,6],[166,14,181,11,"_invokeOnCreateEvent"],[166,34,181,6],[167,0,182,5],[167,7,179,9],[167,9,183,5,"catch"],[167,14,179,9],[167,15,183,11],[167,25,183,12,"err"],[167,28,183,11],[167,30,183,20],[168,0,184,6,"log"],[168,12,184,10,"error"],[168,17,184,6],[168,18,184,16],[168,59,184,56],[168,65,184,61,"_ref"],[168,69,184,6],[168,71,184,67,"err"],[168,74,184,6],[169,0,185,5],[169,7,179,9],[169,8,179,4],[170,0,71,50],[171,0,187,3],[175,32,196,12,"fn"],[175,34],[175,36,196,32],[176,0,197,4,"log"],[176,12,197,8,"verbose"],[176,19,197,4],[176,20,197,16],[176,46,197,4],[176,48,197,44],[176,53,197,49,"_blobCreated"],[176,65,197,4],[177,0,198,4],[177,12,198,7],[177,13,198,8],[177,18,198,13,"_blobCreated"],[177,30,198,4],[177,32,199,6],[177,37,199,11,"_onCreated"],[177,47,199,6],[177,48,199,22,"push"],[177,52,199,6],[177,53,199,27,"fn"],[177,55,199,6],[177,57,198,4],[177,62,200,9],[178,0,201,6,"fn"],[178,13,201,9],[178,17,201,6],[179,0,202,5],[180,0,203,4],[180,15,203,11],[180,19,203,4],[181,0,204,3],[184,38,206,18],[185,0,207,4],[185,13,207,9,"_isDerived"],[185,23,207,4],[185,26,207,22],[185,30,207,4],[186,0,208,3],[189,42,219,22],[190,0,220,4],[190,15,220,11],[190,20,220,16,"_ref"],[190,24,220,4],[191,0,221,3],[194,28,230,8,"start"],[194,33],[194,35,230,23,"end"],[194,38],[194,40,230,65],[195,0,230,65],[197,0,230,65],[197,12,230,36,"contentType"],[197,23,230,65],[197,94,230,56],[197,96,230,65],[198,0,231,4],[198,12,231,7],[198,17,231,12,"_closed"],[198,24,231,4],[198,26,232,6],[198,32,232,12],[198,57,232,6],[199,0,233,4,"log"],[199,12,233,8,"verbose"],[199,19,233,4],[199,20,233,16],[199,34,233,4],[199,36,233,32,"start"],[199,41,233,4],[199,43,233,39,"end"],[199,46,233,4],[199,48,233,44,"contentType"],[199,59,233,4],[200,0,236,4],[200,12,236,8,"resPath"],[200,22,236,18,"blobCacheDir"],[200,37,236,33,"getBlobName"],[200,50,236,4],[201,0,237,4],[201,12,237,8,"pass"],[201,19,237,15],[201,24,237,4],[202,0,238,4,"log"],[202,12,238,8,"debug"],[202,17,238,4],[202,18,238,14],[202,45,238,4],[202,47,238,43,"resPath"],[202,54,238,4],[203,0,239,4],[203,12,239,8,"result"],[203,21,239,17],[203,25,239,21,"Blob"],[203,29,239,17],[203,30,239,26,"RNFetchBlob"],[203,45,239,38,"wrap"],[203,49,239,26],[203,50,239,43,"resPath"],[203,57,239,26],[203,58,239,17],[203,60,239,53],[204,0,239,55,"type"],[204,16,239,62,"contentType"],[205,0,239,53],[205,9,239,17],[205,11,239,77],[205,15,239,17],[205,16,239,4],[207,0,240,4,"fs"],[207,20,240,7,"exists"],[207,26,240,4],[207,27,240,14,"blobCacheDir"],[207,39,240,4],[207,41,241,5,"then"],[207,45,240,4],[207,46,241,10],[207,56,241,11,"exist"],[207,61,241,10],[207,63,241,21],[208,0,242,6],[208,14,242,9,"exist"],[208,19,242,6],[208,21,243,8],[208,28,243,15,"Promise"],[208,36,243,23,"resolve"],[208,43,243,15],[208,45,243,8],[209,0,244,6],[209,17,244,13,"fs"],[209,29,244,16,"mkdir"],[209,34,244,13],[209,35,244,22,"blobCacheDir"],[209,47,244,13],[209,48,244,6],[210,0,245,5],[210,9,240,4],[210,11,246,5,"then"],[210,15,240,4],[210,16,246,10],[211,0,246,10],[211,17,246,16,"fs"],[211,29,246,19,"slice"],[211,34,246,16],[211,35,246,25],[211,42,246,30,"_ref"],[211,46,246,16],[211,48,246,36,"resPath"],[211,55,246,16],[211,57,246,45,"start"],[211,62,246,16],[211,64,246,52,"end"],[211,67,246,16],[211,68,246,10],[212,0,246,10],[212,9,240,4],[212,11,247,5,"then"],[212,15,240,4],[212,16,247,10],[212,26,247,11,"dest"],[212,30,247,10],[212,32,247,20],[213,0,248,6,"log"],[213,14,248,10,"debug"],[213,19,248,6],[213,20,248,16],[213,35,248,6],[213,37,248,33,"dest"],[213,41,248,6],[215,0,249,6,"result"],[215,17,249,13,"_invokeOnCreateEvent"],[215,37,249,6],[217,0,250,6,"pass"],[217,17,250,13],[217,21,250,6],[218,0,251,5],[218,9,240,4],[218,11,252,5,"catch"],[218,16,240,4],[218,17,252,11],[218,27,252,12,"err"],[218,30,252,11],[218,32,252,20],[219,0,253,6,"console"],[219,18,253,14,"warn"],[219,22,253,6],[219,23,253,19],[219,43,253,6],[219,45,253,41,"err"],[219,48,253,6],[220,0,254,6,"pass"],[220,17,254,13],[220,21,254,6],[221,0,255,5],[221,9,240,4],[223,0,256,4,"log"],[223,12,256,8,"debug"],[223,17,256,4],[223,18,256,14],[223,44,256,4],[224,0,258,4],[224,15,258,11,"result"],[224,21,258,4],[225,0,259,3],[228,31,267,11,"encoding"],[228,39],[228,41,267,41],[229,0,268,4],[229,12,268,7],[229,17,268,12,"_closed"],[229,24,268,4],[229,26,269,6],[229,32,269,12],[229,57,269,6],[230,0,270,4],[230,15,270,11,"fs"],[230,27,270,14,"readFile"],[230,35,270,11],[230,36,270,23],[230,41,270,28,"_ref"],[230,45,270,11],[230,47,270,34,"encoding"],[230,59,270,46],[230,65,270,11],[230,66,270,4],[231,0,271,3],[234,30,278,10],[235,0,279,4],[235,12,279,7],[235,17,279,12,"_closed"],[235,24,279,4],[235,26,280,6],[235,33,280,13,"Promise"],[235,41,280,21,"reject"],[235,47,280,13],[235,48,280,28],[235,73,280,13],[235,74,280,6],[236,0,281,4],[236,13,281,9,"_closed"],[236,20,281,4],[236,23,281,19],[236,27,281,4],[237,0,282,4],[237,15,282,11,"fs"],[237,27,282,14,"unlink"],[237,33,282,11],[237,34,282,21],[237,39,282,26,"_ref"],[237,43,282,11],[237,45,282,32,"catch"],[237,50,282,11],[237,51,282,38],[237,61,282,39,"err"],[237,64,282,38],[237,66,282,47],[238,0,283,6,"console"],[238,18,283,14,"warn"],[238,22,283,6],[238,23,283,19,"err"],[238,26,283,6],[239,0,284,5],[239,9,282,11],[239,10,282,4],[240,0,285,3],[243,34,287,14],[244,0,288,4],[244,12,288,7],[244,17,288,12,"_closed"],[244,24,288,4],[244,26,289,6],[244,33,289,13,"Promise"],[244,41,289,21,"reject"],[244,47,289,13],[244,48,289,28],[244,73,289,13],[244,74,289,6],[245,0,290,4],[245,13,290,9,"_closed"],[245,20,290,4],[245,23,290,19],[245,27,290,4],[247,0,291,4],[247,12,291,7],[247,13,291,8],[247,18,291,13,"_isReference"],[247,30,291,4],[247,32,291,27],[248,0,292,6],[248,17,292,13,"fs"],[248,29,292,16,"unlink"],[248,35,292,13],[248,36,292,23],[248,41,292,28,"_ref"],[248,45,292,13],[248,47,292,34,"catch"],[248,52,292,13],[248,53,292,40],[248,63,292,41,"err"],[248,66,292,40],[248,68,292,49],[249,0,293,8,"console"],[249,20,293,16,"warn"],[249,24,293,8],[249,25,293,21,"err"],[249,28,293,8],[250,0,294,7],[250,11,292,13],[250,12,292,6],[251,0,295,5],[251,9,291,4],[251,15,296,9],[252,0,297,6],[252,17,297,13,"Promise"],[252,25,297,21,"resolve"],[252,32,297,13],[252,34,297,6],[253,0,298,5],[254,0,299,3],[257,45,301,25],[258,0,302,4,"log"],[258,12,302,8,"verbose"],[258,19,302,4],[258,20,302,16],[258,41,302,4],[258,43,302,39],[258,48,302,44,"_onCreated"],[258,58,302,4],[259,0,303,4],[259,13,303,9,"_blobCreated"],[259,25,303,4],[259,28,303,24],[259,32,303,4],[260,0,304,4],[260,12,304,8,"fns"],[260,18,304,14],[260,23,304,19,"_onCreated"],[260,33,304,4],[262,0,305,4],[262,13,305,8],[262,17,305,12,"i"],[262,18,305,4],[262,22,305,17,"fns"],[262,25,305,4],[262,27,305,22],[263,0,306,6],[263,14,306,9],[263,21,306,16,"fns"],[263,25,306,20,"i"],[263,26,306,16],[263,27,306,9],[263,32,306,27],[263,42,306,6],[263,44,306,39],[264,0,307,8,"fns"],[264,16,307,12,"i"],[264,17,307,8],[264,19,307,15],[264,23,307,8],[265,0,308,7],[266,0,309,5],[268,0,310,4],[268,15,310,11],[268,20,310,16,"_onCreated"],[268,30,310,4],[269,0,311,3],[272,26,210,18],[273,0,211,4],[273,15,211,11],[273,20,211,16,"_isDerived"],[273,30,211,11],[273,34,211,30],[273,39,211,4],[274,0,212,3],[280,4,21,34,"EventTarget"],[280,25],[284,0,319,0],[284,11,319,9,"getBlobName"],[284,22,319,0],[284,25,319,23],[285,0,320,2],[285,11,320,9],[285,21,320,19],[285,41,320,2],[286,0,321,1],[288,0,330,0],[288,11,330,9,"createMixedBlobData"],[288,30,330,0],[288,31,330,29,"ref"],[288,34,330,0],[288,36,330,34,"dataArray"],[288,45,330,0],[288,47,330,45],[289,0,332,2],[289,8,332,6,"p"],[289,12,332,10,"fs"],[289,24,332,13,"writeFile"],[289,33,332,10],[289,34,332,23,"ref"],[289,37,332,10],[289,39,332,28],[289,41,332,10],[289,42,332,2],[291,0,333,2],[291,8,333,6,"args"],[291,15,333,13],[291,17,333,2],[292,0,334,2],[292,8,334,6,"size"],[292,15,334,13],[292,16,334,2],[294,0,335,2],[294,9,335,6],[294,13,335,10,"i"],[294,14,335,2],[294,18,335,15,"dataArray"],[294,27,335,2],[294,29,335,26],[295,0,336,4],[295,10,336,8,"part"],[295,17,336,15,"dataArray"],[295,27,336,25,"i"],[295,28,336,15],[295,29,336,4],[296,0,337,4],[296,10,337,7],[296,11,337,8,"part"],[296,15,337,4],[296,17,338,6],[298,0,339,4],[298,10,339,7,"part"],[298,15,339,12,"isRNFetchBlobPolyfill"],[298,36,339,4],[298,38,339,35],[299,0,340,6,"args"],[299,13,340,11,"push"],[299,17,340,6],[299,18,340,16],[299,19,340,17,"ref"],[299,22,340,16],[299,24,340,22,"part"],[299,29,340,27,"_ref"],[299,33,340,16],[299,35,340,33],[299,40,340,16],[299,41,340,6],[300,0,341,5],[300,7,339,4],[300,13,342,9],[300,17,342,12],[300,24,342,19,"part"],[300,28,342,12],[300,33,342,28],[300,41,342,9],[300,43,343,6,"args"],[300,48,343,11,"push"],[300,52,343,6],[300,53,343,16],[300,54,343,17,"ref"],[300,57,343,16],[300,59,343,22,"part"],[300,63,343,16],[300,65,343,28],[300,71,343,16],[300,72,343,6],[300,74,342,9],[300,79,348,9],[300,83,348,13,"Array"],[300,89,348,19,"isArray"],[300,96,348,13],[300,97,348,27,"part"],[300,101,348,13],[300,102,348,9],[300,104,349,6,"args"],[300,109,349,11,"push"],[300,113,349,6],[300,114,349,16],[300,115,349,17,"ref"],[300,118,349,16],[300,120,349,22,"part"],[300,124,349,16],[300,126,349,28],[300,133,349,16],[300,134,349,6],[301,0,350,3],[303,0,330,45],[303,31,352,10,"i"],[303,33,330,45],[304,0,353,4,"p"],[304,10,353,8,"p"],[304,12,353,10,"then"],[304,16,353,8],[304,17,353,15],[304,27,353,24,"written"],[304,34,353,15],[304,36,353,32],[305,0,354,6],[305,12,354,10,"arg"],[305,18,354,16],[305,22,354,6],[306,0,355,6],[306,12,355,9,"written"],[306,19,355,6],[306,21,356,8,"size"],[306,29,356,16,"written"],[306,36,356,8],[307,0,357,6,"log"],[307,12,357,10,"verbose"],[307,19,357,6],[307,20,357,18],[307,38,357,6],[307,40,357,38,"args"],[307,45,357,43,"i"],[307,47,357,38],[307,48,357,6],[307,50,357,47,"written"],[307,57,357,6],[308,0,358,6],[308,15,358,13,"fs"],[308,27,358,16,"appendFile"],[308,37,358,13],[308,76,358,30,"arg"],[308,79,358,13],[308,81,358,6],[309,0,359,5],[309,7,353,15],[309,8,359,6,"bind"],[309,12,353,15],[309,13,359,11,"args"],[309,18,359,16,"i"],[309,20,359,11],[309,21,353,15],[309,22,353,8],[309,23,353,4],[310,0,330,45],[312,0,352,2],[312,9,352,6],[312,13,352,10,"i"],[312,15,352,2],[312,19,352,15,"args"],[312,23,352,2],[312,25,352,21],[313,0,352,21],[313,12,352,10,"i"],[313,14,352,21],[314,0,360,3],[316,0,361,2],[316,11,361,9,"p"],[316,13,361,11,"then"],[316,17,361,9],[316,18,361,16],[317,0,361,16],[317,13,361,22,"Promise"],[317,21,361,30,"resolve"],[317,28,361,22],[317,29,361,38,"size"],[317,33,361,22],[317,34,361,16],[318,0,361,16],[318,5,361,9],[318,6,361,2],[319,0,362,1]]},"type":"js/module"}]}