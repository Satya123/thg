{"dependencies":[{"name":"./_composeArgs","isAsync":false},{"name":"./_composeArgsRight","isAsync":false},{"name":"./_replaceHolders","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var composeArgs = _$$_REQUIRE(_dependencyMap[0], './_composeArgs'),\n      composeArgsRight = _$$_REQUIRE(_dependencyMap[1], './_composeArgsRight'),\n      replaceHolders = _$$_REQUIRE(_dependencyMap[2], './_replaceHolders');\n\n  var PLACEHOLDER = '__lodash_placeholder__';\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256;\n  var nativeMin = Math.min;\n\n  function mergeData(data, source) {\n    var bitmask = data[1],\n        srcBitmask = source[1],\n        newBitmask = bitmask | srcBitmask,\n        isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n    var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;\n\n    if (!(isCommon || isCombo)) {\n      return data;\n    }\n\n    if (srcBitmask & WRAP_BIND_FLAG) {\n      data[2] = source[2];\n      newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n    }\n\n    var value = source[3];\n\n    if (value) {\n      var partials = data[3];\n      data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n      data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n    }\n\n    value = source[5];\n\n    if (value) {\n      partials = data[5];\n      data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n      data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n    }\n\n    value = source[7];\n\n    if (value) {\n      data[7] = value;\n    }\n\n    if (srcBitmask & WRAP_ARY_FLAG) {\n      data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n    }\n\n    if (data[9] == null) {\n      data[9] = source[9];\n    }\n\n    data[0] = source[0];\n    data[1] = newBitmask;\n    return data;\n  }\n\n  module.exports = mergeData;\n});","map":[[2,0,1,0],[2,6,1,4,"composeArgs"],[2,20,1,18,"require"],[2,51,1,26],[2,67,1,18],[2,68,1,0],[3,0,1,0],[3,6,2,4,"composeArgsRight"],[3,25,2,23,"require"],[3,56,2,31],[3,77,2,23],[3,78,1,0],[4,0,1,0],[4,6,3,4,"replaceHolders"],[4,23,3,21,"require"],[4,54,3,29],[4,73,3,21],[4,74,1,0],[6,0,6,0],[6,6,6,4,"PLACEHOLDER"],[6,20,6,18],[6,44,6,0],[7,0,9,0],[7,6,9,4,"WRAP_BIND_FLAG"],[7,23,9,21],[7,24,9,0],[8,0,9,0],[8,6,10,4,"WRAP_BIND_KEY_FLAG"],[8,27,10,25],[8,28,9,0],[9,0,9,0],[9,6,11,4,"WRAP_CURRY_BOUND_FLAG"],[9,30,11,28],[9,31,9,0],[10,0,9,0],[10,6,12,4,"WRAP_CURRY_FLAG"],[10,24,12,22],[10,25,9,0],[11,0,9,0],[11,6,13,4,"WRAP_ARY_FLAG"],[11,22,13,20],[11,25,9,0],[12,0,9,0],[12,6,14,4,"WRAP_REARG_FLAG"],[12,24,14,22],[12,27,9,0],[13,0,17,0],[13,6,17,4,"nativeMin"],[13,18,17,16,"Math"],[13,23,17,21,"min"],[13,26,17,0],[15,0,35,0],[15,11,35,9,"mergeData"],[15,20,35,0],[15,21,35,19,"data"],[15,25,35,0],[15,27,35,25,"source"],[15,33,35,0],[15,35,35,33],[16,0,36,2],[16,8,36,6,"bitmask"],[16,18,36,16,"data"],[16,23,36,21],[16,24,36,16],[16,25,36,2],[17,0,36,2],[17,8,37,6,"srcBitmask"],[17,21,37,19,"source"],[17,28,37,26],[17,29,37,19],[17,30,36,2],[18,0,36,2],[18,8,38,6,"newBitmask"],[18,21,38,19,"bitmask"],[18,31,38,29,"srcBitmask"],[18,41,36,2],[19,0,36,2],[19,8,39,6,"isCommon"],[19,19,39,17,"newBitmask"],[19,33,39,31,"WRAP_BIND_FLAG"],[19,50,39,48,"WRAP_BIND_KEY_FLAG"],[19,68,39,31],[19,71,39,69,"WRAP_ARY_FLAG"],[19,84,39,17],[19,85,36,2],[20,0,41,2],[20,8,41,6,"isCombo"],[20,18,42,6,"srcBitmask"],[20,32,42,20,"WRAP_ARY_FLAG"],[20,45,42,5],[20,49,42,39,"bitmask"],[20,60,42,50,"WRAP_CURRY_FLAG"],[20,75,42,4],[20,79,43,6,"srcBitmask"],[20,93,43,20,"WRAP_ARY_FLAG"],[20,106,43,5],[20,110,43,39,"bitmask"],[20,121,43,50,"WRAP_REARG_FLAG"],[20,136,43,5],[20,140,43,71,"data"],[20,145,43,76],[20,146,43,71],[20,148,43,79,"length"],[20,154,43,71],[20,158,43,89,"source"],[20,165,43,96],[20,166,43,89],[20,167,42,4],[20,171,44,6,"srcBitmask"],[20,186,44,21,"WRAP_ARY_FLAG"],[20,202,44,37,"WRAP_REARG_FLAG"],[20,217,44,6],[20,218,44,5],[20,222,44,59,"source"],[20,229,44,66],[20,230,44,59],[20,232,44,69,"length"],[20,238,44,59],[20,242,44,79,"source"],[20,249,44,86],[20,250,44,79],[20,251,44,5],[20,255,44,94,"bitmask"],[20,266,44,105,"WRAP_CURRY_FLAG"],[20,281,41,2],[22,0,47,2],[22,8,47,6],[22,10,47,8,"isCommon"],[22,22,47,20,"isCombo"],[22,29,47,6],[22,30,47,2],[22,32,47,30],[23,0,48,4],[23,13,48,11,"data"],[23,17,48,4],[24,0,49,3],[26,0,51,2],[26,8,51,6,"srcBitmask"],[26,21,51,19,"WRAP_BIND_FLAG"],[26,35,51,2],[26,37,51,35],[27,0,52,4,"data"],[27,11,52,9],[27,12,52,4],[27,16,52,14,"source"],[27,23,52,21],[27,24,52,14],[27,25,52,4],[28,0,54,4,"newBitmask"],[28,20,54,18,"bitmask"],[28,30,54,28,"WRAP_BIND_FLAG"],[28,44,54,18],[28,47,54,45],[28,48,54,18],[28,51,54,49,"WRAP_CURRY_BOUND_FLAG"],[28,72,54,4],[29,0,55,3],[31,0,57,2],[31,8,57,6,"value"],[31,16,57,14,"source"],[31,23,57,21],[31,24,57,14],[31,25,57,2],[33,0,58,2],[33,8,58,6,"value"],[33,13,58,2],[33,15,58,13],[34,0,59,4],[34,10,59,8,"partials"],[34,21,59,19,"data"],[34,26,59,24],[34,27,59,19],[34,28,59,4],[35,0,60,4,"data"],[35,11,60,9],[35,12,60,4],[35,16,60,14,"partials"],[35,27,60,25,"composeArgs"],[35,39,60,37,"partials"],[35,47,60,25],[35,49,60,47,"value"],[35,54,60,25],[35,56,60,54,"source"],[35,63,60,61],[35,64,60,54],[35,65,60,25],[35,66,60,14],[35,69,60,67,"value"],[35,74,60,4],[36,0,61,4,"data"],[36,11,61,9],[36,12,61,4],[36,16,61,14,"partials"],[36,27,61,25,"replaceHolders"],[36,42,61,40,"data"],[36,47,61,45],[36,48,61,40],[36,49,61,25],[36,51,61,49,"PLACEHOLDER"],[36,62,61,25],[36,63,61,14],[36,66,61,64,"source"],[36,73,61,71],[36,74,61,64],[36,75,61,4],[37,0,62,3],[39,0,64,2,"value"],[39,12,64,10,"source"],[39,19,64,17],[39,20,64,10],[39,21,64,2],[41,0,65,2],[41,8,65,6,"value"],[41,13,65,2],[41,15,65,13],[42,0,66,4,"partials"],[42,17,66,15,"data"],[42,22,66,20],[42,23,66,15],[42,24,66,4],[43,0,67,4,"data"],[43,11,67,9],[43,12,67,4],[43,16,67,14,"partials"],[43,27,67,25,"composeArgsRight"],[43,44,67,42,"partials"],[43,52,67,25],[43,54,67,52,"value"],[43,59,67,25],[43,61,67,59,"source"],[43,68,67,66],[43,69,67,59],[43,70,67,25],[43,71,67,14],[43,74,67,72,"value"],[43,79,67,4],[44,0,68,4,"data"],[44,11,68,9],[44,12,68,4],[44,16,68,14,"partials"],[44,27,68,25,"replaceHolders"],[44,42,68,40,"data"],[44,47,68,45],[44,48,68,40],[44,49,68,25],[44,51,68,49,"PLACEHOLDER"],[44,62,68,25],[44,63,68,14],[44,66,68,64,"source"],[44,73,68,71],[44,74,68,64],[44,75,68,4],[45,0,69,3],[47,0,71,2,"value"],[47,12,71,10,"source"],[47,19,71,17],[47,20,71,10],[47,21,71,2],[49,0,72,2],[49,8,72,6,"value"],[49,13,72,2],[49,15,72,13],[50,0,73,4,"data"],[50,11,73,9],[50,12,73,4],[50,16,73,14,"value"],[50,21,73,4],[51,0,74,3],[53,0,76,2],[53,8,76,6,"srcBitmask"],[53,21,76,19,"WRAP_ARY_FLAG"],[53,34,76,2],[53,36,76,34],[54,0,77,4,"data"],[54,11,77,9],[54,12,77,4],[54,16,77,14,"data"],[54,21,77,19],[54,22,77,14],[54,27,77,25],[54,31,77,14],[54,34,77,32,"source"],[54,41,77,39],[54,42,77,32],[54,43,77,14],[54,46,77,44,"nativeMin"],[54,56,77,54,"data"],[54,61,77,59],[54,62,77,54],[54,63,77,44],[54,65,77,63,"source"],[54,72,77,70],[54,73,77,63],[54,74,77,44],[54,75,77,4],[55,0,78,3],[57,0,80,2],[57,8,80,6,"data"],[57,13,80,11],[57,14,80,6],[57,19,80,17],[57,23,80,2],[57,25,80,23],[58,0,81,4,"data"],[58,11,81,9],[58,12,81,4],[58,16,81,14,"source"],[58,23,81,21],[58,24,81,14],[58,25,81,4],[59,0,82,3],[61,0,84,2,"data"],[61,9,84,7],[61,10,84,2],[61,14,84,12,"source"],[61,21,84,19],[61,22,84,12],[61,23,84,2],[62,0,85,2,"data"],[62,9,85,7],[62,10,85,2],[62,14,85,12,"newBitmask"],[62,24,85,2],[63,0,87,2],[63,11,87,9,"data"],[63,15,87,2],[64,0,88,1],[66,0,90,0,"module"],[66,9,90,7,"exports"],[66,16,90,0],[66,19,90,17,"mergeData"],[66,28,90,0]]},"type":"js/module"}]}