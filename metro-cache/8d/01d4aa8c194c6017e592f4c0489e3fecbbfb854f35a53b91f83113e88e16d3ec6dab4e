{"dependencies":[{"name":"./_contains","isAsync":false},{"name":"./_map","isAsync":false},{"name":"./_quote","isAsync":false},{"name":"./_toISOString","isAsync":false},{"name":"../keys","isAsync":false},{"name":"../reject","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var _contains = _$$_REQUIRE(_dependencyMap[0], './_contains');\n\n  var _map = _$$_REQUIRE(_dependencyMap[1], './_map');\n\n  var _quote = _$$_REQUIRE(_dependencyMap[2], './_quote');\n\n  var _toISOString = _$$_REQUIRE(_dependencyMap[3], './_toISOString');\n\n  var keys = _$$_REQUIRE(_dependencyMap[4], '../keys');\n\n  var reject = _$$_REQUIRE(_dependencyMap[5], '../reject');\n\n  module.exports = function _toString(x, seen) {\n    var recur = function recur(y) {\n      var xs = seen.concat([x]);\n      return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n    };\n\n    var mapPairs = function mapPairs(obj, keys) {\n      return _map(function (k) {\n        return _quote(k) + ': ' + recur(obj[k]);\n      }, keys.slice().sort());\n    };\n\n    switch (Object.prototype.toString.call(x)) {\n      case '[object Arguments]':\n        return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n\n      case '[object Array]':\n        return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n          return /^\\d+$/.test(k);\n        }, keys(x)))).join(', ') + ']';\n\n      case '[object Boolean]':\n        return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n\n      case '[object Date]':\n        return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n\n      case '[object Null]':\n        return 'null';\n\n      case '[object Number]':\n        return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n\n      case '[object String]':\n        return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n\n      case '[object Undefined]':\n        return 'undefined';\n\n      default:\n        if (typeof x.toString === 'function') {\n          var repr = x.toString();\n\n          if (repr !== '[object Object]') {\n            return repr;\n          }\n        }\n\n        return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n    }\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"_contains"],[2,18,1,16,"require"],[2,49,1,24],[2,62,1,16],[2,63,1,0],[4,0,2,0],[4,6,2,4,"_map"],[4,13,2,11,"require"],[4,44,2,19],[4,52,2,11],[4,53,2,0],[6,0,3,0],[6,6,3,4,"_quote"],[6,15,3,13,"require"],[6,46,3,21],[6,56,3,13],[6,57,3,0],[8,0,4,0],[8,6,4,4,"_toISOString"],[8,21,4,19,"require"],[8,52,4,27],[8,68,4,19],[8,69,4,0],[10,0,5,0],[10,6,5,4,"keys"],[10,13,5,11,"require"],[10,44,5,19],[10,53,5,11],[10,54,5,0],[12,0,6,0],[12,6,6,4,"reject"],[12,15,6,13,"require"],[12,46,6,21],[12,57,6,13],[12,58,6,0],[14,0,9,0,"module"],[14,9,9,7,"exports"],[14,16,9,0],[14,19,9,17],[14,28,9,26,"_toString"],[14,37,9,17],[14,38,9,36,"x"],[14,39,9,17],[14,41,9,39,"seen"],[14,45,9,17],[14,47,9,45],[15,0,10,2],[15,8,10,6,"recur"],[15,16,10,14],[15,25,10,23,"recur"],[15,30,10,14],[15,31,10,29,"y"],[15,32,10,14],[15,34,10,32],[16,0,11,4],[16,10,11,8,"xs"],[16,15,11,13,"seen"],[16,20,11,18,"concat"],[16,26,11,13],[16,27,11,25],[16,28,11,26,"x"],[16,29,11,25],[16,30,11,13],[16,31,11,4],[17,0,12,4],[17,13,12,11,"_contains"],[17,23,12,21,"y"],[17,24,12,11],[17,26,12,24,"xs"],[17,28,12,11],[17,32,12,30],[17,44,12,11],[17,47,12,45,"_toString"],[17,57,12,55,"y"],[17,58,12,45],[17,60,12,58,"xs"],[17,62,12,45],[17,63,12,4],[18,0,13,3],[18,5,10,2],[20,0,16,2],[20,8,16,6,"mapPairs"],[20,19,16,17],[20,28,16,6,"mapPairs"],[20,36,16,17],[20,37,16,26,"obj"],[20,40,16,17],[20,42,16,31,"keys"],[20,46,16,17],[20,48,16,37],[21,0,17,4],[21,13,17,11,"_map"],[21,18,17,16],[21,28,17,25,"k"],[21,29,17,16],[21,31,17,28],[22,0,17,30],[22,15,17,37,"_quote"],[22,22,17,44,"k"],[22,23,17,37],[22,27,17,49],[22,31,17,37],[22,34,17,56,"recur"],[22,40,17,62,"obj"],[22,44,17,66,"k"],[22,45,17,62],[22,46,17,56],[22,47,17,30],[23,0,17,72],[23,7,17,11],[23,9,17,74,"keys"],[23,14,17,79,"slice"],[23,19,17,74],[23,22,17,87,"sort"],[23,26,17,74],[23,28,17,11],[23,29,17,4],[24,0,18,3],[24,5,16,2],[26,0,20,2],[26,12,20,10,"Object"],[26,19,20,17,"prototype"],[26,28,20,10],[26,29,20,27,"toString"],[26,37,20,10],[26,38,20,36,"call"],[26,42,20,10],[26,43,20,41,"x"],[26,44,20,10],[26,45,20,2],[27,0,21,4],[27,11,21,9],[27,31,21,4],[28,0,22,6],[28,15,22,13],[28,54,22,52,"_map"],[28,59,22,57,"recur"],[28,64,22,52],[28,66,22,64,"x"],[28,67,22,52],[28,69,22,67,"join"],[28,73,22,52],[28,74,22,72],[28,78,22,52],[28,79,22,13],[28,82,22,80],[28,86,22,6],[30,0,23,4],[30,11,23,9],[30,27,23,4],[31,0,24,6],[31,15,24,13],[31,21,24,19,"_map"],[31,26,24,24,"recur"],[31,31,24,19],[31,33,24,31,"x"],[31,34,24,19],[31,36,24,34,"concat"],[31,42,24,19],[31,43,24,41,"mapPairs"],[31,52,24,50,"x"],[31,53,24,41],[31,55,24,53,"reject"],[31,62,24,60],[31,72,24,69,"k"],[31,73,24,60],[31,75,24,72],[32,0,24,74],[32,17,24,81],[32,25,24,89,"test"],[32,29,24,81],[32,30,24,94,"k"],[32,31,24,81],[32,32,24,74],[33,0,24,99],[33,9,24,53],[33,11,24,101,"keys"],[33,16,24,106,"x"],[33,17,24,101],[33,18,24,53],[33,19,24,41],[33,20,24,19],[33,22,24,112,"join"],[33,26,24,19],[33,27,24,117],[33,31,24,19],[33,32,24,13],[33,35,24,125],[33,38,24,6],[35,0,25,4],[35,11,25,9],[35,29,25,4],[36,0,26,6],[36,15,26,13],[36,22,26,20,"x"],[36,23,26,13],[36,28,26,26],[36,36,26,13],[36,39,26,37],[36,56,26,54,"recur"],[36,62,26,60,"x"],[36,64,26,62,"valueOf"],[36,71,26,60],[36,73,26,54],[36,74,26,37],[36,77,26,75],[36,80,26,13],[36,83,26,81,"x"],[36,85,26,83,"toString"],[36,93,26,81],[36,95,26,6],[38,0,27,4],[38,11,27,9],[38,26,27,4],[39,0,28,6],[39,15,28,13],[39,30,28,28,"isNaN"],[39,36,28,34,"x"],[39,38,28,36,"valueOf"],[39,45,28,34],[39,47,28,28],[39,51,28,49,"recur"],[39,57,28,55,"NaN"],[39,60,28,49],[39,61,28,28],[39,64,28,62,"_quote"],[39,71,28,69,"_toISOString"],[39,84,28,82,"x"],[39,85,28,69],[39,86,28,62],[39,87,28,13],[39,91,28,89],[39,94,28,6],[41,0,29,4],[41,11,29,9],[41,26,29,4],[42,0,30,6],[42,15,30,13],[42,21,30,6],[44,0,31,4],[44,11,31,9],[44,28,31,4],[45,0,32,6],[45,15,32,13],[45,22,32,20,"x"],[45,23,32,13],[45,28,32,26],[45,36,32,13],[45,39,32,37],[45,55,32,53,"recur"],[45,61,32,59,"x"],[45,63,32,61,"valueOf"],[45,70,32,59],[45,72,32,53],[45,73,32,37],[45,76,32,74],[45,79,32,13],[45,82,32,80],[45,86,32,84,"x"],[45,87,32,80],[45,92,32,90],[45,93,32,91,"Infinity"],[45,101,32,80],[45,104,32,102],[45,108,32,80],[45,111,32,109,"x"],[45,113,32,111,"toString"],[45,121,32,109],[45,122,32,120],[45,124,32,109],[45,125,32,6],[47,0,33,4],[47,11,33,9],[47,28,33,4],[48,0,34,6],[48,15,34,13],[48,22,34,20,"x"],[48,23,34,13],[48,28,34,26],[48,36,34,13],[48,39,34,37],[48,55,34,53,"recur"],[48,61,34,59,"x"],[48,63,34,61,"valueOf"],[48,70,34,59],[48,72,34,53],[48,73,34,37],[48,76,34,74],[48,79,34,13],[48,82,34,80,"_quote"],[48,89,34,87,"x"],[48,90,34,80],[48,91,34,6],[50,0,35,4],[50,11,35,9],[50,31,35,4],[51,0,36,6],[51,15,36,13],[51,26,36,6],[53,0,37,4],[54,0,38,6],[54,12,38,10],[54,19,38,17,"x"],[54,21,38,19,"toString"],[54,29,38,10],[54,34,38,32],[54,44,38,6],[54,46,38,44],[55,0,39,8],[55,14,39,12,"repr"],[55,21,39,19,"x"],[55,23,39,21,"toString"],[55,31,39,19],[55,33,39,8],[57,0,40,8],[57,14,40,12,"repr"],[57,23,40,21],[57,40,40,8],[57,42,40,40],[58,0,41,10],[58,19,41,17,"repr"],[58,23,41,10],[59,0,42,9],[60,0,43,7],[62,0,44,6],[62,15,44,13],[62,21,44,19,"mapPairs"],[62,30,44,28,"x"],[62,31,44,19],[62,33,44,31,"keys"],[62,38,44,36,"x"],[62,39,44,31],[62,40,44,19],[62,42,44,40,"join"],[62,46,44,19],[62,47,44,45],[62,51,44,19],[62,52,44,13],[62,55,44,53],[62,58,44,6],[63,0,20,2],[64,0,46,1],[64,3,9,0]]},"type":"js/module"}]}