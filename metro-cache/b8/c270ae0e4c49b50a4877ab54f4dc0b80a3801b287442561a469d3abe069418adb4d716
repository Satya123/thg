{"dependencies":[{"name":"./conversions","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var conversions = _$$_REQUIRE(_dependencyMap[0], './conversions');\n\n  function buildGraph() {\n    var graph = {};\n    var models = Object.keys(conversions);\n\n    for (var len = models.length, i = 0; i < len; i++) {\n      graph[models[i]] = {\n        distance: -1,\n        parent: null\n      };\n    }\n\n    return graph;\n  }\n\n  function deriveBFS(fromModel) {\n    var graph = buildGraph();\n    var queue = [fromModel];\n    graph[fromModel].distance = 0;\n\n    while (queue.length) {\n      var current = queue.pop();\n      var adjacents = Object.keys(conversions[current]);\n\n      for (var len = adjacents.length, i = 0; i < len; i++) {\n        var adjacent = adjacents[i];\n        var node = graph[adjacent];\n\n        if (node.distance === -1) {\n          node.distance = graph[current].distance + 1;\n          node.parent = current;\n          queue.unshift(adjacent);\n        }\n      }\n    }\n\n    return graph;\n  }\n\n  function link(from, to) {\n    return function (args) {\n      return to(from(args));\n    };\n  }\n\n  function wrapConversion(toModel, graph) {\n    var path = [graph[toModel].parent, toModel];\n    var fn = conversions[graph[toModel].parent][toModel];\n    var cur = graph[toModel].parent;\n\n    while (graph[cur].parent) {\n      path.unshift(graph[cur].parent);\n      fn = link(conversions[graph[cur].parent][cur], fn);\n      cur = graph[cur].parent;\n    }\n\n    fn.conversion = path;\n    return fn;\n  }\n\n  module.exports = function (fromModel) {\n    var graph = deriveBFS(fromModel);\n    var conversion = {};\n    var models = Object.keys(graph);\n\n    for (var len = models.length, i = 0; i < len; i++) {\n      var toModel = models[i];\n      var node = graph[toModel];\n\n      if (node.parent === null) {\n        continue;\n      }\n\n      conversion[toModel] = wrapConversion(toModel, graph);\n    }\n\n    return conversion;\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"conversions"],[2,20,1,18,"require"],[2,51,1,26],[2,66,1,18],[2,67,1,0],[4,0,14,0],[4,11,14,9,"buildGraph"],[4,21,14,0],[4,24,14,22],[5,0,15,1],[5,8,15,5,"graph"],[5,16,15,13],[5,18,15,1],[6,0,17,1],[6,8,17,5,"models"],[6,17,17,14,"Object"],[6,24,17,21,"keys"],[6,28,17,14],[6,29,17,26,"conversions"],[6,40,17,14],[6,41,17,1],[8,0,19,1],[8,9,19,6],[8,13,19,10,"len"],[8,19,19,16,"models"],[8,26,19,23,"length"],[8,32,19,6],[8,34,19,31,"i"],[8,38,19,35],[8,39,19,1],[8,41,19,38,"i"],[8,45,19,42,"len"],[8,48,19,1],[8,50,19,47,"i"],[8,53,19,1],[8,55,19,52],[9,0,20,2,"graph"],[9,12,20,8,"models"],[9,19,20,15,"i"],[9,20,20,8],[9,21,20,2],[9,25,20,21],[10,0,23,3,"distance"],[10,18,23,13],[10,19,23,14],[10,20,20,21],[11,0,24,3,"parent"],[11,16,24,11],[12,0,20,21],[12,7,20,2],[13,0,26,2],[15,0,28,1],[15,11,28,8,"graph"],[15,16,28,1],[16,0,29,1],[18,0,32,0],[18,11,32,9,"deriveBFS"],[18,20,32,0],[18,21,32,19,"fromModel"],[18,30,32,0],[18,32,32,30],[19,0,33,1],[19,8,33,5,"graph"],[19,16,33,13,"buildGraph"],[19,28,33,1],[20,0,34,1],[20,8,34,5,"queue"],[20,16,34,13],[20,17,34,14,"fromModel"],[20,26,34,13],[20,27,34,1],[21,0,36,1,"graph"],[21,10,36,7,"fromModel"],[21,19,36,1],[21,21,36,18,"distance"],[21,29,36,1],[21,32,36,29],[21,33,36,1],[23,0,38,1],[23,11,38,8,"queue"],[23,17,38,14,"length"],[23,23,38,1],[23,25,38,22],[24,0,39,2],[24,10,39,6,"current"],[24,20,39,16,"queue"],[24,26,39,22,"pop"],[24,29,39,16],[24,31,39,2],[25,0,40,2],[25,10,40,6,"adjacents"],[25,22,40,18,"Object"],[25,29,40,25,"keys"],[25,33,40,18],[25,34,40,30,"conversions"],[25,46,40,42,"current"],[25,53,40,30],[25,54,40,18],[25,55,40,2],[27,0,42,2],[27,11,42,7],[27,15,42,11,"len"],[27,21,42,17,"adjacents"],[27,31,42,27,"length"],[27,37,42,7],[27,39,42,35,"i"],[27,43,42,39],[27,44,42,2],[27,46,42,42,"i"],[27,50,42,46,"len"],[27,53,42,2],[27,55,42,51,"i"],[27,58,42,2],[27,60,42,56],[28,0,43,3],[28,12,43,7,"adjacent"],[28,23,43,18,"adjacents"],[28,33,43,28,"i"],[28,34,43,18],[28,35,43,3],[29,0,44,3],[29,12,44,7,"node"],[29,19,44,14,"graph"],[29,25,44,20,"adjacent"],[29,33,44,14],[29,34,44,3],[31,0,46,3],[31,12,46,7,"node"],[31,17,46,12,"distance"],[31,25,46,7],[31,30,46,25],[31,31,46,26],[31,32,46,3],[31,34,46,29],[32,0,47,4,"node"],[32,15,47,9,"distance"],[32,23,47,4],[32,26,47,20,"graph"],[32,32,47,26,"current"],[32,39,47,20],[32,41,47,35,"distance"],[32,49,47,20],[32,52,47,46],[32,53,47,4],[33,0,48,4,"node"],[33,15,48,9,"parent"],[33,21,48,4],[33,24,48,18,"current"],[33,31,48,4],[34,0,49,4,"queue"],[34,16,49,10,"unshift"],[34,23,49,4],[34,24,49,18,"adjacent"],[34,32,49,4],[35,0,50,4],[36,0,51,3],[37,0,52,2],[39,0,54,1],[39,11,54,8,"graph"],[39,16,54,1],[40,0,55,1],[42,0,57,0],[42,11,57,9,"link"],[42,15,57,0],[42,16,57,14,"from"],[42,20,57,0],[42,22,57,20,"to"],[42,24,57,0],[42,26,57,24],[43,0,58,1],[43,11,58,8],[43,21,58,18,"args"],[43,25,58,8],[43,27,58,24],[44,0,59,2],[44,13,59,9,"to"],[44,16,59,12,"from"],[44,21,59,17,"args"],[44,25,59,12],[44,26,59,9],[44,27,59,2],[45,0,60,2],[45,5,58,1],[46,0,61,1],[48,0,63,0],[48,11,63,9,"wrapConversion"],[48,25,63,0],[48,26,63,24,"toModel"],[48,33,63,0],[48,35,63,33,"graph"],[48,40,63,0],[48,42,63,40],[49,0,64,1],[49,8,64,5,"path"],[49,15,64,12],[49,16,64,13,"graph"],[49,22,64,19,"toModel"],[49,29,64,13],[49,31,64,28,"parent"],[49,37,64,12],[49,39,64,36,"toModel"],[49,46,64,12],[49,47,64,1],[50,0,65,1],[50,8,65,5,"fn"],[50,13,65,10,"conversions"],[50,25,65,22,"graph"],[50,31,65,28,"toModel"],[50,38,65,22],[50,40,65,37,"parent"],[50,46,65,10],[50,48,65,45,"toModel"],[50,55,65,10],[50,56,65,1],[51,0,67,1],[51,8,67,5,"cur"],[51,14,67,11,"graph"],[51,20,67,17,"toModel"],[51,27,67,11],[51,29,67,26,"parent"],[51,35,67,1],[53,0,68,1],[53,11,68,8,"graph"],[53,17,68,14,"cur"],[53,20,68,8],[53,22,68,19,"parent"],[53,28,68,1],[53,30,68,27],[54,0,69,2,"path"],[54,11,69,7,"unshift"],[54,18,69,2],[54,19,69,15,"graph"],[54,25,69,21,"cur"],[54,28,69,15],[54,30,69,26,"parent"],[54,36,69,2],[55,0,70,2,"fn"],[55,11,70,7,"link"],[55,16,70,12,"conversions"],[55,28,70,24,"graph"],[55,34,70,30,"cur"],[55,37,70,24],[55,39,70,35,"parent"],[55,45,70,12],[55,47,70,43,"cur"],[55,50,70,12],[55,51,70,7],[55,53,70,49,"fn"],[55,55,70,7],[55,56,70,2],[56,0,71,2,"cur"],[56,12,71,8,"graph"],[56,18,71,14,"cur"],[56,21,71,8],[56,23,71,19,"parent"],[56,29,71,2],[57,0,72,2],[59,0,74,1,"fn"],[59,7,74,4,"conversion"],[59,17,74,1],[59,20,74,17,"path"],[59,24,74,1],[60,0,75,1],[60,11,75,8,"fn"],[60,13,75,1],[61,0,76,1],[63,0,78,0,"module"],[63,9,78,7,"exports"],[63,16,78,0],[63,19,78,17],[63,29,78,27,"fromModel"],[63,38,78,17],[63,40,78,38],[64,0,79,1],[64,8,79,5,"graph"],[64,16,79,13,"deriveBFS"],[64,26,79,23,"fromModel"],[64,35,79,13],[64,36,79,1],[65,0,80,1],[65,8,80,5,"conversion"],[65,21,80,18],[65,23,80,1],[66,0,82,1],[66,8,82,5,"models"],[66,17,82,14,"Object"],[66,24,82,21,"keys"],[66,28,82,14],[66,29,82,26,"graph"],[66,34,82,14],[66,35,82,1],[68,0,83,1],[68,9,83,6],[68,13,83,10,"len"],[68,19,83,16,"models"],[68,26,83,23,"length"],[68,32,83,6],[68,34,83,31,"i"],[68,38,83,35],[68,39,83,1],[68,41,83,38,"i"],[68,45,83,42,"len"],[68,48,83,1],[68,50,83,47,"i"],[68,53,83,1],[68,55,83,52],[69,0,84,2],[69,10,84,6,"toModel"],[69,20,84,16,"models"],[69,27,84,23,"i"],[69,28,84,16],[69,29,84,2],[70,0,85,2],[70,10,85,6,"node"],[70,17,85,13,"graph"],[70,23,85,19,"toModel"],[70,30,85,13],[70,31,85,2],[72,0,87,2],[72,10,87,6,"node"],[72,15,87,11,"parent"],[72,21,87,6],[72,26,87,22],[72,30,87,2],[72,32,87,28],[73,0,89,3],[74,0,90,3],[76,0,92,2,"conversion"],[76,17,92,13,"toModel"],[76,24,92,2],[76,28,92,24,"wrapConversion"],[76,43,92,39,"toModel"],[76,50,92,24],[76,52,92,48,"graph"],[76,57,92,24],[76,58,92,2],[77,0,93,2],[79,0,95,1],[79,11,95,8,"conversion"],[79,21,95,1],[80,0,96,1],[80,3,78,0]]},"type":"js/module"}]}