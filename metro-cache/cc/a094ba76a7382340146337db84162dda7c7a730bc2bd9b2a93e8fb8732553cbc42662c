{"dependencies":[{"name":"./utils","isAsync":false},{"name":"./buffers","isAsync":false},{"name":"./scheduler","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  'use strict';\n\n  exports.__esModule = true;\n  exports.UNDEFINED_INPUT_ERROR = exports.INVALID_BUFFER = exports.isEnd = exports.END = undefined;\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  exports.emitter = emitter;\n  exports.channel = channel;\n  exports.eventChannel = eventChannel;\n  exports.stdChannel = stdChannel;\n\n  var _utils = _$$_REQUIRE(_dependencyMap[0], './utils');\n\n  var _buffers = _$$_REQUIRE(_dependencyMap[1], './buffers');\n\n  var _scheduler = _$$_REQUIRE(_dependencyMap[2], './scheduler');\n\n  var CHANNEL_END_TYPE = '@@redux-saga/CHANNEL_END';\n  var END = exports.END = {\n    type: CHANNEL_END_TYPE\n  };\n\n  var isEnd = exports.isEnd = function isEnd(a) {\n    return a && a.type === CHANNEL_END_TYPE;\n  };\n\n  function emitter() {\n    var subscribers = [];\n\n    function subscribe(sub) {\n      subscribers.push(sub);\n      return function () {\n        return (0, _utils.remove)(subscribers, sub);\n      };\n    }\n\n    function emit(item) {\n      var arr = subscribers.slice();\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        arr[i](item);\n      }\n    }\n\n    return {\n      subscribe: subscribe,\n      emit: emit\n    };\n  }\n\n  var INVALID_BUFFER = exports.INVALID_BUFFER = 'invalid buffer passed to channel factory function';\n  var UNDEFINED_INPUT_ERROR = exports.UNDEFINED_INPUT_ERROR = 'Saga was provided with an undefined action';\n\n  if (process.env.NODE_ENV !== 'production') {\n    exports.UNDEFINED_INPUT_ERROR = UNDEFINED_INPUT_ERROR += '\\nHints:\\n    - check that your Action Creator returns a non-undefined value\\n    - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners\\n  ';\n  }\n\n  function channel() {\n    var buffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _buffers.buffers.fixed();\n    var closed = false;\n    var takers = [];\n    (0, _utils.check)(buffer, _utils.is.buffer, INVALID_BUFFER);\n\n    function checkForbiddenStates() {\n      if (closed && takers.length) {\n        throw (0, _utils.internalErr)('Cannot have a closed channel with pending takers');\n      }\n\n      if (takers.length && !buffer.isEmpty()) {\n        throw (0, _utils.internalErr)('Cannot have pending takers with non empty buffer');\n      }\n    }\n\n    function put(input) {\n      checkForbiddenStates();\n      (0, _utils.check)(input, _utils.is.notUndef, UNDEFINED_INPUT_ERROR);\n\n      if (closed) {\n        return;\n      }\n\n      if (!takers.length) {\n        return buffer.put(input);\n      }\n\n      for (var i = 0; i < takers.length; i++) {\n        var cb = takers[i];\n\n        if (!cb[_utils.MATCH] || cb[_utils.MATCH](input)) {\n          takers.splice(i, 1);\n          return cb(input);\n        }\n      }\n    }\n\n    function take(cb) {\n      checkForbiddenStates();\n      (0, _utils.check)(cb, _utils.is.func, \"channel.take's callback must be a function\");\n\n      if (closed && buffer.isEmpty()) {\n        cb(END);\n      } else if (!buffer.isEmpty()) {\n        cb(buffer.take());\n      } else {\n        takers.push(cb);\n\n        cb.cancel = function () {\n          return (0, _utils.remove)(takers, cb);\n        };\n      }\n    }\n\n    function flush(cb) {\n      checkForbiddenStates();\n      (0, _utils.check)(cb, _utils.is.func, \"channel.flush' callback must be a function\");\n\n      if (closed && buffer.isEmpty()) {\n        cb(END);\n        return;\n      }\n\n      cb(buffer.flush());\n    }\n\n    function close() {\n      checkForbiddenStates();\n\n      if (!closed) {\n        closed = true;\n\n        if (takers.length) {\n          var arr = takers;\n          takers = [];\n\n          for (var i = 0, len = arr.length; i < len; i++) {\n            arr[i](END);\n          }\n        }\n      }\n    }\n\n    return {\n      take: take,\n      put: put,\n      flush: flush,\n      close: close,\n\n      get __takers__() {\n        return takers;\n      },\n\n      get __closed__() {\n        return closed;\n      }\n\n    };\n  }\n\n  function eventChannel(subscribe) {\n    var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _buffers.buffers.none();\n    var matcher = arguments[2];\n\n    if (arguments.length > 2) {\n      (0, _utils.check)(matcher, _utils.is.func, 'Invalid match function passed to eventChannel');\n    }\n\n    var chan = channel(buffer);\n\n    var close = function close() {\n      if (!chan.__closed__) {\n        if (unsubscribe) {\n          unsubscribe();\n        }\n\n        chan.close();\n      }\n    };\n\n    var unsubscribe = subscribe(function (input) {\n      if (isEnd(input)) {\n        close();\n        return;\n      }\n\n      if (matcher && !matcher(input)) {\n        return;\n      }\n\n      chan.put(input);\n    });\n\n    if (chan.__closed__) {\n      unsubscribe();\n    }\n\n    if (!_utils.is.func(unsubscribe)) {\n      throw new Error('in eventChannel: subscribe should return a function to unsubscribe');\n    }\n\n    return {\n      take: chan.take,\n      flush: chan.flush,\n      close: close\n    };\n  }\n\n  function stdChannel(subscribe) {\n    var chan = eventChannel(function (cb) {\n      return subscribe(function (input) {\n        if (input[_utils.SAGA_ACTION]) {\n          cb(input);\n          return;\n        }\n\n        (0, _scheduler.asap)(function () {\n          return cb(input);\n        });\n      });\n    });\n    return _extends({}, chan, {\n      take: function take(cb, matcher) {\n        if (arguments.length > 1) {\n          (0, _utils.check)(matcher, _utils.is.func, \"channel.take's matcher argument must be a function\");\n          cb[_utils.MATCH] = matcher;\n        }\n\n        chan.take(cb);\n      }\n    });\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"exports"],[4,10,3,8,"__esModule"],[4,20,3,0],[4,23,3,21],[4,27,3,0],[5,0,4,0,"exports"],[5,10,4,8,"UNDEFINED_INPUT_ERROR"],[5,31,4,0],[5,34,4,32,"exports"],[5,42,4,40,"INVALID_BUFFER"],[5,56,4,32],[5,59,4,57,"exports"],[5,67,4,65,"isEnd"],[5,72,4,57],[5,75,4,73,"exports"],[5,83,4,81,"END"],[5,86,4,73],[5,89,4,87,"undefined"],[5,98,4,0],[7,0,6,0],[7,6,6,4,"_extends"],[7,17,6,15,"Object"],[7,24,6,22,"assign"],[7,30,6,15],[7,34,6,32],[7,44,6,42,"target"],[7,50,6,32],[7,52,6,50],[8,0,6,52],[8,9,6,57],[8,13,6,61,"i"],[8,17,6,65],[8,18,6,52],[8,20,6,68,"i"],[8,24,6,72,"arguments"],[8,34,6,82,"length"],[8,40,6,52],[8,42,6,90,"i"],[8,45,6,52],[8,47,6,95],[9,0,6,97],[9,10,6,101,"source"],[9,19,6,110,"arguments"],[9,29,6,120,"i"],[9,30,6,110],[9,31,6,97],[11,0,6,124],[11,11,6,129],[11,15,6,133,"key"],[11,18,6,124],[11,22,6,140,"source"],[11,28,6,124],[11,30,6,148],[12,0,6,150],[12,12,6,154,"Object"],[12,19,6,161,"prototype"],[12,28,6,154],[12,29,6,171,"hasOwnProperty"],[12,43,6,154],[12,44,6,186,"call"],[12,48,6,154],[12,49,6,191,"source"],[12,55,6,154],[12,57,6,199,"key"],[12,60,6,154],[12,61,6,150],[12,63,6,205],[13,0,6,207,"target"],[13,17,6,214,"key"],[13,20,6,207],[13,24,6,221,"source"],[13,31,6,228,"key"],[13,34,6,221],[13,35,6,207],[14,0,6,235],[15,0,6,237],[16,0,6,239],[18,0,6,240],[18,11,6,247,"target"],[18,17,6,240],[19,0,6,256],[19,3,6,0],[21,0,8,0,"exports"],[21,10,8,8,"emitter"],[21,17,8,0],[21,20,8,18,"emitter"],[21,27,8,0],[22,0,9,0,"exports"],[22,10,9,8,"channel"],[22,17,9,0],[22,20,9,18,"channel"],[22,27,9,0],[23,0,10,0,"exports"],[23,10,10,8,"eventChannel"],[23,22,10,0],[23,25,10,23,"eventChannel"],[23,37,10,0],[24,0,11,0,"exports"],[24,10,11,8,"stdChannel"],[24,20,11,0],[24,23,11,21,"stdChannel"],[24,33,11,0],[26,0,13,0],[26,6,13,4,"_utils"],[26,15,13,13,"require"],[26,46,13,21],[26,55,13,13],[26,56,13,0],[28,0,15,0],[28,6,15,4,"_buffers"],[28,17,15,15,"require"],[28,48,15,23],[28,59,15,15],[28,60,15,0],[30,0,17,0],[30,6,17,4,"_scheduler"],[30,19,17,17,"require"],[30,50,17,25],[30,63,17,17],[30,64,17,0],[32,0,19,0],[32,6,19,4,"CHANNEL_END_TYPE"],[32,25,19,23],[32,51,19,0],[33,0,20,0],[33,6,20,4,"END"],[33,12,20,10,"exports"],[33,20,20,18,"END"],[33,23,20,10],[33,26,20,24],[34,0,20,26,"type"],[34,10,20,32,"CHANNEL_END_TYPE"],[35,0,20,24],[35,3,20,0],[37,0,21,0],[37,6,21,4,"isEnd"],[37,14,21,12,"exports"],[37,22,21,20,"isEnd"],[37,27,21,12],[37,30,21,28],[37,39,21,37,"isEnd"],[37,44,21,28],[37,45,21,43,"a"],[37,46,21,28],[37,48,21,46],[38,0,22,2],[38,11,22,9,"a"],[38,16,22,14,"a"],[38,18,22,16,"type"],[38,22,22,14],[38,27,22,25,"CHANNEL_END_TYPE"],[38,43,22,2],[39,0,23,1],[39,3,21,0],[41,0,25,0],[41,11,25,9,"emitter"],[41,18,25,0],[41,21,25,19],[42,0,26,2],[42,8,26,6,"subscribers"],[42,22,26,20],[42,24,26,2],[44,0,28,2],[44,13,28,11,"subscribe"],[44,22,28,2],[44,23,28,21,"sub"],[44,26,28,2],[44,28,28,26],[45,0,29,4,"subscribers"],[45,18,29,16,"push"],[45,22,29,4],[45,23,29,21,"sub"],[45,26,29,4],[46,0,30,4],[46,13,30,11],[46,25,30,23],[47,0,31,6],[47,15,31,13],[47,16,31,14],[47,19,31,17,"_utils"],[47,26,31,24,"remove"],[47,32,31,13],[47,34,31,32,"subscribers"],[47,45,31,13],[47,47,31,45,"sub"],[47,50,31,13],[47,51,31,6],[48,0,32,5],[48,7,30,4],[49,0,33,3],[51,0,35,2],[51,13,35,11,"emit"],[51,17,35,2],[51,18,35,16,"item"],[51,22,35,2],[51,24,35,22],[52,0,36,4],[52,10,36,8,"arr"],[52,16,36,14,"subscribers"],[52,28,36,26,"slice"],[52,33,36,14],[52,35,36,4],[54,0,37,4],[54,11,37,9],[54,15,37,13,"i"],[54,19,37,17],[54,20,37,9],[54,22,37,20,"len"],[54,28,37,26,"arr"],[54,32,37,30,"length"],[54,38,37,4],[54,40,37,38,"i"],[54,44,37,42,"len"],[54,47,37,4],[54,49,37,47,"i"],[54,52,37,4],[54,54,37,52],[55,0,38,6,"arr"],[55,12,38,10,"i"],[55,13,38,6],[55,15,38,13,"item"],[55,19,38,6],[56,0,39,5],[57,0,40,3],[59,0,42,2],[59,11,42,9],[60,0,43,4,"subscribe"],[60,17,43,15,"subscribe"],[60,26,42,9],[61,0,44,4,"emit"],[61,12,44,10,"emit"],[62,0,42,9],[62,5,42,2],[63,0,46,1],[65,0,48,0],[65,6,48,4,"INVALID_BUFFER"],[65,23,48,21,"exports"],[65,31,48,29,"INVALID_BUFFER"],[65,45,48,21],[65,48,48,46],[65,99,48,0],[66,0,49,0],[66,6,49,4,"UNDEFINED_INPUT_ERROR"],[66,30,49,28,"exports"],[66,38,49,36,"UNDEFINED_INPUT_ERROR"],[66,59,49,28],[66,62,49,60],[66,106,49,0],[68,0,51,0],[68,6,51,4,"process"],[68,14,51,12,"env"],[68,17,51,4],[68,18,51,16,"NODE_ENV"],[68,26,51,4],[68,31,51,29],[68,43,51,0],[68,45,51,43],[69,0,52,2,"exports"],[69,12,52,10,"UNDEFINED_INPUT_ERROR"],[69,33,52,2],[69,36,52,34,"UNDEFINED_INPUT_ERROR"],[69,61,52,59],[69,259,52,2],[70,0,53,1],[72,0,55,0],[72,11,55,9,"channel"],[72,18,55,0],[72,21,55,19],[73,0,56,2],[73,8,56,6,"buffer"],[73,17,56,15,"arguments"],[73,27,56,25,"length"],[73,33,56,15],[73,36,56,34],[73,37,56,15],[73,41,56,39,"arguments"],[73,51,56,49],[73,52,56,39],[73,58,56,56,"undefined"],[73,67,56,15],[73,70,56,68,"arguments"],[73,80,56,78],[73,81,56,68],[73,82,56,15],[73,85,56,83,"_buffers"],[73,94,56,92,"buffers"],[73,101,56,83],[73,102,56,100,"fixed"],[73,107,56,83],[73,109,56,2],[74,0,58,2],[74,8,58,6,"closed"],[74,17,58,15],[74,22,58,2],[75,0,59,2],[75,8,59,6,"takers"],[75,17,59,15],[75,19,59,2],[76,0,61,2],[76,5,61,3],[76,8,61,6,"_utils"],[76,15,61,13,"check"],[76,20,61,2],[76,22,61,20,"buffer"],[76,28,61,2],[76,30,61,28,"_utils"],[76,37,61,35,"is"],[76,39,61,28],[76,40,61,38,"buffer"],[76,46,61,2],[76,48,61,46,"INVALID_BUFFER"],[76,62,61,2],[78,0,63,2],[78,13,63,11,"checkForbiddenStates"],[78,33,63,2],[78,36,63,34],[79,0,64,4],[79,10,64,8,"closed"],[79,20,64,18,"takers"],[79,27,64,25,"length"],[79,33,64,4],[79,35,64,33],[80,0,65,6],[80,14,65,12],[80,15,65,13],[80,18,65,16,"_utils"],[80,25,65,23,"internalErr"],[80,36,65,12],[80,38,65,36],[80,88,65,12],[80,89,65,6],[81,0,66,5],[83,0,67,4],[83,10,67,8,"takers"],[83,17,67,15,"length"],[83,23,67,8],[83,27,67,25],[83,28,67,26,"buffer"],[83,35,67,33,"isEmpty"],[83,42,67,26],[83,44,67,4],[83,46,67,44],[84,0,68,6],[84,14,68,12],[84,15,68,13],[84,18,68,16,"_utils"],[84,25,68,23,"internalErr"],[84,36,68,12],[84,38,68,36],[84,88,68,12],[84,89,68,6],[85,0,69,5],[86,0,70,3],[88,0,72,2],[88,13,72,11,"put"],[88,16,72,2],[88,17,72,15,"input"],[88,22,72,2],[88,24,72,22],[89,0,73,4,"checkForbiddenStates"],[90,0,74,4],[90,7,74,5],[90,10,74,8,"_utils"],[90,17,74,15,"check"],[90,22,74,4],[90,24,74,22,"input"],[90,29,74,4],[90,31,74,29,"_utils"],[90,38,74,36,"is"],[90,40,74,29],[90,41,74,39,"notUndef"],[90,49,74,4],[90,51,74,49,"UNDEFINED_INPUT_ERROR"],[90,72,74,4],[92,0,75,4],[92,10,75,8,"closed"],[92,16,75,4],[92,18,75,16],[93,0,76,6],[94,0,77,5],[96,0,78,4],[96,10,78,8],[96,11,78,9,"takers"],[96,18,78,16,"length"],[96,24,78,4],[96,26,78,24],[97,0,79,6],[97,15,79,13,"buffer"],[97,22,79,20,"put"],[97,25,79,13],[97,26,79,24,"input"],[97,31,79,13],[97,32,79,6],[98,0,80,5],[100,0,81,4],[100,11,81,9],[100,15,81,13,"i"],[100,19,81,17],[100,20,81,4],[100,22,81,20,"i"],[100,26,81,24,"takers"],[100,33,81,31,"length"],[100,39,81,4],[100,41,81,39,"i"],[100,44,81,4],[100,46,81,44],[101,0,82,6],[101,12,82,10,"cb"],[101,17,82,15,"takers"],[101,24,82,22,"i"],[101,25,82,15],[101,26,82,6],[103,0,83,6],[103,12,83,10],[103,13,83,11,"cb"],[103,16,83,14,"_utils"],[103,23,83,21,"MATCH"],[103,28,83,11],[103,29,83,10],[103,33,83,31,"cb"],[103,36,83,34,"_utils"],[103,43,83,41,"MATCH"],[103,48,83,31],[103,50,83,48,"input"],[103,55,83,31],[103,56,83,6],[103,58,83,56],[104,0,84,8,"takers"],[104,17,84,15,"splice"],[104,23,84,8],[104,24,84,22,"i"],[104,25,84,8],[104,27,84,25],[104,28,84,8],[105,0,85,8],[105,17,85,15,"cb"],[105,20,85,18,"input"],[105,25,85,15],[105,26,85,8],[106,0,86,7],[107,0,87,5],[108,0,88,3],[110,0,90,2],[110,13,90,11,"take"],[110,17,90,2],[110,18,90,16,"cb"],[110,20,90,2],[110,22,90,20],[111,0,91,4,"checkForbiddenStates"],[112,0,92,4],[112,7,92,5],[112,10,92,8,"_utils"],[112,17,92,15,"check"],[112,22,92,4],[112,24,92,22,"cb"],[112,26,92,4],[112,28,92,26,"_utils"],[112,35,92,33,"is"],[112,37,92,26],[112,38,92,36,"func"],[112,42,92,4],[112,44,92,42],[112,88,92,4],[114,0,94,4],[114,10,94,8,"closed"],[114,20,94,18,"buffer"],[114,27,94,25,"isEmpty"],[114,34,94,18],[114,36,94,4],[114,38,94,36],[115,0,95,6,"cb"],[115,11,95,9,"END"],[115,14,95,6],[116,0,96,5],[116,7,94,4],[116,13,96,11],[116,17,96,15],[116,18,96,16,"buffer"],[116,25,96,23,"isEmpty"],[116,32,96,16],[116,34,96,11],[116,36,96,34],[117,0,97,6,"cb"],[117,11,97,9,"buffer"],[117,18,97,16,"take"],[117,22,97,9],[117,24,97,6],[118,0,98,5],[118,7,96,11],[118,13,98,11],[119,0,99,6,"takers"],[119,15,99,13,"push"],[119,19,99,6],[119,20,99,18,"cb"],[119,22,99,6],[121,0,100,6,"cb"],[121,11,100,9,"cancel"],[121,17,100,6],[121,20,100,18],[121,32,100,30],[122,0,101,8],[122,17,101,15],[122,18,101,16],[122,21,101,19,"_utils"],[122,28,101,26,"remove"],[122,34,101,15],[122,36,101,34,"takers"],[122,42,101,15],[122,44,101,42,"cb"],[122,46,101,15],[122,47,101,8],[123,0,102,7],[123,9,100,6],[124,0,103,5],[125,0,104,3],[127,0,106,2],[127,13,106,11,"flush"],[127,18,106,2],[127,19,106,17,"cb"],[127,21,106,2],[127,23,106,21],[128,0,107,4,"checkForbiddenStates"],[129,0,108,4],[129,7,108,5],[129,10,108,8,"_utils"],[129,17,108,15,"check"],[129,22,108,4],[129,24,108,22,"cb"],[129,26,108,4],[129,28,108,26,"_utils"],[129,35,108,33,"is"],[129,37,108,26],[129,38,108,36,"func"],[129,42,108,4],[129,44,108,42],[129,88,108,4],[131,0,109,4],[131,10,109,8,"closed"],[131,20,109,18,"buffer"],[131,27,109,25,"isEmpty"],[131,34,109,18],[131,36,109,4],[131,38,109,36],[132,0,110,6,"cb"],[132,11,110,9,"END"],[132,14,110,6],[133,0,111,6],[134,0,112,5],[136,0,113,4,"cb"],[136,9,113,7,"buffer"],[136,16,113,14,"flush"],[136,21,113,7],[136,23,113,4],[137,0,114,3],[139,0,116,2],[139,13,116,11,"close"],[139,18,116,2],[139,21,116,19],[140,0,117,4,"checkForbiddenStates"],[142,0,118,4],[142,10,118,8],[142,11,118,9,"closed"],[142,17,118,4],[142,19,118,17],[143,0,119,6,"closed"],[143,17,119,15],[143,21,119,6],[145,0,120,6],[145,12,120,10,"takers"],[145,19,120,17,"length"],[145,25,120,6],[145,27,120,25],[146,0,121,8],[146,14,121,12,"arr"],[146,20,121,18,"takers"],[146,26,121,8],[147,0,122,8,"takers"],[147,19,122,17],[147,21,122,8],[149,0,123,8],[149,15,123,13],[149,19,123,17,"i"],[149,23,123,21],[149,24,123,13],[149,26,123,24,"len"],[149,32,123,30,"arr"],[149,36,123,34,"length"],[149,42,123,8],[149,44,123,42,"i"],[149,48,123,46,"len"],[149,51,123,8],[149,53,123,51,"i"],[149,56,123,8],[149,58,123,56],[150,0,124,10,"arr"],[150,16,124,14,"i"],[150,17,124,10],[150,19,124,17,"END"],[150,22,124,10],[151,0,125,9],[152,0,126,7],[153,0,127,5],[154,0,128,3],[156,0,130,2],[156,11,130,9],[157,0,131,4,"take"],[157,12,131,10,"take"],[157,16,130,9],[158,0,132,4,"put"],[158,11,132,9,"put"],[158,14,130,9],[159,0,133,4,"flush"],[159,13,133,11,"flush"],[159,18,130,9],[160,0,134,4,"close"],[160,13,134,11,"close"],[160,18,130,9],[162,0,135,4],[162,10,135,8,"__takers__"],[162,20,135,4],[162,23,135,21],[163,0,136,6],[163,15,136,13,"takers"],[163,21,136,6],[164,0,137,5],[164,7,130,9],[166,0,138,4],[166,10,138,8,"__closed__"],[166,20,138,4],[166,23,138,21],[167,0,139,6],[167,15,139,13,"closed"],[167,21,139,6],[168,0,140,5],[170,0,130,9],[170,5,130,2],[171,0,142,1],[173,0,144,0],[173,11,144,9,"eventChannel"],[173,23,144,0],[173,24,144,22,"subscribe"],[173,33,144,0],[173,35,144,33],[174,0,145,2],[174,8,145,6,"buffer"],[174,17,145,15,"arguments"],[174,27,145,25,"length"],[174,33,145,15],[174,36,145,34],[174,37,145,15],[174,41,145,39,"arguments"],[174,51,145,49],[174,52,145,39],[174,58,145,56,"undefined"],[174,67,145,15],[174,70,145,68,"arguments"],[174,80,145,78],[174,81,145,68],[174,82,145,15],[174,85,145,83,"_buffers"],[174,94,145,92,"buffers"],[174,101,145,83],[174,102,145,100,"none"],[174,106,145,83],[174,108,145,2],[175,0,146,2],[175,8,146,6,"matcher"],[175,18,146,16,"arguments"],[175,28,146,26],[175,29,146,16],[175,30,146,2],[177,0,152,2],[177,8,152,6,"arguments"],[177,18,152,16,"length"],[177,24,152,6],[177,27,152,25],[177,28,152,2],[177,30,152,28],[178,0,153,4],[178,7,153,5],[178,10,153,8,"_utils"],[178,17,153,15,"check"],[178,22,153,4],[178,24,153,22,"matcher"],[178,31,153,4],[178,33,153,31,"_utils"],[178,40,153,38,"is"],[178,42,153,31],[178,43,153,41,"func"],[178,47,153,4],[178,49,153,47],[178,96,153,4],[179,0,154,3],[181,0,156,2],[181,8,156,6,"chan"],[181,15,156,13,"channel"],[181,23,156,21,"buffer"],[181,29,156,13],[181,30,156,2],[183,0,157,2],[183,8,157,6,"close"],[183,16,157,14],[183,25,157,23,"close"],[183,30,157,14],[183,33,157,31],[184,0,158,4],[184,10,158,8],[184,11,158,9,"chan"],[184,16,158,14,"__closed__"],[184,26,158,4],[184,28,158,26],[185,0,159,6],[185,12,159,10,"unsubscribe"],[185,23,159,6],[185,25,159,23],[186,0,160,8,"unsubscribe"],[187,0,161,7],[189,0,162,6,"chan"],[189,13,162,11,"close"],[189,18,162,6],[190,0,163,5],[191,0,164,3],[191,5,157,2],[193,0,165,2],[193,8,165,6,"unsubscribe"],[193,22,165,20,"subscribe"],[193,32,165,30],[193,42,165,40,"input"],[193,47,165,30],[193,49,165,47],[194,0,166,4],[194,10,166,8,"isEnd"],[194,16,166,14,"input"],[194,21,166,8],[194,22,166,4],[194,24,166,22],[195,0,167,6,"close"],[196,0,168,6],[197,0,169,5],[199,0,170,4],[199,10,170,8,"matcher"],[199,21,170,19],[199,22,170,20,"matcher"],[199,30,170,28,"input"],[199,35,170,20],[199,36,170,4],[199,38,170,36],[200,0,171,6],[201,0,172,5],[203,0,173,4,"chan"],[203,11,173,9,"put"],[203,14,173,4],[203,15,173,13,"input"],[203,20,173,4],[204,0,174,3],[204,5,165,20],[204,6,165,2],[206,0,175,2],[206,8,175,6,"chan"],[206,13,175,11,"__closed__"],[206,23,175,2],[206,25,175,23],[207,0,176,4,"unsubscribe"],[208,0,177,3],[210,0,179,2],[210,8,179,6],[210,9,179,7,"_utils"],[210,16,179,14,"is"],[210,18,179,7],[210,19,179,17,"func"],[210,23,179,7],[210,24,179,22,"unsubscribe"],[210,35,179,7],[210,36,179,2],[210,38,179,36],[211,0,180,4],[211,12,180,10],[211,16,180,14,"Error"],[211,21,180,10],[211,22,180,20],[211,90,180,10],[211,91,180,4],[212,0,181,3],[214,0,183,2],[214,11,183,9],[215,0,184,4,"take"],[215,12,184,10,"chan"],[215,17,184,15,"take"],[215,21,183,9],[216,0,185,4,"flush"],[216,13,185,11,"chan"],[216,18,185,16,"flush"],[216,23,183,9],[217,0,186,4,"close"],[217,13,186,11,"close"],[218,0,183,9],[218,5,183,2],[219,0,188,1],[221,0,190,0],[221,11,190,9,"stdChannel"],[221,21,190,0],[221,22,190,20,"subscribe"],[221,31,190,0],[221,33,190,31],[222,0,191,2],[222,8,191,6,"chan"],[222,15,191,13,"eventChannel"],[222,28,191,26],[222,38,191,36,"cb"],[222,40,191,26],[222,42,191,40],[223,0,192,4],[223,13,192,11,"subscribe"],[223,23,192,21],[223,33,192,31,"input"],[223,38,192,21],[223,40,192,38],[224,0,193,6],[224,12,193,10,"input"],[224,18,193,16,"_utils"],[224,25,193,23,"SAGA_ACTION"],[224,36,193,10],[224,37,193,6],[224,39,193,37],[225,0,194,8,"cb"],[225,13,194,11,"input"],[225,18,194,8],[226,0,195,8],[227,0,196,7],[229,0,197,6],[229,9,197,7],[229,12,197,10,"_scheduler"],[229,23,197,21,"asap"],[229,27,197,6],[229,29,197,27],[229,41,197,39],[230,0,198,8],[230,17,198,15,"cb"],[230,20,198,18,"input"],[230,25,198,15],[230,26,198,8],[231,0,199,7],[231,9,197,6],[232,0,200,5],[232,7,192,11],[232,8,192,4],[233,0,201,3],[233,5,191,13],[233,6,191,2],[234,0,203,2],[234,11,203,9,"_extends"],[234,20,203,18],[234,22,203,9],[234,24,203,22,"chan"],[234,28,203,9],[234,30,203,28],[235,0,204,4,"take"],[235,12,204,10],[235,21,204,19,"take"],[235,25,204,10],[235,26,204,24,"cb"],[235,28,204,10],[235,30,204,28,"matcher"],[235,37,204,10],[235,39,204,37],[236,0,205,6],[236,12,205,10,"arguments"],[236,22,205,20,"length"],[236,28,205,10],[236,31,205,29],[236,32,205,6],[236,34,205,32],[237,0,206,8],[237,11,206,9],[237,14,206,12,"_utils"],[237,21,206,19,"check"],[237,26,206,8],[237,28,206,26,"matcher"],[237,35,206,8],[237,37,206,35,"_utils"],[237,44,206,42,"is"],[237,46,206,35],[237,47,206,45,"func"],[237,51,206,8],[237,53,206,51],[237,105,206,8],[238,0,207,8,"cb"],[238,13,207,11,"_utils"],[238,20,207,18,"MATCH"],[238,25,207,8],[238,29,207,27,"matcher"],[238,36,207,8],[239,0,208,7],[241,0,209,6,"chan"],[241,13,209,11,"take"],[241,17,209,6],[241,18,209,16,"cb"],[241,20,209,6],[242,0,210,5],[243,0,203,28],[243,5,203,9],[243,6,203,2],[244,0,212,1]]},"type":"js/module"}]}