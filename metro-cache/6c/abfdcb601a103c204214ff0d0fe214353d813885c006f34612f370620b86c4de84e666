{"dependencies":[{"name":"../maps/xml.json","isAsync":false},{"name":"../maps/entities.json","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var inverseXML = getInverseObj(_$$_REQUIRE(_dependencyMap[0], \"../maps/xml.json\")),\n      xmlReplacer = getInverseReplacer(inverseXML);\n  exports.XML = getInverse(inverseXML, xmlReplacer);\n  var inverseHTML = getInverseObj(_$$_REQUIRE(_dependencyMap[1], \"../maps/entities.json\")),\n      htmlReplacer = getInverseReplacer(inverseHTML);\n  exports.HTML = getInverse(inverseHTML, htmlReplacer);\n\n  function getInverseObj(obj) {\n    return Object.keys(obj).sort().reduce(function (inverse, name) {\n      inverse[obj[name]] = \"&\" + name + \";\";\n      return inverse;\n    }, {});\n  }\n\n  function getInverseReplacer(inverse) {\n    var single = [],\n        multiple = [];\n    Object.keys(inverse).forEach(function (k) {\n      if (k.length === 1) {\n        single.push(\"\\\\\" + k);\n      } else {\n        multiple.push(k);\n      }\n    });\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n  }\n\n  var re_nonASCII = /[^\\0-\\x7F]/g,\n      re_astralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\n  function singleCharReplacer(c) {\n    return \"&#x\" + c.charCodeAt(0).toString(16).toUpperCase() + \";\";\n  }\n\n  function astralReplacer(c) {\n    var high = c.charCodeAt(0);\n    var low = c.charCodeAt(1);\n    var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n    return \"&#x\" + codePoint.toString(16).toUpperCase() + \";\";\n  }\n\n  function getInverse(inverse, re) {\n    function func(name) {\n      return inverse[name];\n    }\n\n    return function (data) {\n      return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);\n    };\n  }\n\n  var re_xmlChars = getInverseReplacer(inverseXML);\n\n  function escapeXML(data) {\n    return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);\n  }\n\n  exports.escape = escapeXML;\n});","map":[[2,0,1,0],[2,6,1,4,"inverseXML"],[2,19,1,17,"getInverseObj"],[2,33,1,31,"require"],[2,64,1,39],[2,82,1,31],[2,83,1,17],[2,84,1,0],[3,0,1,0],[3,6,2,4,"xmlReplacer"],[3,20,2,18,"getInverseReplacer"],[3,39,2,37,"inverseXML"],[3,49,2,18],[3,50,1,0],[4,0,4,0,"exports"],[4,10,4,8,"XML"],[4,13,4,0],[4,16,4,14,"getInverse"],[4,27,4,25,"inverseXML"],[4,37,4,14],[4,39,4,37,"xmlReplacer"],[4,50,4,14],[4,51,4,0],[5,0,6,0],[5,6,6,4,"inverseHTML"],[5,20,6,18,"getInverseObj"],[5,34,6,32,"require"],[5,65,6,40],[5,88,6,32],[5,89,6,18],[5,90,6,0],[6,0,6,0],[6,6,7,4,"htmlReplacer"],[6,21,7,19,"getInverseReplacer"],[6,40,7,38,"inverseHTML"],[6,51,7,19],[6,52,6,0],[7,0,9,0,"exports"],[7,10,9,8,"HTML"],[7,14,9,0],[7,17,9,15,"getInverse"],[7,28,9,26,"inverseHTML"],[7,39,9,15],[7,41,9,39,"htmlReplacer"],[7,53,9,15],[7,54,9,0],[9,0,11,0],[9,11,11,9,"getInverseObj"],[9,24,11,0],[9,25,11,23,"obj"],[9,28,11,0],[9,30,11,28],[10,0,12,4],[10,11,12,11,"Object"],[10,18,12,18,"keys"],[10,22,12,11],[10,23,12,23,"obj"],[10,26,12,11],[10,28,13,9,"sort"],[10,32,12,11],[10,35,14,9,"reduce"],[10,41,12,11],[10,42,14,16],[10,52,14,25,"inverse"],[10,59,14,16],[10,61,14,34,"name"],[10,65,14,16],[10,67,14,40],[11,0,15,12,"inverse"],[11,14,15,20,"obj"],[11,18,15,24,"name"],[11,22,15,20],[11,23,15,12],[11,27,15,33],[11,33,15,39,"name"],[11,37,15,33],[11,40,15,46],[11,43,15,12],[12,0,16,12],[12,13,16,19,"inverse"],[12,20,16,12],[13,0,17,9],[13,5,12,11],[13,7,17,11],[13,9,12,11],[13,10,12,4],[14,0,18,1],[16,0,20,0],[16,11,20,9,"getInverseReplacer"],[16,29,20,0],[16,30,20,28,"inverse"],[16,37,20,0],[16,39,20,37],[17,0,21,4],[17,8,21,8,"single"],[17,17,21,17],[17,19,21,4],[18,0,21,4],[18,8,22,8,"multiple"],[18,19,22,19],[18,21,21,4],[19,0,24,4,"Object"],[19,11,24,11,"keys"],[19,15,24,4],[19,16,24,16,"inverse"],[19,23,24,4],[19,25,24,25,"forEach"],[19,32,24,4],[19,33,24,33],[19,43,24,42,"k"],[19,44,24,33],[19,46,24,45],[20,0,25,8],[20,10,25,12,"k"],[20,12,25,14,"length"],[20,18,25,12],[20,23,25,25],[20,24,25,8],[20,26,25,28],[21,0,26,12,"single"],[21,15,26,19,"push"],[21,19,26,12],[21,20,26,24],[21,27,26,31,"k"],[21,28,26,12],[22,0,27,9],[22,7,25,8],[22,13,27,15],[23,0,28,12,"multiple"],[23,17,28,21,"push"],[23,21,28,12],[23,22,28,26,"k"],[23,23,28,12],[24,0,29,9],[25,0,30,5],[25,5,24,4],[26,0,33,4,"multiple"],[26,13,33,13,"unshift"],[26,20,33,4],[26,21,33,21],[26,27,33,27,"single"],[26,34,33,34,"join"],[26,38,33,27],[26,39,33,39],[26,41,33,27],[26,42,33,21],[26,45,33,45],[26,48,33,4],[27,0,35,4],[27,11,35,11],[27,15,35,15,"RegExp"],[27,21,35,11],[27,22,35,22,"multiple"],[27,31,35,31,"join"],[27,35,35,22],[27,36,35,36],[27,39,35,22],[27,40,35,11],[27,42,35,42],[27,45,35,11],[27,46,35,4],[28,0,36,1],[30,0,38,0],[30,6,38,4,"re_nonASCII"],[30,20,38,18],[30,33,38,0],[31,0,38,0],[31,6,39,4,"re_astralSymbols"],[31,25,39,23],[31,58,38,0],[33,0,41,0],[33,11,41,9,"singleCharReplacer"],[33,29,41,0],[33,30,41,28,"c"],[33,31,41,0],[33,33,41,31],[34,0,42,4],[34,11,43,8],[34,19,44,8,"c"],[34,21,45,13,"charCodeAt"],[34,31,44,8],[34,32,45,24],[34,33,44,8],[34,35,46,13,"toString"],[34,43,44,8],[34,44,46,22],[34,46,44,8],[34,48,47,13,"toUpperCase"],[34,59,44,8],[34,61,43,8],[34,64,48,8],[34,67,42,4],[35,0,50,1],[37,0,52,0],[37,11,52,9,"astralReplacer"],[37,25,52,0],[37,26,52,24,"c"],[37,27,52,0],[37,29,52,27],[38,0,54,4],[38,8,54,8,"high"],[38,15,54,15,"c"],[38,17,54,17,"charCodeAt"],[38,27,54,15],[38,28,54,28],[38,29,54,15],[38,30,54,4],[39,0,55,4],[39,8,55,8,"low"],[39,14,55,14,"c"],[39,16,55,16,"charCodeAt"],[39,26,55,14],[39,27,55,27],[39,28,55,14],[39,29,55,4],[40,0,56,4],[40,8,56,8,"codePoint"],[40,20,56,20],[40,21,56,21,"high"],[40,28,56,28],[40,34,56,20],[40,38,56,38],[40,43,56,20],[40,46,56,46,"low"],[40,49,56,20],[40,52,56,52],[40,58,56,20],[40,61,56,61],[40,68,56,4],[41,0,57,4],[41,11,57,11],[41,19,57,19,"codePoint"],[41,29,57,29,"toString"],[41,37,57,19],[41,38,57,38],[41,40,57,19],[41,42,57,42,"toUpperCase"],[41,53,57,19],[41,55,57,11],[41,58,57,58],[41,61,57,4],[42,0,58,1],[44,0,60,0],[44,11,60,9,"getInverse"],[44,21,60,0],[44,22,60,20,"inverse"],[44,29,60,0],[44,31,60,29,"re"],[44,33,60,0],[44,35,60,33],[45,0,61,4],[45,13,61,13,"func"],[45,17,61,4],[45,18,61,18,"name"],[45,22,61,4],[45,24,61,24],[46,0,62,8],[46,13,62,15,"inverse"],[46,21,62,23,"name"],[46,25,62,15],[46,26,62,8],[47,0,63,5],[49,0,65,4],[49,11,65,11],[49,21,65,20,"data"],[49,25,65,11],[49,27,65,26],[50,0,66,8],[50,13,66,15,"data"],[50,18,67,13,"replace"],[50,25,66,15],[50,26,67,21,"re"],[50,28,66,15],[50,30,67,25,"func"],[50,34,66,15],[50,36,68,13,"replace"],[50,43,66,15],[50,44,68,21,"re_astralSymbols"],[50,60,66,15],[50,62,68,39,"astralReplacer"],[50,76,66,15],[50,78,69,13,"replace"],[50,85,66,15],[50,86,69,21,"re_nonASCII"],[50,97,66,15],[50,99,69,34,"singleCharReplacer"],[50,117,66,15],[50,118,66,8],[51,0,70,5],[51,5,65,4],[52,0,71,1],[54,0,73,0],[54,6,73,4,"re_xmlChars"],[54,20,73,18,"getInverseReplacer"],[54,39,73,37,"inverseXML"],[54,49,73,18],[54,50,73,0],[56,0,75,0],[56,11,75,9,"escapeXML"],[56,20,75,0],[56,21,75,19,"data"],[56,25,75,0],[56,27,75,25],[57,0,76,4],[57,11,76,11,"data"],[57,16,77,9,"replace"],[57,23,76,11],[57,24,77,17,"re_xmlChars"],[57,35,76,11],[57,37,77,30,"singleCharReplacer"],[57,55,76,11],[57,57,78,9,"replace"],[57,64,76,11],[57,65,78,17,"re_astralSymbols"],[57,81,76,11],[57,83,78,35,"astralReplacer"],[57,97,76,11],[57,99,79,9,"replace"],[57,106,76,11],[57,107,79,17,"re_nonASCII"],[57,118,76,11],[57,120,79,30,"singleCharReplacer"],[57,138,76,11],[57,139,76,4],[58,0,80,1],[60,0,82,0,"exports"],[60,10,82,8,"escape"],[60,16,82,0],[60,19,82,17,"escapeXML"],[60,28,82,0]]},"type":"js/module"}]}