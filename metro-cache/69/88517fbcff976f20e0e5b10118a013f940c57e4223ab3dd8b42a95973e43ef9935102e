{"dependencies":[{"name":"react-native","isAsync":false},{"name":"../utils/uuid","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[0], \"react-native\");\n\n  var _uuid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../utils/uuid\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  var RNFetchBlob = _reactNative.NativeModules.RNFetchBlob;\n  var emitter = _reactNative.DeviceEventEmitter;\n\n  var RNFetchBlobReadStream = function () {\n    function RNFetchBlobReadStream(path, encoding, bufferSize, tick) {\n      var _this = this;\n\n      _classCallCheck(this, RNFetchBlobReadStream);\n\n      this.tick = 10;\n      if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');\n      this.encoding = encoding || 'utf8';\n      this.bufferSize = bufferSize;\n      this.path = path;\n      this.closed = false;\n      this.tick = tick;\n\n      this._onData = function () {};\n\n      this._onEnd = function () {};\n\n      this._onError = function () {};\n\n      this.streamId = 'RNFBRS' + (0, _uuid.default)();\n      var subscription = emitter.addListener(this.streamId, function (e) {\n        var event = e.event,\n            code = e.code,\n            detail = e.detail;\n\n        if (_this._onData && event === 'data') {\n          _this._onData(detail);\n\n          return;\n        } else if (_this._onEnd && event === 'end') {\n          _this._onEnd(detail);\n        } else {\n          var err = new Error(detail);\n          err.code = code || 'EUNSPECIFIED';\n          if (_this._onError) _this._onError(err);else throw err;\n        }\n\n        if (event === 'error' || event === 'end') {\n          subscription.remove();\n          _this.closed = true;\n        }\n      });\n    }\n\n    _createClass(RNFetchBlobReadStream, [{\n      key: \"open\",\n      value: function open() {\n        if (!this.closed) RNFetchBlob.readStream(this.path, this.encoding, this.bufferSize || 10240, this.tick || -1, this.streamId);else throw new Error('Stream closed');\n      }\n    }, {\n      key: \"onData\",\n      value: function onData(fn) {\n        this._onData = fn;\n      }\n    }, {\n      key: \"onError\",\n      value: function onError(fn) {\n        this._onError = fn;\n      }\n    }, {\n      key: \"onEnd\",\n      value: function onEnd(fn) {\n        this._onEnd = fn;\n      }\n    }]);\n\n    return RNFetchBlobReadStream;\n  }();\n\n  exports.default = RNFetchBlobReadStream;\n});","map":[[7,0,5,0],[9,0,10,0],[19,0,12,0],[19,6,12,6,"RNFetchBlob"],[19,20,12,20,"NativeModules"],[19,47,12,34,"RNFetchBlob"],[19,58,12,0],[20,0,13,0],[20,6,13,6,"emitter"],[20,16,13,16,"DeviceEventEmitter"],[20,47,13,0],[22,6,15,21,"RNFetchBlobReadStream"],[22,27],[23,0,23,2],[23,35,23,14,"path"],[23,39,23,2],[23,41,23,27,"encoding"],[23,49,23,2],[23,51,23,44,"bufferSize"],[23,61,23,2],[23,63,23,65,"tick"],[23,67,23,2],[23,69,23,78],[24,0,23,78],[26,0,23,78],[28,0,23,78],[28,11,21,2,"tick"],[28,15,23,78],[28,18,21,18],[28,20,23,78],[29,0,24,4],[29,10,24,7],[29,11,24,8,"path"],[29,15,24,4],[29,17,25,6],[29,23,25,12,"Error"],[29,29,25,18],[29,87,25,12],[29,88,25,6],[30,0,26,4],[30,11,26,9,"encoding"],[30,19,26,4],[30,22,26,20,"encoding"],[30,34,26,32],[30,40,26,4],[31,0,27,4],[31,11,27,9,"bufferSize"],[31,21,27,4],[31,24,27,22,"bufferSize"],[31,34,27,4],[32,0,28,4],[32,11,28,9,"path"],[32,15,28,4],[32,18,28,16,"path"],[32,22,28,4],[33,0,29,4],[33,11,29,9,"closed"],[33,17,29,4],[33,20,29,18],[33,25,29,4],[34,0,30,4],[34,11,30,9,"tick"],[34,15,30,4],[34,18,30,16,"tick"],[34,22,30,4],[36,0,31,4],[36,11,31,9,"_onData"],[36,18,31,4],[36,21,31,19],[36,33,31,25],[36,34,31,27],[36,35,31,4],[38,0,32,4],[38,11,32,9,"_onEnd"],[38,17,32,4],[38,20,32,18],[38,32,32,24],[38,33,32,26],[38,34,32,4],[40,0,33,4],[40,11,33,9,"_onError"],[40,19,33,4],[40,22,33,20],[40,34,33,26],[40,35,33,28],[40,36,33,4],[42,0,34,4],[42,11,34,9,"streamId"],[42,19,34,4],[42,22,34,20],[42,33,34,30],[42,53,34,4],[43,0,37,4],[43,10,37,8,"subscription"],[43,25,37,23,"emitter"],[43,33,37,31,"addListener"],[43,44,37,23],[43,45,37,43],[43,50,37,48,"streamId"],[43,58,37,23],[43,60,37,58],[43,70,37,59,"e"],[43,71,37,58],[43,73,37,65],[44,0,37,65],[44,12,38,11,"event"],[44,17,37,65],[44,20,38,34,"e"],[44,21,37,65],[44,22,38,11,"event"],[44,27,37,65],[45,0,37,65],[45,12,38,18,"code"],[45,16,37,65],[45,19,38,34,"e"],[45,20,37,65],[45,21,38,18,"code"],[45,25,37,65],[46,0,37,65],[46,12,38,24,"detail"],[46,18,37,65],[46,21,38,34,"e"],[46,22,37,65],[46,23,38,24,"detail"],[46,29,37,65],[48,0,39,6],[48,12,39,9],[48,18,39,14,"_onData"],[48,25,39,9],[48,29,39,25,"event"],[48,39,39,35],[48,45,39,6],[48,47,39,43],[49,0,40,8],[49,16,40,13,"_onData"],[49,23,40,8],[49,24,40,21,"detail"],[49,30,40,8],[51,0,41,8],[52,0,42,7],[52,9,39,6],[52,15,43,11],[52,19,43,15],[52,25,43,20,"_onEnd"],[52,31,43,15],[52,35,43,30,"event"],[52,45,43,40],[52,50,43,11],[52,52,43,47],[53,0,44,8],[53,16,44,13,"_onEnd"],[53,22,44,8],[53,23,44,20,"detail"],[53,29,44,8],[54,0,45,7],[54,9,43,11],[54,15,46,11],[55,0,47,8],[55,14,47,14,"err"],[55,20,47,20],[55,24,47,24,"Error"],[55,29,47,20],[55,30,47,30,"detail"],[55,36,47,20],[55,37,47,8],[56,0,48,8,"err"],[56,14,48,12,"code"],[56,18,48,8],[56,21,48,19,"code"],[56,29,48,27],[56,43,48,8],[57,0,49,8],[57,14,49,11],[57,20,49,16,"_onError"],[57,28,49,8],[57,30,50,10],[57,36,50,15,"_onError"],[57,44,50,10],[57,45,50,24,"err"],[57,48,50,10],[57,50,49,8],[57,55,52,10],[57,61,52,16,"err"],[57,64,52,10],[58,0,53,7],[60,0,55,6],[60,12,55,10,"event"],[60,22,55,20],[60,29,55,10],[60,33,55,31,"event"],[60,43,55,41],[60,48,55,6],[60,50,55,48],[61,0,56,8,"subscription"],[61,23,56,21,"remove"],[61,29,56,8],[62,0,57,8],[62,16,57,13,"closed"],[62,22,57,8],[62,25,57,22],[62,29,57,8],[63,0,58,7],[64,0,59,5],[64,7,37,23],[64,8,37,4],[65,0,61,3],[69,29,63,9],[70,0,64,4],[70,12,64,7],[70,13,64,8],[70,18,64,13,"closed"],[70,24,64,4],[70,26,65,6,"RNFetchBlob"],[70,38,65,18,"readStream"],[70,48,65,6],[70,49,65,29],[70,54,65,34,"path"],[70,58,65,6],[70,60,65,40],[70,65,65,45,"encoding"],[70,73,65,6],[70,75,65,55],[70,80,65,60,"bufferSize"],[70,90,65,55],[70,94,65,74],[70,99,65,6],[70,101,65,82],[70,106,65,87,"tick"],[70,110,65,82],[70,114,65,95],[70,115,65,96],[70,116,65,6],[70,118,65,99],[70,123,65,104,"streamId"],[70,131,65,6],[70,133,64,4],[70,138,67,6],[70,144,67,12],[70,148,67,16,"Error"],[70,153,67,12],[70,154,67,22],[70,169,67,12],[70,170,67,6],[71,0,68,3],[74,29,70,9,"fn"],[74,31],[74,33,70,24],[75,0,71,4],[75,13,71,9,"_onData"],[75,20,71,4],[75,23,71,19,"fn"],[75,25,71,4],[76,0,72,3],[79,30,74,10,"fn"],[79,32],[79,34,74,14],[80,0,75,4],[80,13,75,9,"_onError"],[80,21,75,4],[80,24,75,20,"fn"],[80,26,75,4],[81,0,76,3],[84,28,78,9,"fn"],[84,30],[84,32,78,13],[85,0,79,4],[85,13,79,9,"_onEnd"],[85,19,79,4],[85,22,79,18,"fn"],[85,24,79,4],[86,0,80,3]]},"type":"js/module"}]}