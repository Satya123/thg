{"dependencies":[{"name":"path-to-regexp","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.matchPath = void 0;\n\n  var _pathToRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"path-to-regexp\"));\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  var compilePathToRegex = function compilePathToRegex(path) {\n    var keys = [];\n    var re = (0, _pathToRegexp.default)(path, keys);\n    return {\n      re: re,\n      keys: keys\n    };\n  };\n\n  var matchPath = function matchPath(path, url) {\n    var _url$split = url.split('?'),\n        _url$split2 = _slicedToArray(_url$split, 1),\n        urlCleaned = _url$split2[0];\n\n    var urlToMatch = !urlCleaned.endsWith('/') ? urlCleaned + \"/\" : urlCleaned;\n\n    var _compilePathToRegex = compilePathToRegex(path),\n        re = _compilePathToRegex.re,\n        keys = _compilePathToRegex.keys;\n\n    var match = re.exec(urlToMatch);\n\n    if (!match) {\n      return null;\n    }\n\n    var _match = _toArray(match),\n        compiledUrl = _match[0],\n        values = _match.slice(1);\n\n    if (urlToMatch !== compiledUrl) {\n      return null;\n    }\n\n    var params = keys.reduce(function (acc, key, index) {\n      return _extends({}, acc, _defineProperty({}, key.name, values[index]));\n    }, {});\n    return {\n      path: path,\n      params: params\n    };\n  };\n\n  exports.matchPath = matchPath;\n\n  var pathParser = function pathParser(url) {\n    var possibleMatchingpaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return possibleMatchingpaths.map(function (path) {\n      return matchPath(path, url);\n    }).find(function (obj) {\n      return obj;\n    });\n  };\n\n  var _default = pathParser;\n  exports.default = _default;\n});","map":[[7,0,1,0],[27,0,33,0],[27,6,33,6,"compilePathToRegex"],[27,27,33,27],[27,36,33,6,"compilePathToRegex"],[27,54,33,27],[27,55,33,28,"path"],[27,59,33,27],[27,61,33,37],[28,0,34,2],[28,8,34,8,"keys"],[28,15,34,15],[28,17,34,2],[29,0,35,2],[29,8,35,8,"re"],[29,13,35,13],[29,40,35,26,"path"],[29,44,35,13],[29,46,35,32,"keys"],[29,50,35,13],[29,51,35,2],[30,0,38,2],[30,11,38,9],[31,0,38,11,"re"],[31,12,38,9],[32,0,38,15,"keys"],[33,0,38,9],[33,5,38,2],[34,0,39,1],[34,3,33,0],[36,0,67,7],[36,6,67,13,"matchPath"],[36,18,67,25],[36,27,67,13,"matchPath"],[36,36,67,25],[36,37,67,26,"path"],[36,41,67,25],[36,43,67,32,"url"],[36,46,67,25],[36,48,67,40],[37,0,67,40],[37,21,70,23,"url"],[37,25,70,27,"split"],[37,30,70,23],[37,31,70,33],[37,34,70,23],[37,35,67,40],[38,0,67,40],[39,0,67,40],[39,8,70,9,"urlCleaned"],[39,18,67,40],[41,0,73,2],[41,8,73,8,"urlToMatch"],[41,21,73,21],[41,22,73,22,"urlCleaned"],[41,33,73,33,"endsWith"],[41,41,73,22],[41,42,73,42],[41,45,73,22],[41,46,73,21],[41,49,73,52,"urlCleaned"],[41,59,73,21],[41,68,73,68,"urlCleaned"],[41,78,73,2],[43,0,67,40],[43,30,76,23,"compilePathToRegex"],[43,49,76,42,"path"],[43,53,76,23],[43,54,67,40],[44,0,67,40],[44,8,76,10,"re"],[44,10,67,40],[44,33,76,10,"re"],[44,35,67,40],[45,0,67,40],[45,8,76,14,"keys"],[45,12,67,40],[45,35,76,14,"keys"],[45,39,67,40],[47,0,79,2],[47,8,79,8,"match"],[47,16,79,16,"re"],[47,19,79,19,"exec"],[47,23,79,16],[47,24,79,24,"urlToMatch"],[47,34,79,16],[47,35,79,2],[49,0,82,2],[49,8,82,6],[49,9,82,7,"match"],[49,14,82,2],[49,16,82,14],[50,0,83,4],[50,13,83,11],[50,17,83,4],[51,0,84,3],[53,0,67,40],[53,26,88,35,"match"],[53,31,67,40],[54,0,67,40],[54,8,88,9,"compiledUrl"],[54,19,67,40],[55,0,67,40],[55,8,88,25,"values"],[55,14,67,40],[57,0,92,2],[57,8,92,6,"urlToMatch"],[57,23,92,21,"compiledUrl"],[57,34,92,2],[57,36,92,34],[58,0,93,4],[58,13,93,11],[58,17,93,4],[59,0,94,3],[61,0,96,2],[61,8,96,8,"params"],[61,17,96,17,"keys"],[61,22,96,22,"reduce"],[61,28,96,17],[61,29,96,29],[61,39,96,30,"acc"],[61,42,96,29],[61,44,96,35,"key"],[61,47,96,29],[61,49,96,40,"index"],[61,54,96,29],[62,0,96,29],[62,13,96,50],[62,22,96,64],[62,24,96,50],[62,26,96,68,"acc"],[62,29,96,50],[62,51,96,76,"key"],[62,55,96,80,"name"],[62,59,96,50],[62,61,96,87,"values"],[62,68,96,94,"index"],[62,73,96,87],[62,74,96,50],[62,76,96,29],[63,0,96,29],[63,5,96,17],[63,7,96,105],[63,9,96,17],[63,10,96,2],[64,0,98,2],[64,11,98,9],[65,0,98,11,"path"],[65,16,98,9],[66,0,98,17,"params"],[67,0,98,9],[67,5,98,2],[68,0,99,1],[68,3,67,7],[72,0,111,0],[72,6,111,6,"pathParser"],[72,19,111,19],[72,28,111,6,"pathParser"],[72,38,111,19],[72,39,111,20,"url"],[72,42,111,19],[73,0,111,19],[73,8,111,25,"possibleMatchingpaths"],[73,29,111,19],[73,100,111,49],[73,102,111,19],[74,0,111,19],[74,11,111,56,"possibleMatchingpaths"],[74,33,111,78,"map"],[74,36,111,56],[74,37,111,82],[75,0,111,82],[75,13,111,90,"matchPath"],[75,23,111,100,"path"],[75,27,111,90],[75,29,111,106,"url"],[75,32,111,90],[75,33,111,82],[76,0,111,82],[76,5,111,56],[76,7,111,112,"find"],[76,11,111,56],[76,12,111,117],[77,0,111,117],[77,13,111,124,"obj"],[77,16,111,117],[78,0,111,117],[78,5,111,56],[78,6,111,19],[79,0,111,19],[79,3,111,0],[81,17,113,15,"pathParser"],[81,27]]},"type":"js/module"}]}