{"dependencies":[{"name":"react","isAsync":false},{"name":"./../react-transform-hmr/lib/index.js","isAsync":false},{"name":"prop-types","isAsync":false},{"name":"react-native","isAsync":false},{"name":"./Shapes/Arc","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../react-transform-hmr/lib/index.js\"));\n\n  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"prop-types\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[3], \"react-native\");\n\n  var _Arc = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./Shapes/Arc\"));\n\n  var _class,\n      _temp,\n      _jsxFileName = \"/var/www/html/thg/node_modules/react-native-progress/CircleSnail.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  var _components = {\n    CircleSnail: {\n      displayName: \"CircleSnail\"\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/var/www/html/thg/node_modules/react-native-progress/CircleSnail.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var AnimatedArc = _reactNative.Animated.createAnimatedComponent(_Arc.default);\n\n  var MIN_ARC_ANGLE = 0.1;\n  var MAX_ARC_ANGLE = 1.5 * Math.PI;\n\n  var CircleSnail = _wrapComponent(\"CircleSnail\")((_temp = _class = function (_Component) {\n    function CircleSnail(props) {\n      var _this;\n\n      _classCallCheck(this, CircleSnail);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(CircleSnail).call(this, props));\n      _this.state = {\n        startAngle: new _reactNative.Animated.Value(-MIN_ARC_ANGLE),\n        endAngle: new _reactNative.Animated.Value(0),\n        rotation: new _reactNative.Animated.Value(0),\n        colorIndex: 0\n      };\n      return _this;\n    }\n\n    _createClass(CircleSnail, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this.props.animating) {\n          this.animate();\n          this.spin();\n        }\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(props) {\n        if (props.animating !== this.props.animating) {\n          if (props.animating) {\n            this.animate();\n            this.spin();\n          } else {\n            this.stopAnimations();\n          }\n        }\n      }\n    }, {\n      key: \"animate\",\n      value: function animate() {\n        var _this2 = this;\n\n        var iteration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.startAngle, {\n          toValue: -MAX_ARC_ANGLE * iteration - MIN_ARC_ANGLE,\n          duration: this.props.duration || 1000,\n          isInteraction: false,\n          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad)\n        }), _reactNative.Animated.timing(this.state.endAngle, {\n          toValue: -MAX_ARC_ANGLE * iteration,\n          duration: this.props.duration || 1000,\n          isInteraction: false,\n          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad)\n        })]).start(function (endState) {\n          if (endState.finished) {\n            if (Array.isArray(_this2.props.color)) {\n              _this2.setState({\n                colorIndex: iteration % _this2.props.color.length\n              });\n            }\n\n            _this2.animate(iteration + 1);\n          }\n        });\n      }\n    }, {\n      key: \"spin\",\n      value: function spin() {\n        var _this3 = this;\n\n        _reactNative.Animated.timing(this.state.rotation, {\n          toValue: 1,\n          duration: this.props.spinDuration || 5000,\n          easing: _reactNative.Easing.linear,\n          isInteraction: false\n        }).start(function (endState) {\n          if (endState.finished) {\n            _this3.state.rotation.setValue(0);\n\n            _this3.spin();\n          }\n        });\n      }\n    }, {\n      key: \"stopAnimations\",\n      value: function stopAnimations() {\n        this.state.startAngle.stopAnimation();\n        this.state.endAngle.stopAnimation();\n        this.state.rotation.stopAnimation();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            animating = _this$props.animating,\n            children = _this$props.children,\n            color = _this$props.color,\n            direction = _this$props.direction,\n            hidesWhenStopped = _this$props.hidesWhenStopped,\n            size = _this$props.size,\n            style = _this$props.style,\n            thickness = _this$props.thickness,\n            strokeCap = _this$props.strokeCap,\n            restProps = _objectWithoutProperties(_this$props, [\"animating\", \"children\", \"color\", \"direction\", \"hidesWhenStopped\", \"size\", \"style\", \"thickness\", \"strokeCap\"]);\n\n        if (!animating && hidesWhenStopped) {\n          return null;\n        }\n\n        var radius = size / 2 - thickness;\n        var offset = {\n          top: thickness,\n          left: thickness\n        };\n        var directionFactor = direction === 'counter-clockwise' ? -1 : 1;\n        return _react.default.createElement(_reactNative.Animated.View, _extends({}, restProps, {\n          style: [style, {\n            backgroundColor: 'transparent',\n            overflow: 'hidden',\n            transform: [{\n              rotate: this.state.rotation.interpolate({\n                inputRange: [0, 1],\n                outputRange: ['0deg', directionFactor * 360 + \"deg\"]\n              })\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          }\n        }), _react.default.createElement(_reactNative.ART.Surface, {\n          width: size,\n          height: size,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          }\n        }, _react.default.createElement(AnimatedArc, {\n          direction: direction === 'counter-clockwise' ? 'clockwise' : 'counter-clockwise',\n          radius: radius,\n          stroke: Array.isArray(color) ? color[this.state.colorIndex] : color,\n          offset: offset,\n          startAngle: this.state.startAngle,\n          endAngle: this.state.endAngle,\n          strokeCap: strokeCap,\n          strokeWidth: thickness,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          }\n        })), children);\n      }\n    }]);\n\n    _inherits(CircleSnail, _Component);\n\n    return CircleSnail;\n  }(_react.Component), _class.propTypes = {\n    animating: _propTypes.default.bool,\n    color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),\n    children: _propTypes.default.node,\n    direction: _propTypes.default.oneOf(['clockwise', 'counter-clockwise']),\n    duration: _propTypes.default.number,\n    hidesWhenStopped: _propTypes.default.bool,\n    size: _propTypes.default.number,\n    spinDuration: _propTypes.default.number,\n    style: _propTypes.default.any,\n    thickness: _propTypes.default.number,\n    strokeCap: _propTypes.default.string\n  }, _class.defaultProps = {\n    animating: true,\n    color: 'rgba(0, 122, 255, 1)',\n    direction: 'counter-clockwise',\n    hidesWhenStopped: false,\n    size: 40,\n    thickness: 3,\n    strokeCap: 'round'\n  }, _temp));\n\n  var _default2 = CircleSnail;\n  exports.default = _default2;\n});","map":[[7,0,1,0],[11,0,2,0],[13,0,3,0],[15,0,5,0],[64,0,7,0],[64,6,7,6,"AnimatedArc"],[64,20,7,20,"Animated"],[64,42,7,29,"createAnimatedComponent"],[64,65,7,20],[64,66,7,53,"Arc"],[64,78,7,20],[64,79,7,0],[66,0,9,0],[66,6,9,6,"MIN_ARC_ANGLE"],[66,22,9,22],[66,25,9,0],[67,0,10,0],[67,6,10,6,"MAX_ARC_ANGLE"],[67,22,10,22],[67,28,10,28,"Math"],[67,33,10,33,"PI"],[67,35,10,0],[70,0,40,2],[70,25,40,14,"props"],[70,30,40,2],[70,32,40,21],[71,0,40,21],[73,0,40,21],[75,0,41,4],[75,87,41,10,"props"],[75,92,41,4],[76,0,43,4],[76,12,43,9,"state"],[76,17,43,4],[76,20,43,17],[77,0,44,6,"startAngle"],[77,20,44,18],[77,24,44,22,"Animated"],[77,46,44,31,"Value"],[77,51,44,18],[77,52,44,37],[77,53,44,38,"MIN_ARC_ANGLE"],[77,66,44,18],[77,67,43,17],[78,0,45,6,"endAngle"],[78,18,45,16],[78,22,45,20,"Animated"],[78,44,45,29,"Value"],[78,49,45,16],[78,50,45,35],[78,51,45,16],[78,52,43,17],[79,0,46,6,"rotation"],[79,18,46,16],[79,22,46,20,"Animated"],[79,44,46,29,"Value"],[79,49,46,16],[79,50,46,35],[79,51,46,16],[79,52,43,17],[80,0,47,6,"colorIndex"],[80,20,47,18],[81,0,43,17],[81,7,43,4],[82,0,40,21],[83,0,49,3],[87,42,51,22],[88,0,52,4],[88,12,52,8],[88,17,52,13,"props"],[88,22,52,8],[88,23,52,19,"animating"],[88,32,52,4],[88,34,52,30],[89,0,53,6],[89,15,53,11,"animate"],[89,22,53,6],[90,0,54,6],[90,15,54,11,"spin"],[90,19,54,6],[91,0,55,5],[92,0,56,3],[95,48,58,28,"props"],[95,53],[95,55,58,35],[96,0,59,4],[96,12,59,8,"props"],[96,18,59,14,"animating"],[96,27,59,8],[96,32,59,28],[96,37,59,33,"props"],[96,42,59,28],[96,43,59,39,"animating"],[96,52,59,4],[96,54,59,50],[97,0,60,6],[97,14,60,10,"props"],[97,20,60,16,"animating"],[97,29,60,6],[97,31,60,27],[98,0,61,8],[98,17,61,13,"animate"],[98,24,61,8],[99,0,62,8],[99,17,62,13,"spin"],[99,21,62,8],[100,0,63,7],[100,11,60,6],[100,17,63,13],[101,0,64,8],[101,17,64,13,"stopAnimations"],[101,31,64,8],[102,0,65,7],[103,0,66,5],[104,0,67,3],[107,32,69,25],[108,0,69,25],[110,0,69,25],[110,12,69,10,"iteration"],[110,21,69,25],[110,92,69,22],[110,93,69,25],[112,0,70,4,"Animated"],[112,30,70,13,"sequence"],[112,38,70,4],[112,39,70,22],[112,40,71,6,"Animated"],[112,62,71,15,"timing"],[112,68,71,6],[112,69,71,22],[112,74,71,27,"state"],[112,79,71,22],[112,80,71,33,"startAngle"],[112,90,71,6],[112,92,71,45],[113,0,72,8,"toValue"],[113,19,72,17],[113,20,72,18,"MAX_ARC_ANGLE"],[113,33,72,17],[113,36,72,34,"iteration"],[113,45,72,17],[113,48,72,46,"MIN_ARC_ANGLE"],[113,61,71,45],[114,0,73,8,"duration"],[114,20,73,18],[114,25,73,23,"props"],[114,30,73,18],[114,31,73,29,"duration"],[114,39,73,18],[114,43,73,41],[114,47,71,45],[115,0,74,8,"isInteraction"],[115,25,74,23],[115,30,71,45],[116,0,75,8,"easing"],[116,18,75,16,"Easing"],[116,38,75,23,"inOut"],[116,43,75,16],[116,44,75,29,"Easing"],[116,64,75,36,"quad"],[116,68,75,16],[117,0,71,45],[117,9,71,6],[117,10,70,22],[117,12,77,6,"Animated"],[117,34,77,15,"timing"],[117,40,77,6],[117,41,77,22],[117,46,77,27,"state"],[117,51,77,22],[117,52,77,33,"endAngle"],[117,60,77,6],[117,62,77,43],[118,0,78,8,"toValue"],[118,19,78,17],[118,20,78,18,"MAX_ARC_ANGLE"],[118,33,78,17],[118,36,78,34,"iteration"],[118,45,77,43],[119,0,79,8,"duration"],[119,20,79,18],[119,25,79,23,"props"],[119,30,79,18],[119,31,79,29,"duration"],[119,39,79,18],[119,43,79,41],[119,47,77,43],[120,0,80,8,"isInteraction"],[120,25,80,23],[120,30,77,43],[121,0,81,8,"easing"],[121,18,81,16,"Easing"],[121,38,81,23,"inOut"],[121,43,81,16],[121,44,81,29,"Easing"],[121,64,81,36,"quad"],[121,68,81,16],[122,0,77,43],[122,9,77,6],[122,10,70,22],[122,11,70,4],[122,13,83,7,"start"],[122,18,70,4],[122,19,83,13],[122,39,83,25],[123,0,84,6],[123,14,84,10,"endState"],[123,23,84,19,"finished"],[123,31,84,6],[123,33,84,29],[124,0,85,8],[124,16,85,12,"Array"],[124,22,85,18,"isArray"],[124,29,85,12],[124,30,85,26],[124,37,85,31,"props"],[124,42,85,26],[124,43,85,37,"color"],[124,48,85,12],[124,49,85,8],[124,51,85,45],[125,0,86,10],[125,21,86,15,"setState"],[125,29,86,10],[125,30,86,24],[126,0,87,12,"colorIndex"],[126,28,87,24,"iteration"],[126,40,87,36],[126,47,87,41,"props"],[126,52,87,36],[126,53,87,47,"color"],[126,58,87,36],[126,59,87,53,"length"],[127,0,86,24],[127,15,86,10],[128,0,89,9],[130,0,90,8],[130,19,90,13,"animate"],[130,26,90,8],[130,27,90,21,"iteration"],[130,39,90,33],[130,40,90,8],[131,0,91,7],[132,0,92,5],[132,9,70,4],[133,0,93,3],[136,29,95,9],[137,0,95,9],[139,0,96,4,"Animated"],[139,30,96,13,"timing"],[139,36,96,4],[139,37,96,20],[139,42,96,25,"state"],[139,47,96,20],[139,48,96,31,"rotation"],[139,56,96,4],[139,58,96,41],[140,0,97,6,"toValue"],[140,19,97,15],[140,20,96,41],[141,0,98,6,"duration"],[141,20,98,16],[141,25,98,21,"props"],[141,30,98,16],[141,31,98,27,"spinDuration"],[141,43,98,16],[141,47,98,43],[141,51,96,41],[142,0,99,6,"easing"],[142,18,99,14,"Easing"],[142,38,99,21,"linear"],[142,44,96,41],[143,0,100,6,"isInteraction"],[143,25,100,21],[144,0,96,41],[144,9,96,4],[144,11,101,7,"start"],[144,16,96,4],[144,17,101,13],[144,37,101,25],[145,0,102,6],[145,14,102,10,"endState"],[145,23,102,19,"finished"],[145,31,102,6],[145,33,102,29],[146,0,103,8],[146,19,103,13,"state"],[146,24,103,8],[146,25,103,19,"rotation"],[146,33,103,8],[146,34,103,28,"setValue"],[146,42,103,8],[146,43,103,37],[146,44,103,8],[148,0,104,8],[148,19,104,13,"spin"],[148,23,104,8],[149,0,105,7],[150,0,106,5],[150,9,96,4],[151,0,107,3],[154,39,109,19],[155,0,110,4],[155,13,110,9,"state"],[155,18,110,4],[155,19,110,15,"startAngle"],[155,29,110,4],[155,30,110,26,"stopAnimation"],[155,43,110,4],[156,0,111,4],[156,13,111,9,"state"],[156,18,111,4],[156,19,111,15,"endAngle"],[156,27,111,4],[156,28,111,24,"stopAnimation"],[156,41,111,4],[157,0,112,4],[157,13,112,9,"state"],[157,18,112,4],[157,19,112,15,"rotation"],[157,27,112,4],[157,28,112,24,"stopAnimation"],[157,41,112,4],[158,0,113,3],[161,31,115,11],[162,0,115,11],[162,26,127,8],[162,31,127,13,"props"],[162,36,115,11],[163,0,115,11],[163,12,117,6,"animating"],[163,21,115,11],[163,36,117,6,"animating"],[163,45,115,11],[164,0,115,11],[164,12,118,6,"children"],[164,20,115,11],[164,35,118,6,"children"],[164,43,115,11],[165,0,115,11],[165,12,119,6,"color"],[165,17,115,11],[165,32,119,6,"color"],[165,37,115,11],[166,0,115,11],[166,12,120,6,"direction"],[166,21,115,11],[166,36,120,6,"direction"],[166,45,115,11],[167,0,115,11],[167,12,121,6,"hidesWhenStopped"],[167,28,115,11],[167,43,121,6,"hidesWhenStopped"],[167,59,115,11],[168,0,115,11],[168,12,122,6,"size"],[168,16,115,11],[168,31,122,6,"size"],[168,35,115,11],[169,0,115,11],[169,12,123,6,"style"],[169,17,115,11],[169,32,123,6,"style"],[169,37,115,11],[170,0,115,11],[170,12,124,6,"thickness"],[170,21,115,11],[170,36,124,6,"thickness"],[170,45,115,11],[171,0,115,11],[171,12,125,6,"strokeCap"],[171,21,115,11],[171,36,125,6,"strokeCap"],[171,45,115,11],[172,0,115,11],[172,12,126,9,"restProps"],[172,21,115,11],[174,0,129,4],[174,12,129,8],[174,13,129,9,"animating"],[174,22,129,8],[174,26,129,22,"hidesWhenStopped"],[174,42,129,4],[174,44,129,40],[175,0,130,6],[175,17,130,13],[175,21,130,6],[176,0,131,5],[178,0,133,4],[178,12,133,10,"radius"],[178,21,133,19,"size"],[178,28,133,26],[178,29,133,19],[178,32,133,30,"thickness"],[178,41,133,4],[179,0,134,4],[179,12,134,10,"offset"],[179,21,134,19],[180,0,135,6,"top"],[180,15,135,11,"thickness"],[180,24,134,19],[181,0,136,6,"left"],[181,16,136,12,"thickness"],[182,0,134,19],[182,9,134,4],[183,0,139,4],[183,12,139,10,"directionFactor"],[183,30,139,28,"direction"],[183,44,139,42],[183,63,139,28],[183,66,139,64],[183,67,139,65],[183,68,139,28],[183,71,139,69],[183,72,139,4],[184,0,141,4],[184,15,142,6],[184,44,142,7],[184,65,142,6],[184,66,142,16],[184,70,142,6],[184,85,143,12,"restProps"],[184,94,142,6],[185,0,144,8],[185,17,144,15],[185,18,145,10,"style"],[185,23,144,15],[185,25,146,10],[186,0,147,12,"backgroundColor"],[186,29,147,29],[186,42,146,10],[187,0,148,12,"overflow"],[187,22,148,22],[187,30,146,10],[188,0,149,12,"transform"],[188,23,149,23],[188,24,150,14],[189,0,151,16,"rotate"],[189,22,151,24],[189,27,151,29,"state"],[189,32,151,24],[189,33,151,35,"rotation"],[189,41,151,24],[189,42,151,44,"interpolate"],[189,53,151,24],[189,54,151,56],[190,0,152,18,"inputRange"],[190,28,152,30],[190,29,152,31],[190,30,152,30],[190,32,152,34],[190,33,152,30],[190,34,151,56],[191,0,153,18,"outputRange"],[191,29,153,31],[191,30,153,32],[191,36,153,31],[191,38,153,43,"directionFactor"],[191,56,153,61],[191,59,153,31],[192,0,151,56],[192,15,151,24],[193,0,150,14],[193,13,149,23],[194,0,146,10],[194,11,144,15],[194,12,142,6],[195,0,142,6],[196,0,142,6],[197,0,142,6],[198,0,142,6],[199,0,142,6],[199,12,160,8],[199,41,160,9],[199,57,160,8],[199,58,160,13],[199,65,160,8],[200,0,160,21],[200,17,160,28,"size"],[200,21,160,8],[201,0,160,34],[201,18,160,42,"size"],[201,22,160,8],[202,0,160,8],[203,0,160,8],[204,0,160,8],[205,0,160,8],[206,0,160,8],[206,11,161,10],[206,40,161,11],[206,51,161,10],[207,0,162,12],[207,21,163,14,"direction"],[207,35,163,28],[207,54,163,14],[207,57,164,18],[207,68,163,14],[207,71,165,18],[207,90,161,10],[208,0,167,12],[208,18,167,20,"radius"],[208,24,161,10],[209,0,168,12],[209,18,168,20,"Array"],[209,24,168,26,"isArray"],[209,31,168,20],[209,32,168,34,"color"],[209,37,168,20],[209,41,168,43,"color"],[209,47,168,49],[209,52,168,54,"state"],[209,57,168,49],[209,58,168,60,"colorIndex"],[209,68,168,43],[209,69,168,20],[209,72,168,74,"color"],[209,77,161,10],[210,0,169,12],[210,18,169,20,"offset"],[210,24,161,10],[211,0,170,12],[211,22,170,24],[211,27,170,29,"state"],[211,32,170,24],[211,33,170,35,"startAngle"],[211,43,161,10],[212,0,171,12],[212,20,171,22],[212,25,171,27,"state"],[212,30,171,22],[212,31,171,33,"endAngle"],[212,39,161,10],[213,0,172,12],[213,21,172,23,"strokeCap"],[213,30,161,10],[214,0,173,12],[214,23,173,25,"thickness"],[214,32,161,10],[215,0,161,10],[216,0,161,10],[217,0,161,10],[218,0,161,10],[219,0,161,10],[219,10,160,8],[219,11,142,6],[219,13,176,9,"children"],[219,21,142,6],[219,22,141,4],[220,0,179,3],[226,4,12,41,"Component"],[226,20],[226,30,13,9,"propTypes"],[226,39],[226,42,13,21],[227,0,14,4,"animating"],[227,15,14,15,"PropTypes"],[227,34,14,25,"bool"],[227,38,13,21],[228,0,15,4,"color"],[228,11,15,11,"PropTypes"],[228,30,15,21,"oneOfType"],[228,39,15,11],[228,40,15,31],[228,41,16,6,"PropTypes"],[228,60,16,16,"string"],[228,66,15,31],[228,68,17,6,"PropTypes"],[228,87,17,16,"arrayOf"],[228,94,17,6],[228,95,17,24,"PropTypes"],[228,114,17,34,"string"],[228,120,17,6],[228,121,15,31],[228,122,15,11],[228,123,13,21],[229,0,19,4,"children"],[229,14,19,14,"PropTypes"],[229,33,19,24,"node"],[229,37,13,21],[230,0,20,4,"direction"],[230,15,20,15,"PropTypes"],[230,34,20,25,"oneOf"],[230,39,20,15],[230,40,20,31],[230,41,20,32],[230,52,20,31],[230,54,20,45],[230,73,20,31],[230,74,20,15],[230,75,13,21],[231,0,21,4,"duration"],[231,14,21,14,"PropTypes"],[231,33,21,24,"number"],[231,39,13,21],[232,0,22,4,"hidesWhenStopped"],[232,22,22,22,"PropTypes"],[232,41,22,32,"bool"],[232,45,13,21],[233,0,23,4,"size"],[233,10,23,10,"PropTypes"],[233,29,23,20,"number"],[233,35,13,21],[234,0,24,4,"spinDuration"],[234,18,24,18,"PropTypes"],[234,37,24,28,"number"],[234,43,13,21],[235,0,25,4,"style"],[235,11,25,11,"PropTypes"],[235,30,25,21,"any"],[235,33,13,21],[236,0,26,4,"thickness"],[236,15,26,15,"PropTypes"],[236,34,26,25,"number"],[236,40,13,21],[237,0,27,4,"strokeCap"],[237,15,27,15,"PropTypes"],[237,34,27,25,"string"],[238,0,13,21],[238,3],[238,12,30,9,"defaultProps"],[238,24],[238,27,30,24],[239,0,31,4,"animating"],[239,15,31,15],[239,19,30,24],[240,0,32,4,"color"],[240,11,32,11],[240,33,30,24],[241,0,33,4,"direction"],[241,15,33,15],[241,34,30,24],[242,0,34,4,"hidesWhenStopped"],[242,22,34,22],[242,27,30,24],[243,0,35,4,"size"],[243,10,35,10],[243,12,30,24],[244,0,36,4,"thickness"],[244,15,36,15],[244,16,30,24],[245,0,37,4,"strokeCap"],[245,15,37,15],[246,0,30,24],[246,3]]},"type":"js/module"}]}