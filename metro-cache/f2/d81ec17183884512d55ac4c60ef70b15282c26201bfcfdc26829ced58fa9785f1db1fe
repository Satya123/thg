{"dependencies":[{"name":"./_composeArgs","isAsync":false},{"name":"./_composeArgsRight","isAsync":false},{"name":"./_countHolders","isAsync":false},{"name":"./_createCtor","isAsync":false},{"name":"./_createRecurry","isAsync":false},{"name":"./_getHolder","isAsync":false},{"name":"./_reorder","isAsync":false},{"name":"./_replaceHolders","isAsync":false},{"name":"./_root","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var composeArgs = _$$_REQUIRE(_dependencyMap[0], './_composeArgs'),\n      composeArgsRight = _$$_REQUIRE(_dependencyMap[1], './_composeArgsRight'),\n      countHolders = _$$_REQUIRE(_dependencyMap[2], './_countHolders'),\n      createCtor = _$$_REQUIRE(_dependencyMap[3], './_createCtor'),\n      createRecurry = _$$_REQUIRE(_dependencyMap[4], './_createRecurry'),\n      getHolder = _$$_REQUIRE(_dependencyMap[5], './_getHolder'),\n      reorder = _$$_REQUIRE(_dependencyMap[6], './_reorder'),\n      replaceHolders = _$$_REQUIRE(_dependencyMap[7], './_replaceHolders'),\n      root = _$$_REQUIRE(_dependencyMap[8], './_root');\n\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_ARY_FLAG = 128,\n      WRAP_FLIP_FLAG = 512;\n\n  function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n    var isAry = bitmask & WRAP_ARY_FLAG,\n        isBind = bitmask & WRAP_BIND_FLAG,\n        isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n        isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n        isFlip = bitmask & WRAP_FLIP_FLAG,\n        Ctor = isBindKey ? undefined : createCtor(func);\n\n    function wrapper() {\n      var length = arguments.length,\n          args = Array(length),\n          index = length;\n\n      while (index--) {\n        args[index] = arguments[index];\n      }\n\n      if (isCurried) {\n        var placeholder = getHolder(wrapper),\n            holdersCount = countHolders(args, placeholder);\n      }\n\n      if (partials) {\n        args = composeArgs(args, partials, holders, isCurried);\n      }\n\n      if (partialsRight) {\n        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n      }\n\n      length -= holdersCount;\n\n      if (isCurried && length < arity) {\n        var newHolders = replaceHolders(args, placeholder);\n        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);\n      }\n\n      var thisBinding = isBind ? thisArg : this,\n          fn = isBindKey ? thisBinding[func] : func;\n      length = args.length;\n\n      if (argPos) {\n        args = reorder(args, argPos);\n      } else if (isFlip && length > 1) {\n        args.reverse();\n      }\n\n      if (isAry && ary < length) {\n        args.length = ary;\n      }\n\n      if (this && this !== root && this instanceof wrapper) {\n        fn = Ctor || createCtor(fn);\n      }\n\n      return fn.apply(thisBinding, args);\n    }\n\n    return wrapper;\n  }\n\n  module.exports = createHybrid;\n});","map":[[2,0,1,0],[2,6,1,4,"composeArgs"],[2,20,1,18,"require"],[2,51,1,26],[2,67,1,18],[2,68,1,0],[3,0,1,0],[3,6,2,4,"composeArgsRight"],[3,25,2,23,"require"],[3,56,2,31],[3,77,2,23],[3,78,1,0],[4,0,1,0],[4,6,3,4,"countHolders"],[4,21,3,19,"require"],[4,52,3,27],[4,69,3,19],[4,70,1,0],[5,0,1,0],[5,6,4,4,"createCtor"],[5,19,4,17,"require"],[5,50,4,25],[5,65,4,17],[5,66,1,0],[6,0,1,0],[6,6,5,4,"createRecurry"],[6,22,5,20,"require"],[6,53,5,28],[6,71,5,20],[6,72,1,0],[7,0,1,0],[7,6,6,4,"getHolder"],[7,18,6,16,"require"],[7,49,6,24],[7,63,6,16],[7,64,1,0],[8,0,1,0],[8,6,7,4,"reorder"],[8,16,7,14,"require"],[8,47,7,22],[8,59,7,14],[8,60,1,0],[9,0,1,0],[9,6,8,4,"replaceHolders"],[9,23,8,21,"require"],[9,54,8,29],[9,73,8,21],[9,74,1,0],[10,0,1,0],[10,6,9,4,"root"],[10,13,9,11,"require"],[10,44,9,19],[10,53,9,11],[10,54,1,0],[12,0,12,0],[12,6,12,4,"WRAP_BIND_FLAG"],[12,23,12,21],[12,24,12,0],[13,0,12,0],[13,6,13,4,"WRAP_BIND_KEY_FLAG"],[13,27,13,25],[13,28,12,0],[14,0,12,0],[14,6,14,4,"WRAP_CURRY_FLAG"],[14,24,14,22],[14,25,12,0],[15,0,12,0],[15,6,15,4,"WRAP_CURRY_RIGHT_FLAG"],[15,30,15,28],[15,32,12,0],[16,0,12,0],[16,6,16,4,"WRAP_ARY_FLAG"],[16,22,16,20],[16,25,12,0],[17,0,12,0],[17,6,17,4,"WRAP_FLIP_FLAG"],[17,23,17,21],[17,26,12,0],[19,0,38,0],[19,11,38,9,"createHybrid"],[19,23,38,0],[19,24,38,22,"func"],[19,28,38,0],[19,30,38,28,"bitmask"],[19,37,38,0],[19,39,38,37,"thisArg"],[19,46,38,0],[19,48,38,46,"partials"],[19,56,38,0],[19,58,38,56,"holders"],[19,65,38,0],[19,67,38,65,"partialsRight"],[19,80,38,0],[19,82,38,80,"holdersRight"],[19,94,38,0],[19,96,38,94,"argPos"],[19,102,38,0],[19,104,38,102,"ary"],[19,107,38,0],[19,109,38,107,"arity"],[19,114,38,0],[19,116,38,114],[20,0,39,2],[20,8,39,6,"isAry"],[20,16,39,14,"bitmask"],[20,26,39,24,"WRAP_ARY_FLAG"],[20,39,39,2],[21,0,39,2],[21,8,40,6,"isBind"],[21,17,40,15,"bitmask"],[21,27,40,25,"WRAP_BIND_FLAG"],[21,41,39,2],[22,0,39,2],[22,8,41,6,"isBindKey"],[22,20,41,18,"bitmask"],[22,30,41,28,"WRAP_BIND_KEY_FLAG"],[22,48,39,2],[23,0,39,2],[23,8,42,6,"isCurried"],[23,20,42,18,"bitmask"],[23,31,42,29,"WRAP_CURRY_FLAG"],[23,49,42,47,"WRAP_CURRY_RIGHT_FLAG"],[23,70,42,18],[23,71,39,2],[24,0,39,2],[24,8,43,6,"isFlip"],[24,17,43,15,"bitmask"],[24,27,43,25,"WRAP_FLIP_FLAG"],[24,41,39,2],[25,0,39,2],[25,8,44,6,"Ctor"],[25,15,44,13,"isBindKey"],[25,27,44,25,"undefined"],[25,36,44,13],[25,39,44,37,"createCtor"],[25,50,44,48,"func"],[25,54,44,37],[25,55,39,2],[27,0,46,2],[27,13,46,11,"wrapper"],[27,20,46,2],[27,23,46,21],[28,0,47,4],[28,10,47,8,"length"],[28,19,47,17,"arguments"],[28,29,47,27,"length"],[28,35,47,4],[29,0,47,4],[29,10,48,8,"args"],[29,17,48,15,"Array"],[29,23,48,21,"length"],[29,29,48,15],[29,30,47,4],[30,0,47,4],[30,10,49,8,"index"],[30,18,49,16,"length"],[30,24,47,4],[32,0,51,4],[32,13,51,11,"index"],[32,20,51,4],[32,22,51,20],[33,0,52,6,"args"],[33,13,52,11,"index"],[33,18,52,6],[33,22,52,20,"arguments"],[33,32,52,30,"index"],[33,37,52,20],[33,38,52,6],[34,0,53,5],[36,0,54,4],[36,10,54,8,"isCurried"],[36,19,54,4],[36,21,54,19],[37,0,55,6],[37,12,55,10,"placeholder"],[37,26,55,24,"getHolder"],[37,36,55,34,"wrapper"],[37,43,55,24],[37,44,55,6],[38,0,55,6],[38,12,56,10,"holdersCount"],[38,27,56,25,"countHolders"],[38,40,56,38,"args"],[38,44,56,25],[38,46,56,44,"placeholder"],[38,57,56,25],[38,58,55,6],[39,0,57,5],[41,0,58,4],[41,10,58,8,"partials"],[41,18,58,4],[41,20,58,18],[42,0,59,6,"args"],[42,15,59,13,"composeArgs"],[42,27,59,25,"args"],[42,31,59,13],[42,33,59,31,"partials"],[42,41,59,13],[42,43,59,41,"holders"],[42,50,59,13],[42,52,59,50,"isCurried"],[42,61,59,13],[42,62,59,6],[43,0,60,5],[45,0,61,4],[45,10,61,8,"partialsRight"],[45,23,61,4],[45,25,61,23],[46,0,62,6,"args"],[46,15,62,13,"composeArgsRight"],[46,32,62,30,"args"],[46,36,62,13],[46,38,62,36,"partialsRight"],[46,51,62,13],[46,53,62,51,"holdersRight"],[46,65,62,13],[46,67,62,65,"isCurried"],[46,76,62,13],[46,77,62,6],[47,0,63,5],[49,0,64,4,"length"],[49,16,64,14,"holdersCount"],[49,28,64,4],[51,0,65,4],[51,10,65,8,"isCurried"],[51,23,65,21,"length"],[51,32,65,30,"arity"],[51,37,65,4],[51,39,65,37],[52,0,66,6],[52,12,66,10,"newHolders"],[52,25,66,23,"replaceHolders"],[52,40,66,38,"args"],[52,44,66,23],[52,46,66,44,"placeholder"],[52,57,66,23],[52,58,66,6],[53,0,67,6],[53,15,67,13,"createRecurry"],[53,29,68,8,"func"],[53,33,67,13],[53,35,68,14,"bitmask"],[53,42,67,13],[53,44,68,23,"createHybrid"],[53,56,67,13],[53,58,68,37,"wrapper"],[53,66,68,45,"placeholder"],[53,77,67,13],[53,79,68,58,"thisArg"],[53,86,67,13],[53,88,69,8,"args"],[53,92,67,13],[53,94,69,14,"newHolders"],[53,104,67,13],[53,106,69,26,"argPos"],[53,112,67,13],[53,114,69,34,"ary"],[53,117,67,13],[53,119,69,39,"arity"],[53,127,69,47,"length"],[53,133,67,13],[53,134,67,6],[54,0,71,5],[56,0,72,4],[56,10,72,8,"thisBinding"],[56,24,72,22,"isBind"],[56,33,72,31,"thisArg"],[56,40,72,22],[56,43,72,41],[56,47,72,4],[57,0,72,4],[57,10,73,8,"fn"],[57,15,73,13,"isBindKey"],[57,27,73,25,"thisBinding"],[57,39,73,37,"func"],[57,43,73,25],[57,44,73,13],[57,47,73,45,"func"],[57,51,72,4],[58,0,75,4,"length"],[58,15,75,13,"args"],[58,20,75,18,"length"],[58,26,75,4],[60,0,76,4],[60,10,76,8,"argPos"],[60,16,76,4],[60,18,76,16],[61,0,77,6,"args"],[61,15,77,13,"reorder"],[61,23,77,21,"args"],[61,27,77,13],[61,29,77,27,"argPos"],[61,35,77,13],[61,36,77,6],[62,0,78,5],[62,7,76,4],[62,13,78,11],[62,17,78,15,"isFlip"],[62,27,78,25,"length"],[62,36,78,34],[62,37,78,11],[62,39,78,37],[63,0,79,6,"args"],[63,13,79,11,"reverse"],[63,20,79,6],[64,0,80,5],[66,0,81,4],[66,10,81,8,"isAry"],[66,19,81,17,"ary"],[66,25,81,23,"length"],[66,31,81,4],[66,33,81,31],[67,0,82,6,"args"],[67,13,82,11,"length"],[67,19,82,6],[67,22,82,20,"ary"],[67,25,82,6],[68,0,83,5],[70,0,84,4],[70,10,84,8],[70,18,84,16],[70,27,84,25,"root"],[70,31,84,8],[70,35,84,33],[70,51,84,49,"wrapper"],[70,58,84,4],[70,60,84,58],[71,0,85,6,"fn"],[71,13,85,11,"Ctor"],[71,21,85,19,"createCtor"],[71,32,85,30,"fn"],[71,34,85,19],[71,35,85,6],[72,0,86,5],[74,0,87,4],[74,13,87,11,"fn"],[74,16,87,14,"apply"],[74,21,87,11],[74,22,87,20,"thisBinding"],[74,33,87,11],[74,35,87,33,"args"],[74,39,87,11],[74,40,87,4],[75,0,88,3],[77,0,89,2],[77,11,89,9,"wrapper"],[77,18,89,2],[78,0,90,1],[80,0,92,0,"module"],[80,9,92,7,"exports"],[80,16,92,0],[80,19,92,17,"createHybrid"],[80,31,92,0]]},"type":"js/module"}]}