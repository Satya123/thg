{"dependencies":[{"name":"./_baseSetData","isAsync":false},{"name":"./_createBind","isAsync":false},{"name":"./_createCurry","isAsync":false},{"name":"./_createHybrid","isAsync":false},{"name":"./_createPartial","isAsync":false},{"name":"./_getData","isAsync":false},{"name":"./_mergeData","isAsync":false},{"name":"./_setData","isAsync":false},{"name":"./_setWrapToString","isAsync":false},{"name":"./toInteger","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var baseSetData = _$$_REQUIRE(_dependencyMap[0], './_baseSetData'),\n      createBind = _$$_REQUIRE(_dependencyMap[1], './_createBind'),\n      createCurry = _$$_REQUIRE(_dependencyMap[2], './_createCurry'),\n      createHybrid = _$$_REQUIRE(_dependencyMap[3], './_createHybrid'),\n      createPartial = _$$_REQUIRE(_dependencyMap[4], './_createPartial'),\n      getData = _$$_REQUIRE(_dependencyMap[5], './_getData'),\n      mergeData = _$$_REQUIRE(_dependencyMap[6], './_mergeData'),\n      setData = _$$_REQUIRE(_dependencyMap[7], './_setData'),\n      setWrapToString = _$$_REQUIRE(_dependencyMap[8], './_setWrapToString'),\n      toInteger = _$$_REQUIRE(_dependencyMap[9], './toInteger');\n\n  var FUNC_ERROR_TEXT = 'Expected a function';\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64;\n  var nativeMax = Math.max;\n\n  function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n\n    if (!isBindKey && typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    var length = partials ? partials.length : 0;\n\n    if (!length) {\n      bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n      partials = holders = undefined;\n    }\n\n    ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n    arity = arity === undefined ? arity : toInteger(arity);\n    length -= holders ? holders.length : 0;\n\n    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n      var partialsRight = partials,\n          holdersRight = holders;\n      partials = holders = undefined;\n    }\n\n    var data = isBindKey ? undefined : getData(func);\n    var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n    if (data) {\n      mergeData(newData, data);\n    }\n\n    func = newData[0];\n    bitmask = newData[1];\n    thisArg = newData[2];\n    partials = newData[3];\n    holders = newData[4];\n    arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);\n\n    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n      bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n    }\n\n    if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n      var result = createBind(func, bitmask, thisArg);\n    } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n      result = createCurry(func, bitmask, arity);\n    } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n      result = createPartial(func, bitmask, thisArg, partials);\n    } else {\n      result = createHybrid.apply(undefined, newData);\n    }\n\n    var setter = data ? baseSetData : setData;\n    return setWrapToString(setter(result, newData), func, bitmask);\n  }\n\n  module.exports = createWrap;\n});","map":[[2,0,1,0],[2,6,1,4,"baseSetData"],[2,20,1,18,"require"],[2,51,1,26],[2,67,1,18],[2,68,1,0],[3,0,1,0],[3,6,2,4,"createBind"],[3,19,2,17,"require"],[3,50,2,25],[3,65,2,17],[3,66,1,0],[4,0,1,0],[4,6,3,4,"createCurry"],[4,20,3,18,"require"],[4,51,3,26],[4,67,3,18],[4,68,1,0],[5,0,1,0],[5,6,4,4,"createHybrid"],[5,21,4,19,"require"],[5,52,4,27],[5,69,4,19],[5,70,1,0],[6,0,1,0],[6,6,5,4,"createPartial"],[6,22,5,20,"require"],[6,53,5,28],[6,71,5,20],[6,72,1,0],[7,0,1,0],[7,6,6,4,"getData"],[7,16,6,14,"require"],[7,47,6,22],[7,59,6,14],[7,60,1,0],[8,0,1,0],[8,6,7,4,"mergeData"],[8,18,7,16,"require"],[8,49,7,24],[8,63,7,16],[8,64,1,0],[9,0,1,0],[9,6,8,4,"setData"],[9,16,8,14,"require"],[9,47,8,22],[9,59,8,14],[9,60,1,0],[10,0,1,0],[10,6,9,4,"setWrapToString"],[10,24,9,22,"require"],[10,55,9,30],[10,75,9,22],[10,76,1,0],[11,0,1,0],[11,6,10,4,"toInteger"],[11,18,10,16,"require"],[11,49,10,24],[11,62,10,16],[11,63,1,0],[13,0,13,0],[13,6,13,4,"FUNC_ERROR_TEXT"],[13,24,13,22],[13,45,13,0],[14,0,16,0],[14,6,16,4,"WRAP_BIND_FLAG"],[14,23,16,21],[14,24,16,0],[15,0,16,0],[15,6,17,4,"WRAP_BIND_KEY_FLAG"],[15,27,17,25],[15,28,16,0],[16,0,16,0],[16,6,18,4,"WRAP_CURRY_FLAG"],[16,24,18,22],[16,25,16,0],[17,0,16,0],[17,6,19,4,"WRAP_CURRY_RIGHT_FLAG"],[17,30,19,28],[17,32,16,0],[18,0,16,0],[18,6,20,4,"WRAP_PARTIAL_FLAG"],[18,26,20,24],[18,28,16,0],[19,0,16,0],[19,6,21,4,"WRAP_PARTIAL_RIGHT_FLAG"],[19,32,21,30],[19,34,16,0],[20,0,24,0],[20,6,24,4,"nativeMax"],[20,18,24,16,"Math"],[20,23,24,21,"max"],[20,26,24,0],[22,0,51,0],[22,11,51,9,"createWrap"],[22,21,51,0],[22,22,51,20,"func"],[22,26,51,0],[22,28,51,26,"bitmask"],[22,35,51,0],[22,37,51,35,"thisArg"],[22,44,51,0],[22,46,51,44,"partials"],[22,54,51,0],[22,56,51,54,"holders"],[22,63,51,0],[22,65,51,63,"argPos"],[22,71,51,0],[22,73,51,71,"ary"],[22,76,51,0],[22,78,51,76,"arity"],[22,83,51,0],[22,85,51,83],[23,0,52,2],[23,8,52,6,"isBindKey"],[23,20,52,18,"bitmask"],[23,30,52,28,"WRAP_BIND_KEY_FLAG"],[23,48,52,2],[25,0,53,2],[25,8,53,6],[25,9,53,7,"isBindKey"],[25,18,53,6],[25,22,53,20],[25,29,53,27,"func"],[25,33,53,20],[25,37,53,35],[25,47,53,2],[25,49,53,47],[26,0,54,4],[26,12,54,10],[26,16,54,14,"TypeError"],[26,25,54,10],[26,26,54,24,"FUNC_ERROR_TEXT"],[26,41,54,10],[26,42,54,4],[27,0,55,3],[29,0,56,2],[29,8,56,6,"length"],[29,17,56,15,"partials"],[29,28,56,26,"partials"],[29,37,56,35,"length"],[29,43,56,15],[29,46,56,44],[29,47,56,2],[31,0,57,2],[31,8,57,6],[31,9,57,7,"length"],[31,15,57,2],[31,17,57,15],[32,0,58,4,"bitmask"],[32,17,58,15],[32,19,58,17,"WRAP_PARTIAL_FLAG"],[32,39,58,37,"WRAP_PARTIAL_RIGHT_FLAG"],[32,62,58,15],[32,63,58,4],[33,0,59,4,"partials"],[33,17,59,15,"holders"],[33,27,59,25,"undefined"],[33,36,59,4],[34,0,60,3],[36,0,61,2,"ary"],[36,10,61,8,"ary"],[36,18,61,16,"undefined"],[36,27,61,8],[36,30,61,28,"ary"],[36,33,61,8],[36,36,61,34,"nativeMax"],[36,46,61,44,"toInteger"],[36,56,61,54,"ary"],[36,59,61,44],[36,60,61,34],[36,62,61,60],[36,63,61,34],[36,64,61,2],[37,0,62,2,"arity"],[37,12,62,10,"arity"],[37,22,62,20,"undefined"],[37,31,62,10],[37,34,62,32,"arity"],[37,39,62,10],[37,42,62,40,"toInteger"],[37,52,62,50,"arity"],[37,57,62,40],[37,58,62,2],[38,0,63,2,"length"],[38,14,63,12,"holders"],[38,24,63,22,"holders"],[38,32,63,30,"length"],[38,38,63,12],[38,41,63,39],[38,42,63,2],[40,0,65,2],[40,8,65,6,"bitmask"],[40,18,65,16,"WRAP_PARTIAL_RIGHT_FLAG"],[40,41,65,2],[40,43,65,41],[41,0,66,4],[41,10,66,8,"partialsRight"],[41,26,66,24,"partials"],[41,34,66,4],[42,0,66,4],[42,10,67,8,"holdersRight"],[42,25,67,23,"holders"],[42,32,66,4],[43,0,69,4,"partials"],[43,17,69,15,"holders"],[43,27,69,25,"undefined"],[43,36,69,4],[44,0,70,3],[46,0,71,2],[46,8,71,6,"data"],[46,15,71,13,"isBindKey"],[46,27,71,25,"undefined"],[46,36,71,13],[46,39,71,37,"getData"],[46,47,71,45,"func"],[46,51,71,37],[46,52,71,2],[47,0,73,2],[47,8,73,6,"newData"],[47,18,73,16],[47,19,74,4,"func"],[47,23,73,16],[47,25,74,10,"bitmask"],[47,32,73,16],[47,34,74,19,"thisArg"],[47,41,73,16],[47,43,74,28,"partials"],[47,51,73,16],[47,53,74,38,"holders"],[47,60,73,16],[47,62,74,47,"partialsRight"],[47,75,73,16],[47,77,74,62,"holdersRight"],[47,89,73,16],[47,91,75,4,"argPos"],[47,97,73,16],[47,99,75,12,"ary"],[47,102,73,16],[47,104,75,17,"arity"],[47,109,73,16],[47,110,73,2],[49,0,78,2],[49,8,78,6,"data"],[49,12,78,2],[49,14,78,12],[50,0,79,4,"mergeData"],[50,16,79,14,"newData"],[50,23,79,4],[50,25,79,23,"data"],[50,29,79,4],[51,0,80,3],[53,0,81,2,"func"],[53,11,81,9,"newData"],[53,19,81,17],[53,20,81,9],[53,21,81,2],[54,0,82,2,"bitmask"],[54,14,82,12,"newData"],[54,22,82,20],[54,23,82,12],[54,24,82,2],[55,0,83,2,"thisArg"],[55,14,83,12,"newData"],[55,22,83,20],[55,23,83,12],[55,24,83,2],[56,0,84,2,"partials"],[56,15,84,13,"newData"],[56,23,84,21],[56,24,84,13],[56,25,84,2],[57,0,85,2,"holders"],[57,14,85,12,"newData"],[57,22,85,20],[57,23,85,12],[57,24,85,2],[58,0,86,2,"arity"],[58,12,86,10,"newData"],[58,20,86,18],[58,21,86,10],[58,25,86,23,"newData"],[58,33,86,31],[58,34,86,23],[58,40,86,38,"undefined"],[58,49,86,23],[58,52,87,7,"isBindKey"],[58,64,87,19],[58,65,87,7],[58,68,87,23,"func"],[58,73,87,28,"length"],[58,79,86,23],[58,82,88,6,"nativeMax"],[58,92,88,16,"newData"],[58,100,88,24],[58,101,88,16],[58,105,88,29,"length"],[58,111,88,6],[58,113,88,37],[58,114,88,6],[58,115,86,2],[60,0,90,2],[60,8,90,6],[60,9,90,7,"arity"],[60,14,90,6],[60,18,90,16,"bitmask"],[60,29,90,27,"WRAP_CURRY_FLAG"],[60,47,90,45,"WRAP_CURRY_RIGHT_FLAG"],[60,68,90,16],[60,69,90,2],[60,71,90,69],[61,0,91,4,"bitmask"],[61,17,91,15],[61,19,91,17,"WRAP_CURRY_FLAG"],[61,37,91,35,"WRAP_CURRY_RIGHT_FLAG"],[61,58,91,15],[61,59,91,4],[62,0,92,3],[64,0,93,2],[64,8,93,6],[64,9,93,7,"bitmask"],[64,16,93,6],[64,20,93,18,"bitmask"],[64,31,93,29,"WRAP_BIND_FLAG"],[64,45,93,2],[64,47,93,45],[65,0,94,4],[65,10,94,8,"result"],[65,19,94,17,"createBind"],[65,30,94,28,"func"],[65,34,94,17],[65,36,94,34,"bitmask"],[65,43,94,17],[65,45,94,43,"thisArg"],[65,52,94,17],[65,53,94,4],[66,0,95,3],[66,5,93,2],[66,11,95,9],[66,15,95,13,"bitmask"],[66,26,95,24,"WRAP_CURRY_FLAG"],[66,41,95,13],[66,45,95,43,"bitmask"],[66,56,95,54,"WRAP_CURRY_RIGHT_FLAG"],[66,77,95,9],[66,79,95,77],[67,0,96,4,"result"],[67,15,96,13,"createCurry"],[67,27,96,25,"func"],[67,31,96,13],[67,33,96,31,"bitmask"],[67,40,96,13],[67,42,96,40,"arity"],[67,47,96,13],[67,48,96,4],[68,0,97,3],[68,5,95,9],[68,11,97,9],[68,15,97,13],[68,16,97,14,"bitmask"],[68,27,97,25,"WRAP_PARTIAL_FLAG"],[68,44,97,14],[68,48,97,46,"bitmask"],[68,60,97,58,"WRAP_BIND_FLAG"],[68,77,97,75,"WRAP_PARTIAL_FLAG"],[68,94,97,46],[68,95,97,13],[68,100,97,98],[68,101,97,99,"holders"],[68,109,97,107,"length"],[68,115,97,9],[68,117,97,115],[69,0,98,4,"result"],[69,15,98,13,"createPartial"],[69,29,98,27,"func"],[69,33,98,13],[69,35,98,33,"bitmask"],[69,42,98,13],[69,44,98,42,"thisArg"],[69,51,98,13],[69,53,98,51,"partials"],[69,61,98,13],[69,62,98,4],[70,0,99,3],[70,5,97,9],[70,11,99,9],[71,0,100,4,"result"],[71,15,100,13,"createHybrid"],[71,28,100,26,"apply"],[71,33,100,13],[71,34,100,32,"undefined"],[71,43,100,13],[71,45,100,43,"newData"],[71,52,100,13],[71,53,100,4],[72,0,101,3],[74,0,102,2],[74,8,102,6,"setter"],[74,17,102,15,"data"],[74,24,102,22,"baseSetData"],[74,35,102,15],[74,38,102,36,"setData"],[74,45,102,2],[75,0,103,2],[75,11,103,9,"setWrapToString"],[75,27,103,25,"setter"],[75,34,103,32,"result"],[75,40,103,25],[75,42,103,40,"newData"],[75,49,103,25],[75,50,103,9],[75,52,103,50,"func"],[75,56,103,9],[75,58,103,56,"bitmask"],[75,65,103,9],[75,66,103,2],[76,0,104,1],[78,0,106,0,"module"],[78,9,106,7,"exports"],[78,16,106,0],[78,19,106,17,"createWrap"],[78,29,106,0]]},"type":"js/module"}]}