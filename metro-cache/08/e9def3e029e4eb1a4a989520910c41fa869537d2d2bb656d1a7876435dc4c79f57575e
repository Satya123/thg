{"dependencies":[{"name":"./_isLaziable","isAsync":false},{"name":"./_setData","isAsync":false},{"name":"./_setWrapToString","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  var isLaziable = _$$_REQUIRE(_dependencyMap[0], './_isLaziable'),\n      setData = _$$_REQUIRE(_dependencyMap[1], './_setData'),\n      setWrapToString = _$$_REQUIRE(_dependencyMap[2], './_setWrapToString');\n\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n  function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n    var isCurry = bitmask & WRAP_CURRY_FLAG,\n        newHolders = isCurry ? holders : undefined,\n        newHoldersRight = isCurry ? undefined : holders,\n        newPartials = isCurry ? partials : undefined,\n        newPartialsRight = isCurry ? undefined : partials;\n    bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;\n    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n      bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n    }\n\n    var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];\n    var result = wrapFunc.apply(undefined, newData);\n\n    if (isLaziable(func)) {\n      setData(result, newData);\n    }\n\n    result.placeholder = placeholder;\n    return setWrapToString(result, func, bitmask);\n  }\n\n  module.exports = createRecurry;\n});","map":[[2,0,1,0],[2,6,1,4,"isLaziable"],[2,19,1,17,"require"],[2,50,1,25],[2,65,1,17],[2,66,1,0],[3,0,1,0],[3,6,2,4,"setData"],[3,16,2,14,"require"],[3,47,2,22],[3,59,2,14],[3,60,1,0],[4,0,1,0],[4,6,3,4,"setWrapToString"],[4,24,3,22,"require"],[4,55,3,30],[4,75,3,22],[4,76,1,0],[6,0,6,0],[6,6,6,4,"WRAP_BIND_FLAG"],[6,23,6,21],[6,24,6,0],[7,0,6,0],[7,6,7,4,"WRAP_BIND_KEY_FLAG"],[7,27,7,25],[7,28,6,0],[8,0,6,0],[8,6,8,4,"WRAP_CURRY_BOUND_FLAG"],[8,30,8,28],[8,31,6,0],[9,0,6,0],[9,6,9,4,"WRAP_CURRY_FLAG"],[9,24,9,22],[9,25,6,0],[10,0,6,0],[10,6,10,4,"WRAP_PARTIAL_FLAG"],[10,26,10,24],[10,28,6,0],[11,0,6,0],[11,6,11,4,"WRAP_PARTIAL_RIGHT_FLAG"],[11,32,11,30],[11,34,6,0],[13,0,30,0],[13,11,30,9,"createRecurry"],[13,24,30,0],[13,25,30,23,"func"],[13,29,30,0],[13,31,30,29,"bitmask"],[13,38,30,0],[13,40,30,38,"wrapFunc"],[13,48,30,0],[13,50,30,48,"placeholder"],[13,61,30,0],[13,63,30,61,"thisArg"],[13,70,30,0],[13,72,30,70,"partials"],[13,80,30,0],[13,82,30,80,"holders"],[13,89,30,0],[13,91,30,89,"argPos"],[13,97,30,0],[13,99,30,97,"ary"],[13,102,30,0],[13,104,30,102,"arity"],[13,109,30,0],[13,111,30,109],[14,0,31,2],[14,8,31,6,"isCurry"],[14,18,31,16,"bitmask"],[14,28,31,26,"WRAP_CURRY_FLAG"],[14,43,31,2],[15,0,31,2],[15,8,32,6,"newHolders"],[15,21,32,19,"isCurry"],[15,31,32,29,"holders"],[15,38,32,19],[15,41,32,39,"undefined"],[15,50,31,2],[16,0,31,2],[16,8,33,6,"newHoldersRight"],[16,26,33,24,"isCurry"],[16,36,33,34,"undefined"],[16,45,33,24],[16,48,33,46,"holders"],[16,55,31,2],[17,0,31,2],[17,8,34,6,"newPartials"],[17,22,34,20,"isCurry"],[17,32,34,30,"partials"],[17,40,34,20],[17,43,34,41,"undefined"],[17,52,31,2],[18,0,31,2],[18,8,35,6,"newPartialsRight"],[18,27,35,25,"isCurry"],[18,37,35,35,"undefined"],[18,46,35,25],[18,49,35,47,"partials"],[18,57,31,2],[19,0,37,2,"bitmask"],[19,15,37,14,"isCurry"],[19,25,37,24,"WRAP_PARTIAL_FLAG"],[19,42,37,14],[19,45,37,44,"WRAP_PARTIAL_RIGHT_FLAG"],[19,68,37,2],[20,0,38,2,"bitmask"],[20,15,38,13],[20,17,38,15,"isCurry"],[20,27,38,25,"WRAP_PARTIAL_RIGHT_FLAG"],[20,50,38,15],[20,53,38,51,"WRAP_PARTIAL_FLAG"],[20,70,38,13],[20,71,38,2],[22,0,40,2],[22,8,40,6],[22,10,40,8,"bitmask"],[22,20,40,18,"WRAP_CURRY_BOUND_FLAG"],[22,41,40,6],[22,42,40,2],[22,44,40,42],[23,0,41,4,"bitmask"],[23,17,41,15],[23,19,41,17,"WRAP_BIND_FLAG"],[23,36,41,34,"WRAP_BIND_KEY_FLAG"],[23,54,41,15],[23,55,41,4],[24,0,42,3],[26,0,43,2],[26,8,43,6,"newData"],[26,18,43,16],[26,19,44,4,"func"],[26,23,43,16],[26,25,44,10,"bitmask"],[26,32,43,16],[26,34,44,19,"thisArg"],[26,41,43,16],[26,43,44,28,"newPartials"],[26,54,43,16],[26,56,44,41,"newHolders"],[26,66,43,16],[26,68,44,53,"newPartialsRight"],[26,84,43,16],[26,86,45,4,"newHoldersRight"],[26,101,43,16],[26,103,45,21,"argPos"],[26,109,43,16],[26,111,45,29,"ary"],[26,114,43,16],[26,116,45,34,"arity"],[26,121,43,16],[26,122,43,2],[27,0,48,2],[27,8,48,6,"result"],[27,17,48,15,"wrapFunc"],[27,26,48,24,"apply"],[27,31,48,15],[27,32,48,30,"undefined"],[27,41,48,15],[27,43,48,41,"newData"],[27,50,48,15],[27,51,48,2],[29,0,49,2],[29,8,49,6,"isLaziable"],[29,19,49,17,"func"],[29,23,49,6],[29,24,49,2],[29,26,49,24],[30,0,50,4,"setData"],[30,14,50,12,"result"],[30,20,50,4],[30,22,50,20,"newData"],[30,29,50,4],[31,0,51,3],[33,0,52,2,"result"],[33,11,52,9,"placeholder"],[33,22,52,2],[33,25,52,23,"placeholder"],[33,36,52,2],[34,0,53,2],[34,11,53,9,"setWrapToString"],[34,27,53,25,"result"],[34,33,53,9],[34,35,53,33,"func"],[34,39,53,9],[34,41,53,39,"bitmask"],[34,48,53,9],[34,49,53,2],[35,0,54,1],[37,0,56,0,"module"],[37,9,56,7,"exports"],[37,16,56,0],[37,19,56,17,"createRecurry"],[37,32,56,0]]},"type":"js/module"}]}