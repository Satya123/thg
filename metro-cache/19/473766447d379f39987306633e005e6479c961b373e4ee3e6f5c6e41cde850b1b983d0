{"dependencies":[{"name":"lodash","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = resolveIncludes;\n  exports.INCLUDE = void 0;\n\n  var _ = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"lodash\"));\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if ((typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  var INCLUDE = '@@shoutem.theme/include';\n  exports.INCLUDE = INCLUDE;\n\n  function includeSymbolMergeHandler(objVal, srcVal) {\n    var newObjVal = objVal;\n    var include;\n\n    if (srcVal && srcVal[INCLUDE]) {\n      include = newObjVal && newObjVal[INCLUDE] ? _toConsumableArray(newObjVal[INCLUDE]).concat(_toConsumableArray(srcVal[INCLUDE])) : srcVal[INCLUDE];\n    }\n\n    if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n      var newObj = _.mergeWith({}, srcVal, function (o, s) {\n        return s;\n      });\n\n      if (include) {\n        newObj[INCLUDE] = include;\n      }\n\n      return newObj;\n    }\n\n    if (_.isPlainObject(newObjVal) && include) {\n      newObjVal[INCLUDE] = include;\n    }\n  }\n\n  function resolveIncludes(target) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    function getStyle(styleName) {\n      var defaultStyle = {};\n      var style = defaultStyle;\n      var baseStyle = base[styleName];\n\n      if (baseStyle) {\n        if (baseStyle[INCLUDE]) {\n          throw Error(\"Base style cannot have includes, unexpected include in \" + styleName + \".\");\n        }\n\n        style = _objectSpread({}, baseStyle);\n      }\n\n      var targetStyle = target[styleName];\n\n      if (targetStyle) {\n        style = _objectSpread({}, style, targetStyle);\n      }\n\n      if (style === defaultStyle) {\n        console.warn(\"Including unexisting style: \" + styleName);\n      }\n\n      return style;\n    }\n\n    function includeNodeStyles(styleNode, processingStyleNames) {\n      if (!_.isPlainObject(styleNode)) {\n        return styleNode;\n      }\n\n      var styleNamesToInclude = styleNode[INCLUDE];\n      var stylesToInclude = {};\n\n      if (styleNamesToInclude) {\n        if (!_.isArray(styleNamesToInclude)) {\n          throw Error('Include should be array');\n        }\n\n        for (var _iterator = styleNamesToInclude, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _styleName = _ref;\n\n          if (processingStyleNames.has(_styleName)) {\n            throw Error(\"Circular style include, including \" + _styleName);\n          }\n\n          processingStyleNames.add(_styleName);\n          stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(_styleName), processingStyleNames), includeSymbolMergeHandler);\n          processingStyleNames.delete(_styleName);\n        }\n      }\n\n      var resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n\n      delete resultingStyle[INCLUDE];\n\n      for (var _iterator2 = _.keys(resultingStyle), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _styleName3 = _ref2;\n        resultingStyle[_styleName3] = includeNodeStyles(resultingStyle[_styleName3], processingStyleNames);\n      }\n\n      return resultingStyle;\n    }\n\n    var processingStyleNames = new Set();\n    return includeNodeStyles(target, processingStyleNames);\n  }\n});","map":[[8,0,1,0],[24,0,2,7],[24,6,2,13,"INCLUDE"],[24,16,2,23],[24,41,2,7],[27,0,10,0],[27,11,10,9,"includeSymbolMergeHandler"],[27,36,10,0],[27,37,10,35,"objVal"],[27,43,10,0],[27,45,10,43,"srcVal"],[27,51,10,0],[27,53,10,51],[28,0,11,2],[28,8,11,8,"newObjVal"],[28,20,11,20,"objVal"],[28,26,11,2],[29,0,12,2],[29,8,12,6,"include"],[29,15,12,2],[31,0,14,2],[31,8,14,6,"srcVal"],[31,18,14,16,"srcVal"],[31,25,14,23,"INCLUDE"],[31,32,14,16],[31,33,14,2],[31,35,14,33],[32,0,15,4,"include"],[32,16,15,14,"newObjVal"],[32,29,15,27,"newObjVal"],[32,39,15,37,"INCLUDE"],[32,46,15,27],[32,47,15,14],[32,69,16,10,"newObjVal"],[32,79,16,20,"INCLUDE"],[32,86,16,10],[32,87,15,14],[32,115,16,33,"srcVal"],[32,122,16,40,"INCLUDE"],[32,129,16,33],[32,130,15,14],[32,135,16,52,"srcVal"],[32,142,16,59,"INCLUDE"],[32,149,16,52],[32,150,15,4],[33,0,17,3],[35,0,20,2],[35,8,20,6,"_"],[35,10,20,8,"isUndefined"],[35,21,20,6],[35,22,20,20,"newObjVal"],[35,31,20,6],[35,36,20,34,"_"],[35,38,20,36,"isPlainObject"],[35,51,20,34],[35,52,20,50,"srcVal"],[35,58,20,34],[35,59,20,2],[35,61,20,59],[36,0,27,4],[36,10,27,10,"newObj"],[36,19,27,19,"_"],[36,21,27,21,"mergeWith"],[36,30,27,19],[36,31,27,31],[36,33,27,19],[36,35,27,35,"srcVal"],[36,41,27,19],[36,43,27,43],[36,53,27,44,"o"],[36,54,27,43],[36,56,27,47,"s"],[36,57,27,43],[37,0,27,43],[37,15,27,53,"s"],[37,16,27,43],[38,0,27,43],[38,7,27,19],[38,8,27,4],[40,0,34,4],[40,10,34,8,"include"],[40,17,34,4],[40,19,34,17],[41,0,35,6,"newObj"],[41,15,35,13,"INCLUDE"],[41,22,35,6],[41,26,35,24,"include"],[41,33,35,6],[42,0,36,5],[44,0,37,4],[44,13,37,11,"newObj"],[44,19,37,4],[45,0,38,3],[47,0,42,2],[47,8,42,6,"_"],[47,10,42,8,"isPlainObject"],[47,23,42,6],[47,24,42,22,"newObjVal"],[47,33,42,6],[47,38,42,36,"include"],[47,45,42,2],[47,47,42,45],[48,0,43,4,"newObjVal"],[48,16,43,14,"INCLUDE"],[48,23,43,4],[48,27,43,25,"include"],[48,34,43,4],[49,0,44,3],[50,0,45,1],[52,0,53,15],[52,11,53,24,"resolveIncludes"],[52,26,53,15],[52,27,53,40,"target"],[52,33,53,15],[52,35,53,59],[53,0,53,59],[53,8,53,48,"base"],[53,12,53,59],[53,83,53,55],[53,85,53,59],[55,0,68,2],[55,13,68,11,"getStyle"],[55,21,68,2],[55,22,68,20,"styleName"],[55,31,68,2],[55,33,68,31],[56,0,69,4],[56,10,69,10,"defaultStyle"],[56,25,69,25],[56,27,69,4],[57,0,70,4],[57,10,70,8,"style"],[57,18,70,16,"defaultStyle"],[57,30,70,4],[58,0,72,4],[58,10,72,10,"baseStyle"],[58,22,72,22,"base"],[58,27,72,27,"styleName"],[58,36,72,22],[58,37,72,4],[60,0,73,4],[60,10,73,8,"baseStyle"],[60,19,73,4],[60,21,73,19],[61,0,74,6],[61,12,74,10,"baseStyle"],[61,22,74,20,"INCLUDE"],[61,29,74,10],[61,30,74,6],[61,32,74,30],[62,0,75,8],[62,16,75,14,"Error"],[62,82,75,78,"styleName"],[62,91,75,14],[62,98,75,8],[63,0,76,7],[65,0,77,6,"style"],[65,34,77,19,"baseStyle"],[65,43,77,6],[66,0,78,5],[68,0,80,4],[68,10,80,10,"targetStyle"],[68,24,80,24,"target"],[68,31,80,31,"styleName"],[68,40,80,24],[68,41,80,4],[70,0,81,4],[70,10,81,8,"targetStyle"],[70,21,81,4],[70,23,81,21],[71,0,82,6,"style"],[71,34,83,11,"style"],[71,39,82,6],[71,41,84,11,"targetStyle"],[71,52,82,6],[72,0,86,5],[74,0,88,4],[74,10,88,8,"style"],[74,20,88,18,"defaultStyle"],[74,32,88,4],[74,34,88,32],[75,0,89,6,"console"],[75,16,89,14,"warn"],[75,20,89,6],[75,54,89,50,"styleName"],[75,63,89,6],[76,0,90,5],[78,0,92,4],[78,13,92,11,"style"],[78,18,92,4],[79,0,93,3],[81,0,100,2],[81,13,100,11,"includeNodeStyles"],[81,30,100,2],[81,31,100,29,"styleNode"],[81,40,100,2],[81,42,100,40,"processingStyleNames"],[81,62,100,2],[81,64,100,62],[82,0,101,4],[82,10,101,8],[82,11,101,9,"_"],[82,13,101,11,"isPlainObject"],[82,26,101,9],[82,27,101,25,"styleNode"],[82,36,101,9],[82,37,101,4],[82,39,101,37],[83,0,102,6],[83,15,102,13,"styleNode"],[83,24,102,6],[84,0,103,5],[86,0,106,4],[86,10,106,10,"styleNamesToInclude"],[86,32,106,32,"styleNode"],[86,42,106,42,"INCLUDE"],[86,49,106,32],[86,50,106,4],[87,0,108,4],[87,10,108,8,"stylesToInclude"],[87,28,108,26],[87,30,108,4],[89,0,109,4],[89,10,109,8,"styleNamesToInclude"],[89,29,109,4],[89,31,109,29],[90,0,110,6],[90,12,110,10],[90,13,110,11,"_"],[90,15,110,13,"isArray"],[90,22,110,11],[90,23,110,21,"styleNamesToInclude"],[90,42,110,11],[90,43,110,6],[90,45,110,43],[91,0,111,8],[91,16,111,14,"Error"],[91,22,111,20],[91,47,111,14],[91,48,111,8],[92,0,112,7],[94,0,114,6],[94,29,114,30,"styleNamesToInclude"],[94,48,114,6],[94,208,114,51],[95,0,114,51],[97,0,114,51],[98,0,114,51],[99,0,114,51],[100,0,114,51],[101,0,114,51],[102,0,114,51],[103,0,114,51],[104,0,114,51],[106,0,114,51],[106,14,114,17,"styleName"],[106,24,114,51],[108,0,115,8],[108,14,115,12,"processingStyleNames"],[108,35,115,33,"has"],[108,38,115,12],[108,39,115,37,"styleName"],[108,49,115,12],[108,50,115,8],[108,52,115,49],[109,0,116,10],[109,18,116,16,"Error"],[109,63,116,59,"styleName"],[109,73,116,16],[109,74,116,10],[110,0,117,9],[112,0,118,8,"processingStyleNames"],[112,31,118,29,"add"],[112,34,118,8],[112,35,118,33,"styleName"],[112,45,118,8],[113,0,119,8,"stylesToInclude"],[113,28,119,26,"_"],[113,30,119,28,"mergeWith"],[113,39,119,26],[113,40,120,10],[113,42,119,26],[113,44,121,10,"stylesToInclude"],[113,59,119,26],[113,61,122,10,"includeNodeStyles"],[113,79,122,28,"getStyle"],[113,88,122,37,"styleName"],[113,98,122,28],[113,99,122,10],[113,101,122,49,"processingStyleNames"],[113,121,122,10],[113,122,119,26],[113,124,123,10,"includeSymbolMergeHandler"],[113,149,119,26],[113,150,119,8],[114,0,125,8,"processingStyleNames"],[114,31,125,29,"delete"],[114,37,125,8],[114,38,125,36,"styleName"],[114,48,125,8],[115,0,126,7],[116,0,127,5],[118,0,129,4],[118,10,129,10,"resultingStyle"],[118,27,129,27,"_"],[118,29,129,29,"mergeWith"],[118,38,129,27],[118,39,129,39],[118,41,129,27],[118,43,129,43,"stylesToInclude"],[118,58,129,27],[118,60,129,60,"styleNode"],[118,69,129,27],[118,71,129,71,"includeSymbolMergeHandler"],[118,96,129,27],[118,97,129,4],[120,0,130,4],[120,13,130,11,"resultingStyle"],[120,28,130,26,"INCLUDE"],[120,35,130,11],[120,36,130,4],[122,0,132,4],[122,28,132,28,"_"],[122,30,132,30,"keys"],[122,34,132,28],[122,35,132,35,"resultingStyle"],[122,49,132,28],[122,50,132,4],[122,217,132,52],[123,0,132,52],[125,0,132,52],[126,0,132,52],[127,0,132,52],[128,0,132,52],[129,0,132,52],[130,0,132,52],[131,0,132,52],[132,0,132,52],[134,0,132,52],[134,12,132,15,"styleName"],[134,23,132,52],[135,0,133,6,"resultingStyle"],[135,23,133,21,"styleName"],[135,34,133,6],[135,38,134,8,"includeNodeStyles"],[135,56,134,26,"resultingStyle"],[135,71,134,41,"styleName"],[135,82,134,26],[135,83,134,8],[135,85,134,53,"processingStyleNames"],[135,105,134,8],[135,106,133,6],[136,0,135,5],[138,0,136,4],[138,13,136,11,"resultingStyle"],[138,27,136,4],[139,0,137,3],[141,0,142,2],[141,8,142,8,"processingStyleNames"],[141,31,142,31],[141,35,142,35,"Set"],[141,38,142,31],[141,40,142,2],[142,0,143,2],[142,11,143,9,"includeNodeStyles"],[142,29,143,27,"target"],[142,35,143,9],[142,37,143,35,"processingStyleNames"],[142,57,143,9],[142,58,143,2],[143,0,144,1]]},"type":"js/module"}]}